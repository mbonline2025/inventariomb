
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model Vendor
 * 
 */
export type Vendor = $Result.DefaultSelection<Prisma.$VendorPayload>
/**
 * Model Software
 * 
 */
export type Software = $Result.DefaultSelection<Prisma.$SoftwarePayload>
/**
 * Model License
 * 
 */
export type License = $Result.DefaultSelection<Prisma.$LicensePayload>
/**
 * Model HardwareItem
 * 
 */
export type HardwareItem = $Result.DefaultSelection<Prisma.$HardwareItemPayload>
/**
 * Model Attachment
 * 
 */
export type Attachment = $Result.DefaultSelection<Prisma.$AttachmentPayload>
/**
 * Model Maintenance
 * 
 */
export type Maintenance = $Result.DefaultSelection<Prisma.$MaintenancePayload>
/**
 * Model Allocation
 * 
 */
export type Allocation = $Result.DefaultSelection<Prisma.$AllocationPayload>
/**
 * Model SoftwareInstall
 * 
 */
export type SoftwareInstall = $Result.DefaultSelection<Prisma.$SoftwareInstallPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  ADMIN: 'ADMIN',
  GESTOR: 'GESTOR',
  COLABORADOR: 'COLABORADOR'
};

export type Role = (typeof Role)[keyof typeof Role]


export const VendorType: {
  LOJA_FISICA: 'LOJA_FISICA',
  E_COMMERCE: 'E_COMMERCE',
  MARKETPLACE: 'MARKETPLACE',
  FABRICANTE: 'FABRICANTE'
};

export type VendorType = (typeof VendorType)[keyof typeof VendorType]


export const RenewalType: {
  MENSAL: 'MENSAL',
  ANUAL: 'ANUAL',
  PERPETUA: 'PERPETUA'
};

export type RenewalType = (typeof RenewalType)[keyof typeof RenewalType]


export const HardwareType: {
  LAPTOP: 'LAPTOP',
  IMPRESSORA: 'IMPRESSORA',
  MONITOR: 'MONITOR',
  PERIFERICO: 'PERIFERICO',
  REDE: 'REDE',
  OUTRO: 'OUTRO'
};

export type HardwareType = (typeof HardwareType)[keyof typeof HardwareType]


export const HardwareStatus: {
  EM_USO: 'EM_USO',
  EM_ESTOQUE: 'EM_ESTOQUE',
  EM_MANUTENCAO: 'EM_MANUTENCAO',
  DESATIVADO: 'DESATIVADO',
  EMPRESTADO: 'EMPRESTADO'
};

export type HardwareStatus = (typeof HardwareStatus)[keyof typeof HardwareStatus]


export const HardwareCondition: {
  NOVO: 'NOVO',
  BOM: 'BOM',
  REGULAR: 'REGULAR',
  RUIM: 'RUIM'
};

export type HardwareCondition = (typeof HardwareCondition)[keyof typeof HardwareCondition]


export const EntityType: {
  HARDWARE: 'HARDWARE',
  SOFTWARE: 'SOFTWARE',
  LICENSE: 'LICENSE',
  VENDOR: 'VENDOR',
  MAINTENANCE: 'MAINTENANCE'
};

export type EntityType = (typeof EntityType)[keyof typeof EntityType]


export const MaintenanceStatus: {
  ABERTA: 'ABERTA',
  EM_ANDAMENTO: 'EM_ANDAMENTO',
  CONCLUIDA: 'CONCLUIDA',
  CANCELADA: 'CANCELADA'
};

export type MaintenanceStatus = (typeof MaintenanceStatus)[keyof typeof MaintenanceStatus]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type VendorType = $Enums.VendorType

export const VendorType: typeof $Enums.VendorType

export type RenewalType = $Enums.RenewalType

export const RenewalType: typeof $Enums.RenewalType

export type HardwareType = $Enums.HardwareType

export const HardwareType: typeof $Enums.HardwareType

export type HardwareStatus = $Enums.HardwareStatus

export const HardwareStatus: typeof $Enums.HardwareStatus

export type HardwareCondition = $Enums.HardwareCondition

export const HardwareCondition: typeof $Enums.HardwareCondition

export type EntityType = $Enums.EntityType

export const EntityType: typeof $Enums.EntityType

export type MaintenanceStatus = $Enums.MaintenanceStatus

export const MaintenanceStatus: typeof $Enums.MaintenanceStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs>;

  /**
   * `prisma.vendor`: Exposes CRUD operations for the **Vendor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vendors
    * const vendors = await prisma.vendor.findMany()
    * ```
    */
  get vendor(): Prisma.VendorDelegate<ExtArgs>;

  /**
   * `prisma.software`: Exposes CRUD operations for the **Software** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Software
    * const software = await prisma.software.findMany()
    * ```
    */
  get software(): Prisma.SoftwareDelegate<ExtArgs>;

  /**
   * `prisma.license`: Exposes CRUD operations for the **License** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Licenses
    * const licenses = await prisma.license.findMany()
    * ```
    */
  get license(): Prisma.LicenseDelegate<ExtArgs>;

  /**
   * `prisma.hardwareItem`: Exposes CRUD operations for the **HardwareItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HardwareItems
    * const hardwareItems = await prisma.hardwareItem.findMany()
    * ```
    */
  get hardwareItem(): Prisma.HardwareItemDelegate<ExtArgs>;

  /**
   * `prisma.attachment`: Exposes CRUD operations for the **Attachment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attachments
    * const attachments = await prisma.attachment.findMany()
    * ```
    */
  get attachment(): Prisma.AttachmentDelegate<ExtArgs>;

  /**
   * `prisma.maintenance`: Exposes CRUD operations for the **Maintenance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Maintenances
    * const maintenances = await prisma.maintenance.findMany()
    * ```
    */
  get maintenance(): Prisma.MaintenanceDelegate<ExtArgs>;

  /**
   * `prisma.allocation`: Exposes CRUD operations for the **Allocation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Allocations
    * const allocations = await prisma.allocation.findMany()
    * ```
    */
  get allocation(): Prisma.AllocationDelegate<ExtArgs>;

  /**
   * `prisma.softwareInstall`: Exposes CRUD operations for the **SoftwareInstall** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SoftwareInstalls
    * const softwareInstalls = await prisma.softwareInstall.findMany()
    * ```
    */
  get softwareInstall(): Prisma.SoftwareInstallDelegate<ExtArgs>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Department: 'Department',
    Vendor: 'Vendor',
    Software: 'Software',
    License: 'License',
    HardwareItem: 'HardwareItem',
    Attachment: 'Attachment',
    Maintenance: 'Maintenance',
    Allocation: 'Allocation',
    SoftwareInstall: 'SoftwareInstall',
    AuditLog: 'AuditLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "department" | "vendor" | "software" | "license" | "hardwareItem" | "attachment" | "maintenance" | "allocation" | "softwareInstall" | "auditLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      Vendor: {
        payload: Prisma.$VendorPayload<ExtArgs>
        fields: Prisma.VendorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VendorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VendorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          findFirst: {
            args: Prisma.VendorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VendorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          findMany: {
            args: Prisma.VendorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>[]
          }
          create: {
            args: Prisma.VendorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          createMany: {
            args: Prisma.VendorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.VendorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          update: {
            args: Prisma.VendorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          deleteMany: {
            args: Prisma.VendorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VendorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VendorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          aggregate: {
            args: Prisma.VendorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVendor>
          }
          groupBy: {
            args: Prisma.VendorGroupByArgs<ExtArgs>
            result: $Utils.Optional<VendorGroupByOutputType>[]
          }
          count: {
            args: Prisma.VendorCountArgs<ExtArgs>
            result: $Utils.Optional<VendorCountAggregateOutputType> | number
          }
        }
      }
      Software: {
        payload: Prisma.$SoftwarePayload<ExtArgs>
        fields: Prisma.SoftwareFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SoftwareFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SoftwareFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload>
          }
          findFirst: {
            args: Prisma.SoftwareFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SoftwareFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload>
          }
          findMany: {
            args: Prisma.SoftwareFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload>[]
          }
          create: {
            args: Prisma.SoftwareCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload>
          }
          createMany: {
            args: Prisma.SoftwareCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SoftwareDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload>
          }
          update: {
            args: Prisma.SoftwareUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload>
          }
          deleteMany: {
            args: Prisma.SoftwareDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SoftwareUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SoftwareUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload>
          }
          aggregate: {
            args: Prisma.SoftwareAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSoftware>
          }
          groupBy: {
            args: Prisma.SoftwareGroupByArgs<ExtArgs>
            result: $Utils.Optional<SoftwareGroupByOutputType>[]
          }
          count: {
            args: Prisma.SoftwareCountArgs<ExtArgs>
            result: $Utils.Optional<SoftwareCountAggregateOutputType> | number
          }
        }
      }
      License: {
        payload: Prisma.$LicensePayload<ExtArgs>
        fields: Prisma.LicenseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LicenseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicensePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LicenseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicensePayload>
          }
          findFirst: {
            args: Prisma.LicenseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicensePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LicenseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicensePayload>
          }
          findMany: {
            args: Prisma.LicenseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicensePayload>[]
          }
          create: {
            args: Prisma.LicenseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicensePayload>
          }
          createMany: {
            args: Prisma.LicenseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LicenseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicensePayload>
          }
          update: {
            args: Prisma.LicenseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicensePayload>
          }
          deleteMany: {
            args: Prisma.LicenseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LicenseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LicenseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicensePayload>
          }
          aggregate: {
            args: Prisma.LicenseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLicense>
          }
          groupBy: {
            args: Prisma.LicenseGroupByArgs<ExtArgs>
            result: $Utils.Optional<LicenseGroupByOutputType>[]
          }
          count: {
            args: Prisma.LicenseCountArgs<ExtArgs>
            result: $Utils.Optional<LicenseCountAggregateOutputType> | number
          }
        }
      }
      HardwareItem: {
        payload: Prisma.$HardwareItemPayload<ExtArgs>
        fields: Prisma.HardwareItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HardwareItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HardwareItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HardwareItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HardwareItemPayload>
          }
          findFirst: {
            args: Prisma.HardwareItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HardwareItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HardwareItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HardwareItemPayload>
          }
          findMany: {
            args: Prisma.HardwareItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HardwareItemPayload>[]
          }
          create: {
            args: Prisma.HardwareItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HardwareItemPayload>
          }
          createMany: {
            args: Prisma.HardwareItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.HardwareItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HardwareItemPayload>
          }
          update: {
            args: Prisma.HardwareItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HardwareItemPayload>
          }
          deleteMany: {
            args: Prisma.HardwareItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HardwareItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HardwareItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HardwareItemPayload>
          }
          aggregate: {
            args: Prisma.HardwareItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHardwareItem>
          }
          groupBy: {
            args: Prisma.HardwareItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<HardwareItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.HardwareItemCountArgs<ExtArgs>
            result: $Utils.Optional<HardwareItemCountAggregateOutputType> | number
          }
        }
      }
      Attachment: {
        payload: Prisma.$AttachmentPayload<ExtArgs>
        fields: Prisma.AttachmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttachmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttachmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          findFirst: {
            args: Prisma.AttachmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttachmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          findMany: {
            args: Prisma.AttachmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>[]
          }
          create: {
            args: Prisma.AttachmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          createMany: {
            args: Prisma.AttachmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AttachmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          update: {
            args: Prisma.AttachmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          deleteMany: {
            args: Prisma.AttachmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttachmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AttachmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          aggregate: {
            args: Prisma.AttachmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttachment>
          }
          groupBy: {
            args: Prisma.AttachmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttachmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttachmentCountArgs<ExtArgs>
            result: $Utils.Optional<AttachmentCountAggregateOutputType> | number
          }
        }
      }
      Maintenance: {
        payload: Prisma.$MaintenancePayload<ExtArgs>
        fields: Prisma.MaintenanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MaintenanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MaintenanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenancePayload>
          }
          findFirst: {
            args: Prisma.MaintenanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MaintenanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenancePayload>
          }
          findMany: {
            args: Prisma.MaintenanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenancePayload>[]
          }
          create: {
            args: Prisma.MaintenanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenancePayload>
          }
          createMany: {
            args: Prisma.MaintenanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MaintenanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenancePayload>
          }
          update: {
            args: Prisma.MaintenanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenancePayload>
          }
          deleteMany: {
            args: Prisma.MaintenanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MaintenanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MaintenanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenancePayload>
          }
          aggregate: {
            args: Prisma.MaintenanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMaintenance>
          }
          groupBy: {
            args: Prisma.MaintenanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<MaintenanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.MaintenanceCountArgs<ExtArgs>
            result: $Utils.Optional<MaintenanceCountAggregateOutputType> | number
          }
        }
      }
      Allocation: {
        payload: Prisma.$AllocationPayload<ExtArgs>
        fields: Prisma.AllocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AllocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AllocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationPayload>
          }
          findFirst: {
            args: Prisma.AllocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AllocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationPayload>
          }
          findMany: {
            args: Prisma.AllocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationPayload>[]
          }
          create: {
            args: Prisma.AllocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationPayload>
          }
          createMany: {
            args: Prisma.AllocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AllocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationPayload>
          }
          update: {
            args: Prisma.AllocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationPayload>
          }
          deleteMany: {
            args: Prisma.AllocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AllocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AllocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllocationPayload>
          }
          aggregate: {
            args: Prisma.AllocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAllocation>
          }
          groupBy: {
            args: Prisma.AllocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<AllocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.AllocationCountArgs<ExtArgs>
            result: $Utils.Optional<AllocationCountAggregateOutputType> | number
          }
        }
      }
      SoftwareInstall: {
        payload: Prisma.$SoftwareInstallPayload<ExtArgs>
        fields: Prisma.SoftwareInstallFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SoftwareInstallFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareInstallPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SoftwareInstallFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareInstallPayload>
          }
          findFirst: {
            args: Prisma.SoftwareInstallFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareInstallPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SoftwareInstallFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareInstallPayload>
          }
          findMany: {
            args: Prisma.SoftwareInstallFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareInstallPayload>[]
          }
          create: {
            args: Prisma.SoftwareInstallCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareInstallPayload>
          }
          createMany: {
            args: Prisma.SoftwareInstallCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SoftwareInstallDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareInstallPayload>
          }
          update: {
            args: Prisma.SoftwareInstallUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareInstallPayload>
          }
          deleteMany: {
            args: Prisma.SoftwareInstallDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SoftwareInstallUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SoftwareInstallUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareInstallPayload>
          }
          aggregate: {
            args: Prisma.SoftwareInstallAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSoftwareInstall>
          }
          groupBy: {
            args: Prisma.SoftwareInstallGroupByArgs<ExtArgs>
            result: $Utils.Optional<SoftwareInstallGroupByOutputType>[]
          }
          count: {
            args: Prisma.SoftwareInstallCountArgs<ExtArgs>
            result: $Utils.Optional<SoftwareInstallCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    hardwareItems: number
    allocations: number
    auditLogs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hardwareItems?: boolean | UserCountOutputTypeCountHardwareItemsArgs
    allocations?: boolean | UserCountOutputTypeCountAllocationsArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountHardwareItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HardwareItemWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAllocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AllocationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }


  /**
   * Count Type DepartmentCountOutputType
   */

  export type DepartmentCountOutputType = {
    hardwareItems: number
    allocations: number
  }

  export type DepartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hardwareItems?: boolean | DepartmentCountOutputTypeCountHardwareItemsArgs
    allocations?: boolean | DepartmentCountOutputTypeCountAllocationsArgs
  }

  // Custom InputTypes
  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     */
    select?: DepartmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountHardwareItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HardwareItemWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountAllocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AllocationWhereInput
  }


  /**
   * Count Type VendorCountOutputType
   */

  export type VendorCountOutputType = {
    hardwareItems: number
    licenses: number
    software: number
  }

  export type VendorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hardwareItems?: boolean | VendorCountOutputTypeCountHardwareItemsArgs
    licenses?: boolean | VendorCountOutputTypeCountLicensesArgs
    software?: boolean | VendorCountOutputTypeCountSoftwareArgs
  }

  // Custom InputTypes
  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendorCountOutputType
     */
    select?: VendorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeCountHardwareItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HardwareItemWhereInput
  }

  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeCountLicensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LicenseWhereInput
  }

  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeCountSoftwareArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoftwareWhereInput
  }


  /**
   * Count Type SoftwareCountOutputType
   */

  export type SoftwareCountOutputType = {
    licenses: number
    softwareInstalls: number
  }

  export type SoftwareCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    licenses?: boolean | SoftwareCountOutputTypeCountLicensesArgs
    softwareInstalls?: boolean | SoftwareCountOutputTypeCountSoftwareInstallsArgs
  }

  // Custom InputTypes
  /**
   * SoftwareCountOutputType without action
   */
  export type SoftwareCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareCountOutputType
     */
    select?: SoftwareCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SoftwareCountOutputType without action
   */
  export type SoftwareCountOutputTypeCountLicensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LicenseWhereInput
  }

  /**
   * SoftwareCountOutputType without action
   */
  export type SoftwareCountOutputTypeCountSoftwareInstallsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoftwareInstallWhereInput
  }


  /**
   * Count Type LicenseCountOutputType
   */

  export type LicenseCountOutputType = {
    softwareInstalls: number
  }

  export type LicenseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    softwareInstalls?: boolean | LicenseCountOutputTypeCountSoftwareInstallsArgs
  }

  // Custom InputTypes
  /**
   * LicenseCountOutputType without action
   */
  export type LicenseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicenseCountOutputType
     */
    select?: LicenseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LicenseCountOutputType without action
   */
  export type LicenseCountOutputTypeCountSoftwareInstallsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoftwareInstallWhereInput
  }


  /**
   * Count Type HardwareItemCountOutputType
   */

  export type HardwareItemCountOutputType = {
    attachments: number
    maintenances: number
    allocations: number
    softwareInstalls: number
    auditLogs: number
  }

  export type HardwareItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attachments?: boolean | HardwareItemCountOutputTypeCountAttachmentsArgs
    maintenances?: boolean | HardwareItemCountOutputTypeCountMaintenancesArgs
    allocations?: boolean | HardwareItemCountOutputTypeCountAllocationsArgs
    softwareInstalls?: boolean | HardwareItemCountOutputTypeCountSoftwareInstallsArgs
    auditLogs?: boolean | HardwareItemCountOutputTypeCountAuditLogsArgs
  }

  // Custom InputTypes
  /**
   * HardwareItemCountOutputType without action
   */
  export type HardwareItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareItemCountOutputType
     */
    select?: HardwareItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HardwareItemCountOutputType without action
   */
  export type HardwareItemCountOutputTypeCountAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttachmentWhereInput
  }

  /**
   * HardwareItemCountOutputType without action
   */
  export type HardwareItemCountOutputTypeCountMaintenancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaintenanceWhereInput
  }

  /**
   * HardwareItemCountOutputType without action
   */
  export type HardwareItemCountOutputTypeCountAllocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AllocationWhereInput
  }

  /**
   * HardwareItemCountOutputType without action
   */
  export type HardwareItemCountOutputTypeCountSoftwareInstallsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoftwareInstallWhereInput
  }

  /**
   * HardwareItemCountOutputType without action
   */
  export type HardwareItemCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    passwordHash: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    passwordHash: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    passwordHash: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    passwordHash?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    passwordHash?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    passwordHash?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    passwordHash: string
    role: $Enums.Role
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hardwareItems?: boolean | User$hardwareItemsArgs<ExtArgs>
    allocations?: boolean | User$allocationsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hardwareItems?: boolean | User$hardwareItemsArgs<ExtArgs>
    allocations?: boolean | User$allocationsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      hardwareItems: Prisma.$HardwareItemPayload<ExtArgs>[]
      allocations: Prisma.$AllocationPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      passwordHash: string
      role: $Enums.Role
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    hardwareItems<T extends User$hardwareItemsArgs<ExtArgs> = {}>(args?: Subset<T, User$hardwareItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HardwareItemPayload<ExtArgs>, T, "findMany"> | Null>
    allocations<T extends User$allocationsArgs<ExtArgs> = {}>(args?: Subset<T, User$allocationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "findMany"> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.hardwareItems
   */
  export type User$hardwareItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareItem
     */
    select?: HardwareItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareItemInclude<ExtArgs> | null
    where?: HardwareItemWhereInput
    orderBy?: HardwareItemOrderByWithRelationInput | HardwareItemOrderByWithRelationInput[]
    cursor?: HardwareItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HardwareItemScalarFieldEnum | HardwareItemScalarFieldEnum[]
  }

  /**
   * User.allocations
   */
  export type User$allocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allocation
     */
    select?: AllocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationInclude<ExtArgs> | null
    where?: AllocationWhereInput
    orderBy?: AllocationOrderByWithRelationInput | AllocationOrderByWithRelationInput[]
    cursor?: AllocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AllocationScalarFieldEnum | AllocationScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type DepartmentMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    id: string
    name: string
    description: string | null
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    hardwareItems?: boolean | Department$hardwareItemsArgs<ExtArgs>
    allocations?: boolean | Department$allocationsArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>


  export type DepartmentSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
  }

  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hardwareItems?: boolean | Department$hardwareItemsArgs<ExtArgs>
    allocations?: boolean | Department$allocationsArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      hardwareItems: Prisma.$HardwareItemPayload<ExtArgs>[]
      allocations: Prisma.$AllocationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
    }, ExtArgs["result"]["department"]>
    composites: {}
  }

  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentFindUniqueArgs>(args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Department that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentFindFirstArgs>(args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentFindManyArgs>(args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
     */
    create<T extends DepartmentCreateArgs>(args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Departments.
     * @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentCreateManyArgs>(args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
     */
    delete<T extends DepartmentDeleteArgs>(args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentUpdateArgs>(args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentDeleteManyArgs>(args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentUpdateManyArgs>(args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentUpsertArgs>(args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    hardwareItems<T extends Department$hardwareItemsArgs<ExtArgs> = {}>(args?: Subset<T, Department$hardwareItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HardwareItemPayload<ExtArgs>, T, "findMany"> | Null>
    allocations<T extends Department$allocationsArgs<ExtArgs> = {}>(args?: Subset<T, Department$allocationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Department model
   */ 
  interface DepartmentFieldRefs {
    readonly id: FieldRef<"Department", 'String'>
    readonly name: FieldRef<"Department", 'String'>
    readonly description: FieldRef<"Department", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }

  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
  }

  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }

  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
  }

  /**
   * Department.hardwareItems
   */
  export type Department$hardwareItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareItem
     */
    select?: HardwareItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareItemInclude<ExtArgs> | null
    where?: HardwareItemWhereInput
    orderBy?: HardwareItemOrderByWithRelationInput | HardwareItemOrderByWithRelationInput[]
    cursor?: HardwareItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HardwareItemScalarFieldEnum | HardwareItemScalarFieldEnum[]
  }

  /**
   * Department.allocations
   */
  export type Department$allocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allocation
     */
    select?: AllocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationInclude<ExtArgs> | null
    where?: AllocationWhereInput
    orderBy?: AllocationOrderByWithRelationInput | AllocationOrderByWithRelationInput[]
    cursor?: AllocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AllocationScalarFieldEnum | AllocationScalarFieldEnum[]
  }

  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
  }


  /**
   * Model Vendor
   */

  export type AggregateVendor = {
    _count: VendorCountAggregateOutputType | null
    _min: VendorMinAggregateOutputType | null
    _max: VendorMaxAggregateOutputType | null
  }

  export type VendorMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.VendorType | null
    cnpj: string | null
    contactEmail: string | null
    contactPhone: string | null
    address: string | null
    notes: string | null
  }

  export type VendorMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.VendorType | null
    cnpj: string | null
    contactEmail: string | null
    contactPhone: string | null
    address: string | null
    notes: string | null
  }

  export type VendorCountAggregateOutputType = {
    id: number
    name: number
    type: number
    cnpj: number
    contactEmail: number
    contactPhone: number
    address: number
    notes: number
    _all: number
  }


  export type VendorMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    cnpj?: true
    contactEmail?: true
    contactPhone?: true
    address?: true
    notes?: true
  }

  export type VendorMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    cnpj?: true
    contactEmail?: true
    contactPhone?: true
    address?: true
    notes?: true
  }

  export type VendorCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    cnpj?: true
    contactEmail?: true
    contactPhone?: true
    address?: true
    notes?: true
    _all?: true
  }

  export type VendorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendor to aggregate.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vendors
    **/
    _count?: true | VendorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VendorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VendorMaxAggregateInputType
  }

  export type GetVendorAggregateType<T extends VendorAggregateArgs> = {
        [P in keyof T & keyof AggregateVendor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVendor[P]>
      : GetScalarType<T[P], AggregateVendor[P]>
  }




  export type VendorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VendorWhereInput
    orderBy?: VendorOrderByWithAggregationInput | VendorOrderByWithAggregationInput[]
    by: VendorScalarFieldEnum[] | VendorScalarFieldEnum
    having?: VendorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VendorCountAggregateInputType | true
    _min?: VendorMinAggregateInputType
    _max?: VendorMaxAggregateInputType
  }

  export type VendorGroupByOutputType = {
    id: string
    name: string
    type: $Enums.VendorType
    cnpj: string | null
    contactEmail: string | null
    contactPhone: string | null
    address: string | null
    notes: string | null
    _count: VendorCountAggregateOutputType | null
    _min: VendorMinAggregateOutputType | null
    _max: VendorMaxAggregateOutputType | null
  }

  type GetVendorGroupByPayload<T extends VendorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VendorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VendorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VendorGroupByOutputType[P]>
            : GetScalarType<T[P], VendorGroupByOutputType[P]>
        }
      >
    >


  export type VendorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    cnpj?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    address?: boolean
    notes?: boolean
    hardwareItems?: boolean | Vendor$hardwareItemsArgs<ExtArgs>
    licenses?: boolean | Vendor$licensesArgs<ExtArgs>
    software?: boolean | Vendor$softwareArgs<ExtArgs>
    _count?: boolean | VendorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vendor"]>


  export type VendorSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    cnpj?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    address?: boolean
    notes?: boolean
  }

  export type VendorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hardwareItems?: boolean | Vendor$hardwareItemsArgs<ExtArgs>
    licenses?: boolean | Vendor$licensesArgs<ExtArgs>
    software?: boolean | Vendor$softwareArgs<ExtArgs>
    _count?: boolean | VendorCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $VendorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vendor"
    objects: {
      hardwareItems: Prisma.$HardwareItemPayload<ExtArgs>[]
      licenses: Prisma.$LicensePayload<ExtArgs>[]
      software: Prisma.$SoftwarePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: $Enums.VendorType
      cnpj: string | null
      contactEmail: string | null
      contactPhone: string | null
      address: string | null
      notes: string | null
    }, ExtArgs["result"]["vendor"]>
    composites: {}
  }

  type VendorGetPayload<S extends boolean | null | undefined | VendorDefaultArgs> = $Result.GetResult<Prisma.$VendorPayload, S>

  type VendorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VendorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VendorCountAggregateInputType | true
    }

  export interface VendorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vendor'], meta: { name: 'Vendor' } }
    /**
     * Find zero or one Vendor that matches the filter.
     * @param {VendorFindUniqueArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VendorFindUniqueArgs>(args: SelectSubset<T, VendorFindUniqueArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Vendor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VendorFindUniqueOrThrowArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VendorFindUniqueOrThrowArgs>(args: SelectSubset<T, VendorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Vendor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindFirstArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VendorFindFirstArgs>(args?: SelectSubset<T, VendorFindFirstArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Vendor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindFirstOrThrowArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VendorFindFirstOrThrowArgs>(args?: SelectSubset<T, VendorFindFirstOrThrowArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Vendors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vendors
     * const vendors = await prisma.vendor.findMany()
     * 
     * // Get first 10 Vendors
     * const vendors = await prisma.vendor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vendorWithIdOnly = await prisma.vendor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VendorFindManyArgs>(args?: SelectSubset<T, VendorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Vendor.
     * @param {VendorCreateArgs} args - Arguments to create a Vendor.
     * @example
     * // Create one Vendor
     * const Vendor = await prisma.vendor.create({
     *   data: {
     *     // ... data to create a Vendor
     *   }
     * })
     * 
     */
    create<T extends VendorCreateArgs>(args: SelectSubset<T, VendorCreateArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Vendors.
     * @param {VendorCreateManyArgs} args - Arguments to create many Vendors.
     * @example
     * // Create many Vendors
     * const vendor = await prisma.vendor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VendorCreateManyArgs>(args?: SelectSubset<T, VendorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Vendor.
     * @param {VendorDeleteArgs} args - Arguments to delete one Vendor.
     * @example
     * // Delete one Vendor
     * const Vendor = await prisma.vendor.delete({
     *   where: {
     *     // ... filter to delete one Vendor
     *   }
     * })
     * 
     */
    delete<T extends VendorDeleteArgs>(args: SelectSubset<T, VendorDeleteArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Vendor.
     * @param {VendorUpdateArgs} args - Arguments to update one Vendor.
     * @example
     * // Update one Vendor
     * const vendor = await prisma.vendor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VendorUpdateArgs>(args: SelectSubset<T, VendorUpdateArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Vendors.
     * @param {VendorDeleteManyArgs} args - Arguments to filter Vendors to delete.
     * @example
     * // Delete a few Vendors
     * const { count } = await prisma.vendor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VendorDeleteManyArgs>(args?: SelectSubset<T, VendorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vendors
     * const vendor = await prisma.vendor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VendorUpdateManyArgs>(args: SelectSubset<T, VendorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vendor.
     * @param {VendorUpsertArgs} args - Arguments to update or create a Vendor.
     * @example
     * // Update or create a Vendor
     * const vendor = await prisma.vendor.upsert({
     *   create: {
     *     // ... data to create a Vendor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vendor we want to update
     *   }
     * })
     */
    upsert<T extends VendorUpsertArgs>(args: SelectSubset<T, VendorUpsertArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Vendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorCountArgs} args - Arguments to filter Vendors to count.
     * @example
     * // Count the number of Vendors
     * const count = await prisma.vendor.count({
     *   where: {
     *     // ... the filter for the Vendors we want to count
     *   }
     * })
    **/
    count<T extends VendorCountArgs>(
      args?: Subset<T, VendorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VendorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VendorAggregateArgs>(args: Subset<T, VendorAggregateArgs>): Prisma.PrismaPromise<GetVendorAggregateType<T>>

    /**
     * Group by Vendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VendorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VendorGroupByArgs['orderBy'] }
        : { orderBy?: VendorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VendorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVendorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vendor model
   */
  readonly fields: VendorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vendor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VendorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    hardwareItems<T extends Vendor$hardwareItemsArgs<ExtArgs> = {}>(args?: Subset<T, Vendor$hardwareItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HardwareItemPayload<ExtArgs>, T, "findMany"> | Null>
    licenses<T extends Vendor$licensesArgs<ExtArgs> = {}>(args?: Subset<T, Vendor$licensesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, "findMany"> | Null>
    software<T extends Vendor$softwareArgs<ExtArgs> = {}>(args?: Subset<T, Vendor$softwareArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vendor model
   */ 
  interface VendorFieldRefs {
    readonly id: FieldRef<"Vendor", 'String'>
    readonly name: FieldRef<"Vendor", 'String'>
    readonly type: FieldRef<"Vendor", 'VendorType'>
    readonly cnpj: FieldRef<"Vendor", 'String'>
    readonly contactEmail: FieldRef<"Vendor", 'String'>
    readonly contactPhone: FieldRef<"Vendor", 'String'>
    readonly address: FieldRef<"Vendor", 'String'>
    readonly notes: FieldRef<"Vendor", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Vendor findUnique
   */
  export type VendorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor findUniqueOrThrow
   */
  export type VendorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor findFirst
   */
  export type VendorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendors.
     */
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor findFirstOrThrow
   */
  export type VendorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendors.
     */
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor findMany
   */
  export type VendorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendors to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor create
   */
  export type VendorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The data needed to create a Vendor.
     */
    data: XOR<VendorCreateInput, VendorUncheckedCreateInput>
  }

  /**
   * Vendor createMany
   */
  export type VendorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vendors.
     */
    data: VendorCreateManyInput | VendorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vendor update
   */
  export type VendorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The data needed to update a Vendor.
     */
    data: XOR<VendorUpdateInput, VendorUncheckedUpdateInput>
    /**
     * Choose, which Vendor to update.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor updateMany
   */
  export type VendorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vendors.
     */
    data: XOR<VendorUpdateManyMutationInput, VendorUncheckedUpdateManyInput>
    /**
     * Filter which Vendors to update
     */
    where?: VendorWhereInput
  }

  /**
   * Vendor upsert
   */
  export type VendorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The filter to search for the Vendor to update in case it exists.
     */
    where: VendorWhereUniqueInput
    /**
     * In case the Vendor found by the `where` argument doesn't exist, create a new Vendor with this data.
     */
    create: XOR<VendorCreateInput, VendorUncheckedCreateInput>
    /**
     * In case the Vendor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VendorUpdateInput, VendorUncheckedUpdateInput>
  }

  /**
   * Vendor delete
   */
  export type VendorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter which Vendor to delete.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor deleteMany
   */
  export type VendorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendors to delete
     */
    where?: VendorWhereInput
  }

  /**
   * Vendor.hardwareItems
   */
  export type Vendor$hardwareItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareItem
     */
    select?: HardwareItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareItemInclude<ExtArgs> | null
    where?: HardwareItemWhereInput
    orderBy?: HardwareItemOrderByWithRelationInput | HardwareItemOrderByWithRelationInput[]
    cursor?: HardwareItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HardwareItemScalarFieldEnum | HardwareItemScalarFieldEnum[]
  }

  /**
   * Vendor.licenses
   */
  export type Vendor$licensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    where?: LicenseWhereInput
    orderBy?: LicenseOrderByWithRelationInput | LicenseOrderByWithRelationInput[]
    cursor?: LicenseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LicenseScalarFieldEnum | LicenseScalarFieldEnum[]
  }

  /**
   * Vendor.software
   */
  export type Vendor$softwareArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    where?: SoftwareWhereInput
    orderBy?: SoftwareOrderByWithRelationInput | SoftwareOrderByWithRelationInput[]
    cursor?: SoftwareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SoftwareScalarFieldEnum | SoftwareScalarFieldEnum[]
  }

  /**
   * Vendor without action
   */
  export type VendorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
  }


  /**
   * Model Software
   */

  export type AggregateSoftware = {
    _count: SoftwareCountAggregateOutputType | null
    _min: SoftwareMinAggregateOutputType | null
    _max: SoftwareMaxAggregateOutputType | null
  }

  export type SoftwareMinAggregateOutputType = {
    id: string | null
    name: string | null
    version: string | null
    category: string | null
    notes: string | null
    vendorId: string | null
  }

  export type SoftwareMaxAggregateOutputType = {
    id: string | null
    name: string | null
    version: string | null
    category: string | null
    notes: string | null
    vendorId: string | null
  }

  export type SoftwareCountAggregateOutputType = {
    id: number
    name: number
    version: number
    category: number
    notes: number
    vendorId: number
    _all: number
  }


  export type SoftwareMinAggregateInputType = {
    id?: true
    name?: true
    version?: true
    category?: true
    notes?: true
    vendorId?: true
  }

  export type SoftwareMaxAggregateInputType = {
    id?: true
    name?: true
    version?: true
    category?: true
    notes?: true
    vendorId?: true
  }

  export type SoftwareCountAggregateInputType = {
    id?: true
    name?: true
    version?: true
    category?: true
    notes?: true
    vendorId?: true
    _all?: true
  }

  export type SoftwareAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Software to aggregate.
     */
    where?: SoftwareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Software to fetch.
     */
    orderBy?: SoftwareOrderByWithRelationInput | SoftwareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SoftwareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Software from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Software.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Software
    **/
    _count?: true | SoftwareCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SoftwareMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SoftwareMaxAggregateInputType
  }

  export type GetSoftwareAggregateType<T extends SoftwareAggregateArgs> = {
        [P in keyof T & keyof AggregateSoftware]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSoftware[P]>
      : GetScalarType<T[P], AggregateSoftware[P]>
  }




  export type SoftwareGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoftwareWhereInput
    orderBy?: SoftwareOrderByWithAggregationInput | SoftwareOrderByWithAggregationInput[]
    by: SoftwareScalarFieldEnum[] | SoftwareScalarFieldEnum
    having?: SoftwareScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SoftwareCountAggregateInputType | true
    _min?: SoftwareMinAggregateInputType
    _max?: SoftwareMaxAggregateInputType
  }

  export type SoftwareGroupByOutputType = {
    id: string
    name: string
    version: string | null
    category: string | null
    notes: string | null
    vendorId: string | null
    _count: SoftwareCountAggregateOutputType | null
    _min: SoftwareMinAggregateOutputType | null
    _max: SoftwareMaxAggregateOutputType | null
  }

  type GetSoftwareGroupByPayload<T extends SoftwareGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SoftwareGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SoftwareGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SoftwareGroupByOutputType[P]>
            : GetScalarType<T[P], SoftwareGroupByOutputType[P]>
        }
      >
    >


  export type SoftwareSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    version?: boolean
    category?: boolean
    notes?: boolean
    vendorId?: boolean
    vendor?: boolean | Software$vendorArgs<ExtArgs>
    licenses?: boolean | Software$licensesArgs<ExtArgs>
    softwareInstalls?: boolean | Software$softwareInstallsArgs<ExtArgs>
    _count?: boolean | SoftwareCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["software"]>


  export type SoftwareSelectScalar = {
    id?: boolean
    name?: boolean
    version?: boolean
    category?: boolean
    notes?: boolean
    vendorId?: boolean
  }

  export type SoftwareInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vendor?: boolean | Software$vendorArgs<ExtArgs>
    licenses?: boolean | Software$licensesArgs<ExtArgs>
    softwareInstalls?: boolean | Software$softwareInstallsArgs<ExtArgs>
    _count?: boolean | SoftwareCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $SoftwarePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Software"
    objects: {
      vendor: Prisma.$VendorPayload<ExtArgs> | null
      licenses: Prisma.$LicensePayload<ExtArgs>[]
      softwareInstalls: Prisma.$SoftwareInstallPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      version: string | null
      category: string | null
      notes: string | null
      vendorId: string | null
    }, ExtArgs["result"]["software"]>
    composites: {}
  }

  type SoftwareGetPayload<S extends boolean | null | undefined | SoftwareDefaultArgs> = $Result.GetResult<Prisma.$SoftwarePayload, S>

  type SoftwareCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SoftwareFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SoftwareCountAggregateInputType | true
    }

  export interface SoftwareDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Software'], meta: { name: 'Software' } }
    /**
     * Find zero or one Software that matches the filter.
     * @param {SoftwareFindUniqueArgs} args - Arguments to find a Software
     * @example
     * // Get one Software
     * const software = await prisma.software.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SoftwareFindUniqueArgs>(args: SelectSubset<T, SoftwareFindUniqueArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Software that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SoftwareFindUniqueOrThrowArgs} args - Arguments to find a Software
     * @example
     * // Get one Software
     * const software = await prisma.software.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SoftwareFindUniqueOrThrowArgs>(args: SelectSubset<T, SoftwareFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Software that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareFindFirstArgs} args - Arguments to find a Software
     * @example
     * // Get one Software
     * const software = await prisma.software.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SoftwareFindFirstArgs>(args?: SelectSubset<T, SoftwareFindFirstArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Software that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareFindFirstOrThrowArgs} args - Arguments to find a Software
     * @example
     * // Get one Software
     * const software = await prisma.software.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SoftwareFindFirstOrThrowArgs>(args?: SelectSubset<T, SoftwareFindFirstOrThrowArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Software that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Software
     * const software = await prisma.software.findMany()
     * 
     * // Get first 10 Software
     * const software = await prisma.software.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const softwareWithIdOnly = await prisma.software.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SoftwareFindManyArgs>(args?: SelectSubset<T, SoftwareFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Software.
     * @param {SoftwareCreateArgs} args - Arguments to create a Software.
     * @example
     * // Create one Software
     * const Software = await prisma.software.create({
     *   data: {
     *     // ... data to create a Software
     *   }
     * })
     * 
     */
    create<T extends SoftwareCreateArgs>(args: SelectSubset<T, SoftwareCreateArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Software.
     * @param {SoftwareCreateManyArgs} args - Arguments to create many Software.
     * @example
     * // Create many Software
     * const software = await prisma.software.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SoftwareCreateManyArgs>(args?: SelectSubset<T, SoftwareCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Software.
     * @param {SoftwareDeleteArgs} args - Arguments to delete one Software.
     * @example
     * // Delete one Software
     * const Software = await prisma.software.delete({
     *   where: {
     *     // ... filter to delete one Software
     *   }
     * })
     * 
     */
    delete<T extends SoftwareDeleteArgs>(args: SelectSubset<T, SoftwareDeleteArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Software.
     * @param {SoftwareUpdateArgs} args - Arguments to update one Software.
     * @example
     * // Update one Software
     * const software = await prisma.software.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SoftwareUpdateArgs>(args: SelectSubset<T, SoftwareUpdateArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Software.
     * @param {SoftwareDeleteManyArgs} args - Arguments to filter Software to delete.
     * @example
     * // Delete a few Software
     * const { count } = await prisma.software.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SoftwareDeleteManyArgs>(args?: SelectSubset<T, SoftwareDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Software.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Software
     * const software = await prisma.software.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SoftwareUpdateManyArgs>(args: SelectSubset<T, SoftwareUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Software.
     * @param {SoftwareUpsertArgs} args - Arguments to update or create a Software.
     * @example
     * // Update or create a Software
     * const software = await prisma.software.upsert({
     *   create: {
     *     // ... data to create a Software
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Software we want to update
     *   }
     * })
     */
    upsert<T extends SoftwareUpsertArgs>(args: SelectSubset<T, SoftwareUpsertArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Software.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareCountArgs} args - Arguments to filter Software to count.
     * @example
     * // Count the number of Software
     * const count = await prisma.software.count({
     *   where: {
     *     // ... the filter for the Software we want to count
     *   }
     * })
    **/
    count<T extends SoftwareCountArgs>(
      args?: Subset<T, SoftwareCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SoftwareCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Software.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SoftwareAggregateArgs>(args: Subset<T, SoftwareAggregateArgs>): Prisma.PrismaPromise<GetSoftwareAggregateType<T>>

    /**
     * Group by Software.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SoftwareGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SoftwareGroupByArgs['orderBy'] }
        : { orderBy?: SoftwareGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SoftwareGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSoftwareGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Software model
   */
  readonly fields: SoftwareFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Software.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SoftwareClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    vendor<T extends Software$vendorArgs<ExtArgs> = {}>(args?: Subset<T, Software$vendorArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    licenses<T extends Software$licensesArgs<ExtArgs> = {}>(args?: Subset<T, Software$licensesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, "findMany"> | Null>
    softwareInstalls<T extends Software$softwareInstallsArgs<ExtArgs> = {}>(args?: Subset<T, Software$softwareInstallsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoftwareInstallPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Software model
   */ 
  interface SoftwareFieldRefs {
    readonly id: FieldRef<"Software", 'String'>
    readonly name: FieldRef<"Software", 'String'>
    readonly version: FieldRef<"Software", 'String'>
    readonly category: FieldRef<"Software", 'String'>
    readonly notes: FieldRef<"Software", 'String'>
    readonly vendorId: FieldRef<"Software", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Software findUnique
   */
  export type SoftwareFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * Filter, which Software to fetch.
     */
    where: SoftwareWhereUniqueInput
  }

  /**
   * Software findUniqueOrThrow
   */
  export type SoftwareFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * Filter, which Software to fetch.
     */
    where: SoftwareWhereUniqueInput
  }

  /**
   * Software findFirst
   */
  export type SoftwareFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * Filter, which Software to fetch.
     */
    where?: SoftwareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Software to fetch.
     */
    orderBy?: SoftwareOrderByWithRelationInput | SoftwareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Software.
     */
    cursor?: SoftwareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Software from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Software.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Software.
     */
    distinct?: SoftwareScalarFieldEnum | SoftwareScalarFieldEnum[]
  }

  /**
   * Software findFirstOrThrow
   */
  export type SoftwareFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * Filter, which Software to fetch.
     */
    where?: SoftwareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Software to fetch.
     */
    orderBy?: SoftwareOrderByWithRelationInput | SoftwareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Software.
     */
    cursor?: SoftwareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Software from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Software.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Software.
     */
    distinct?: SoftwareScalarFieldEnum | SoftwareScalarFieldEnum[]
  }

  /**
   * Software findMany
   */
  export type SoftwareFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * Filter, which Software to fetch.
     */
    where?: SoftwareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Software to fetch.
     */
    orderBy?: SoftwareOrderByWithRelationInput | SoftwareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Software.
     */
    cursor?: SoftwareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Software from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Software.
     */
    skip?: number
    distinct?: SoftwareScalarFieldEnum | SoftwareScalarFieldEnum[]
  }

  /**
   * Software create
   */
  export type SoftwareCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * The data needed to create a Software.
     */
    data: XOR<SoftwareCreateInput, SoftwareUncheckedCreateInput>
  }

  /**
   * Software createMany
   */
  export type SoftwareCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Software.
     */
    data: SoftwareCreateManyInput | SoftwareCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Software update
   */
  export type SoftwareUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * The data needed to update a Software.
     */
    data: XOR<SoftwareUpdateInput, SoftwareUncheckedUpdateInput>
    /**
     * Choose, which Software to update.
     */
    where: SoftwareWhereUniqueInput
  }

  /**
   * Software updateMany
   */
  export type SoftwareUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Software.
     */
    data: XOR<SoftwareUpdateManyMutationInput, SoftwareUncheckedUpdateManyInput>
    /**
     * Filter which Software to update
     */
    where?: SoftwareWhereInput
  }

  /**
   * Software upsert
   */
  export type SoftwareUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * The filter to search for the Software to update in case it exists.
     */
    where: SoftwareWhereUniqueInput
    /**
     * In case the Software found by the `where` argument doesn't exist, create a new Software with this data.
     */
    create: XOR<SoftwareCreateInput, SoftwareUncheckedCreateInput>
    /**
     * In case the Software was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SoftwareUpdateInput, SoftwareUncheckedUpdateInput>
  }

  /**
   * Software delete
   */
  export type SoftwareDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * Filter which Software to delete.
     */
    where: SoftwareWhereUniqueInput
  }

  /**
   * Software deleteMany
   */
  export type SoftwareDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Software to delete
     */
    where?: SoftwareWhereInput
  }

  /**
   * Software.vendor
   */
  export type Software$vendorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    where?: VendorWhereInput
  }

  /**
   * Software.licenses
   */
  export type Software$licensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    where?: LicenseWhereInput
    orderBy?: LicenseOrderByWithRelationInput | LicenseOrderByWithRelationInput[]
    cursor?: LicenseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LicenseScalarFieldEnum | LicenseScalarFieldEnum[]
  }

  /**
   * Software.softwareInstalls
   */
  export type Software$softwareInstallsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareInstall
     */
    select?: SoftwareInstallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInstallInclude<ExtArgs> | null
    where?: SoftwareInstallWhereInput
    orderBy?: SoftwareInstallOrderByWithRelationInput | SoftwareInstallOrderByWithRelationInput[]
    cursor?: SoftwareInstallWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SoftwareInstallScalarFieldEnum | SoftwareInstallScalarFieldEnum[]
  }

  /**
   * Software without action
   */
  export type SoftwareDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
  }


  /**
   * Model License
   */

  export type AggregateLicense = {
    _count: LicenseCountAggregateOutputType | null
    _avg: LicenseAvgAggregateOutputType | null
    _sum: LicenseSumAggregateOutputType | null
    _min: LicenseMinAggregateOutputType | null
    _max: LicenseMaxAggregateOutputType | null
  }

  export type LicenseAvgAggregateOutputType = {
    seatsTotal: number | null
    seatsInUse: number | null
    cost: number | null
  }

  export type LicenseSumAggregateOutputType = {
    seatsTotal: number | null
    seatsInUse: number | null
    cost: number | null
  }

  export type LicenseMinAggregateOutputType = {
    id: string | null
    softwareId: string | null
    key: string | null
    seatsTotal: number | null
    seatsInUse: number | null
    purchaseDate: Date | null
    startDate: Date | null
    endDate: Date | null
    renewalType: $Enums.RenewalType | null
    cost: number | null
    vendorId: string | null
    notes: string | null
  }

  export type LicenseMaxAggregateOutputType = {
    id: string | null
    softwareId: string | null
    key: string | null
    seatsTotal: number | null
    seatsInUse: number | null
    purchaseDate: Date | null
    startDate: Date | null
    endDate: Date | null
    renewalType: $Enums.RenewalType | null
    cost: number | null
    vendorId: string | null
    notes: string | null
  }

  export type LicenseCountAggregateOutputType = {
    id: number
    softwareId: number
    key: number
    seatsTotal: number
    seatsInUse: number
    purchaseDate: number
    startDate: number
    endDate: number
    renewalType: number
    cost: number
    vendorId: number
    notes: number
    _all: number
  }


  export type LicenseAvgAggregateInputType = {
    seatsTotal?: true
    seatsInUse?: true
    cost?: true
  }

  export type LicenseSumAggregateInputType = {
    seatsTotal?: true
    seatsInUse?: true
    cost?: true
  }

  export type LicenseMinAggregateInputType = {
    id?: true
    softwareId?: true
    key?: true
    seatsTotal?: true
    seatsInUse?: true
    purchaseDate?: true
    startDate?: true
    endDate?: true
    renewalType?: true
    cost?: true
    vendorId?: true
    notes?: true
  }

  export type LicenseMaxAggregateInputType = {
    id?: true
    softwareId?: true
    key?: true
    seatsTotal?: true
    seatsInUse?: true
    purchaseDate?: true
    startDate?: true
    endDate?: true
    renewalType?: true
    cost?: true
    vendorId?: true
    notes?: true
  }

  export type LicenseCountAggregateInputType = {
    id?: true
    softwareId?: true
    key?: true
    seatsTotal?: true
    seatsInUse?: true
    purchaseDate?: true
    startDate?: true
    endDate?: true
    renewalType?: true
    cost?: true
    vendorId?: true
    notes?: true
    _all?: true
  }

  export type LicenseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which License to aggregate.
     */
    where?: LicenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Licenses to fetch.
     */
    orderBy?: LicenseOrderByWithRelationInput | LicenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LicenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Licenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Licenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Licenses
    **/
    _count?: true | LicenseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LicenseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LicenseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LicenseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LicenseMaxAggregateInputType
  }

  export type GetLicenseAggregateType<T extends LicenseAggregateArgs> = {
        [P in keyof T & keyof AggregateLicense]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLicense[P]>
      : GetScalarType<T[P], AggregateLicense[P]>
  }




  export type LicenseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LicenseWhereInput
    orderBy?: LicenseOrderByWithAggregationInput | LicenseOrderByWithAggregationInput[]
    by: LicenseScalarFieldEnum[] | LicenseScalarFieldEnum
    having?: LicenseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LicenseCountAggregateInputType | true
    _avg?: LicenseAvgAggregateInputType
    _sum?: LicenseSumAggregateInputType
    _min?: LicenseMinAggregateInputType
    _max?: LicenseMaxAggregateInputType
  }

  export type LicenseGroupByOutputType = {
    id: string
    softwareId: string
    key: string
    seatsTotal: number
    seatsInUse: number
    purchaseDate: Date | null
    startDate: Date | null
    endDate: Date | null
    renewalType: $Enums.RenewalType
    cost: number | null
    vendorId: string | null
    notes: string | null
    _count: LicenseCountAggregateOutputType | null
    _avg: LicenseAvgAggregateOutputType | null
    _sum: LicenseSumAggregateOutputType | null
    _min: LicenseMinAggregateOutputType | null
    _max: LicenseMaxAggregateOutputType | null
  }

  type GetLicenseGroupByPayload<T extends LicenseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LicenseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LicenseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LicenseGroupByOutputType[P]>
            : GetScalarType<T[P], LicenseGroupByOutputType[P]>
        }
      >
    >


  export type LicenseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    softwareId?: boolean
    key?: boolean
    seatsTotal?: boolean
    seatsInUse?: boolean
    purchaseDate?: boolean
    startDate?: boolean
    endDate?: boolean
    renewalType?: boolean
    cost?: boolean
    vendorId?: boolean
    notes?: boolean
    software?: boolean | SoftwareDefaultArgs<ExtArgs>
    vendor?: boolean | License$vendorArgs<ExtArgs>
    softwareInstalls?: boolean | License$softwareInstallsArgs<ExtArgs>
    _count?: boolean | LicenseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["license"]>


  export type LicenseSelectScalar = {
    id?: boolean
    softwareId?: boolean
    key?: boolean
    seatsTotal?: boolean
    seatsInUse?: boolean
    purchaseDate?: boolean
    startDate?: boolean
    endDate?: boolean
    renewalType?: boolean
    cost?: boolean
    vendorId?: boolean
    notes?: boolean
  }

  export type LicenseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    software?: boolean | SoftwareDefaultArgs<ExtArgs>
    vendor?: boolean | License$vendorArgs<ExtArgs>
    softwareInstalls?: boolean | License$softwareInstallsArgs<ExtArgs>
    _count?: boolean | LicenseCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $LicensePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "License"
    objects: {
      software: Prisma.$SoftwarePayload<ExtArgs>
      vendor: Prisma.$VendorPayload<ExtArgs> | null
      softwareInstalls: Prisma.$SoftwareInstallPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      softwareId: string
      key: string
      seatsTotal: number
      seatsInUse: number
      purchaseDate: Date | null
      startDate: Date | null
      endDate: Date | null
      renewalType: $Enums.RenewalType
      cost: number | null
      vendorId: string | null
      notes: string | null
    }, ExtArgs["result"]["license"]>
    composites: {}
  }

  type LicenseGetPayload<S extends boolean | null | undefined | LicenseDefaultArgs> = $Result.GetResult<Prisma.$LicensePayload, S>

  type LicenseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LicenseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LicenseCountAggregateInputType | true
    }

  export interface LicenseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['License'], meta: { name: 'License' } }
    /**
     * Find zero or one License that matches the filter.
     * @param {LicenseFindUniqueArgs} args - Arguments to find a License
     * @example
     * // Get one License
     * const license = await prisma.license.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LicenseFindUniqueArgs>(args: SelectSubset<T, LicenseFindUniqueArgs<ExtArgs>>): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one License that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LicenseFindUniqueOrThrowArgs} args - Arguments to find a License
     * @example
     * // Get one License
     * const license = await prisma.license.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LicenseFindUniqueOrThrowArgs>(args: SelectSubset<T, LicenseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first License that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseFindFirstArgs} args - Arguments to find a License
     * @example
     * // Get one License
     * const license = await prisma.license.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LicenseFindFirstArgs>(args?: SelectSubset<T, LicenseFindFirstArgs<ExtArgs>>): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first License that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseFindFirstOrThrowArgs} args - Arguments to find a License
     * @example
     * // Get one License
     * const license = await prisma.license.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LicenseFindFirstOrThrowArgs>(args?: SelectSubset<T, LicenseFindFirstOrThrowArgs<ExtArgs>>): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Licenses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Licenses
     * const licenses = await prisma.license.findMany()
     * 
     * // Get first 10 Licenses
     * const licenses = await prisma.license.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const licenseWithIdOnly = await prisma.license.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LicenseFindManyArgs>(args?: SelectSubset<T, LicenseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a License.
     * @param {LicenseCreateArgs} args - Arguments to create a License.
     * @example
     * // Create one License
     * const License = await prisma.license.create({
     *   data: {
     *     // ... data to create a License
     *   }
     * })
     * 
     */
    create<T extends LicenseCreateArgs>(args: SelectSubset<T, LicenseCreateArgs<ExtArgs>>): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Licenses.
     * @param {LicenseCreateManyArgs} args - Arguments to create many Licenses.
     * @example
     * // Create many Licenses
     * const license = await prisma.license.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LicenseCreateManyArgs>(args?: SelectSubset<T, LicenseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a License.
     * @param {LicenseDeleteArgs} args - Arguments to delete one License.
     * @example
     * // Delete one License
     * const License = await prisma.license.delete({
     *   where: {
     *     // ... filter to delete one License
     *   }
     * })
     * 
     */
    delete<T extends LicenseDeleteArgs>(args: SelectSubset<T, LicenseDeleteArgs<ExtArgs>>): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one License.
     * @param {LicenseUpdateArgs} args - Arguments to update one License.
     * @example
     * // Update one License
     * const license = await prisma.license.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LicenseUpdateArgs>(args: SelectSubset<T, LicenseUpdateArgs<ExtArgs>>): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Licenses.
     * @param {LicenseDeleteManyArgs} args - Arguments to filter Licenses to delete.
     * @example
     * // Delete a few Licenses
     * const { count } = await prisma.license.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LicenseDeleteManyArgs>(args?: SelectSubset<T, LicenseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Licenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Licenses
     * const license = await prisma.license.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LicenseUpdateManyArgs>(args: SelectSubset<T, LicenseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one License.
     * @param {LicenseUpsertArgs} args - Arguments to update or create a License.
     * @example
     * // Update or create a License
     * const license = await prisma.license.upsert({
     *   create: {
     *     // ... data to create a License
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the License we want to update
     *   }
     * })
     */
    upsert<T extends LicenseUpsertArgs>(args: SelectSubset<T, LicenseUpsertArgs<ExtArgs>>): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Licenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseCountArgs} args - Arguments to filter Licenses to count.
     * @example
     * // Count the number of Licenses
     * const count = await prisma.license.count({
     *   where: {
     *     // ... the filter for the Licenses we want to count
     *   }
     * })
    **/
    count<T extends LicenseCountArgs>(
      args?: Subset<T, LicenseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LicenseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a License.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LicenseAggregateArgs>(args: Subset<T, LicenseAggregateArgs>): Prisma.PrismaPromise<GetLicenseAggregateType<T>>

    /**
     * Group by License.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LicenseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LicenseGroupByArgs['orderBy'] }
        : { orderBy?: LicenseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LicenseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLicenseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the License model
   */
  readonly fields: LicenseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for License.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LicenseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    software<T extends SoftwareDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SoftwareDefaultArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    vendor<T extends License$vendorArgs<ExtArgs> = {}>(args?: Subset<T, License$vendorArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    softwareInstalls<T extends License$softwareInstallsArgs<ExtArgs> = {}>(args?: Subset<T, License$softwareInstallsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoftwareInstallPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the License model
   */ 
  interface LicenseFieldRefs {
    readonly id: FieldRef<"License", 'String'>
    readonly softwareId: FieldRef<"License", 'String'>
    readonly key: FieldRef<"License", 'String'>
    readonly seatsTotal: FieldRef<"License", 'Int'>
    readonly seatsInUse: FieldRef<"License", 'Int'>
    readonly purchaseDate: FieldRef<"License", 'DateTime'>
    readonly startDate: FieldRef<"License", 'DateTime'>
    readonly endDate: FieldRef<"License", 'DateTime'>
    readonly renewalType: FieldRef<"License", 'RenewalType'>
    readonly cost: FieldRef<"License", 'Float'>
    readonly vendorId: FieldRef<"License", 'String'>
    readonly notes: FieldRef<"License", 'String'>
  }
    

  // Custom InputTypes
  /**
   * License findUnique
   */
  export type LicenseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * Filter, which License to fetch.
     */
    where: LicenseWhereUniqueInput
  }

  /**
   * License findUniqueOrThrow
   */
  export type LicenseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * Filter, which License to fetch.
     */
    where: LicenseWhereUniqueInput
  }

  /**
   * License findFirst
   */
  export type LicenseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * Filter, which License to fetch.
     */
    where?: LicenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Licenses to fetch.
     */
    orderBy?: LicenseOrderByWithRelationInput | LicenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Licenses.
     */
    cursor?: LicenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Licenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Licenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Licenses.
     */
    distinct?: LicenseScalarFieldEnum | LicenseScalarFieldEnum[]
  }

  /**
   * License findFirstOrThrow
   */
  export type LicenseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * Filter, which License to fetch.
     */
    where?: LicenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Licenses to fetch.
     */
    orderBy?: LicenseOrderByWithRelationInput | LicenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Licenses.
     */
    cursor?: LicenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Licenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Licenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Licenses.
     */
    distinct?: LicenseScalarFieldEnum | LicenseScalarFieldEnum[]
  }

  /**
   * License findMany
   */
  export type LicenseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * Filter, which Licenses to fetch.
     */
    where?: LicenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Licenses to fetch.
     */
    orderBy?: LicenseOrderByWithRelationInput | LicenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Licenses.
     */
    cursor?: LicenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Licenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Licenses.
     */
    skip?: number
    distinct?: LicenseScalarFieldEnum | LicenseScalarFieldEnum[]
  }

  /**
   * License create
   */
  export type LicenseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * The data needed to create a License.
     */
    data: XOR<LicenseCreateInput, LicenseUncheckedCreateInput>
  }

  /**
   * License createMany
   */
  export type LicenseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Licenses.
     */
    data: LicenseCreateManyInput | LicenseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * License update
   */
  export type LicenseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * The data needed to update a License.
     */
    data: XOR<LicenseUpdateInput, LicenseUncheckedUpdateInput>
    /**
     * Choose, which License to update.
     */
    where: LicenseWhereUniqueInput
  }

  /**
   * License updateMany
   */
  export type LicenseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Licenses.
     */
    data: XOR<LicenseUpdateManyMutationInput, LicenseUncheckedUpdateManyInput>
    /**
     * Filter which Licenses to update
     */
    where?: LicenseWhereInput
  }

  /**
   * License upsert
   */
  export type LicenseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * The filter to search for the License to update in case it exists.
     */
    where: LicenseWhereUniqueInput
    /**
     * In case the License found by the `where` argument doesn't exist, create a new License with this data.
     */
    create: XOR<LicenseCreateInput, LicenseUncheckedCreateInput>
    /**
     * In case the License was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LicenseUpdateInput, LicenseUncheckedUpdateInput>
  }

  /**
   * License delete
   */
  export type LicenseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * Filter which License to delete.
     */
    where: LicenseWhereUniqueInput
  }

  /**
   * License deleteMany
   */
  export type LicenseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Licenses to delete
     */
    where?: LicenseWhereInput
  }

  /**
   * License.vendor
   */
  export type License$vendorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    where?: VendorWhereInput
  }

  /**
   * License.softwareInstalls
   */
  export type License$softwareInstallsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareInstall
     */
    select?: SoftwareInstallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInstallInclude<ExtArgs> | null
    where?: SoftwareInstallWhereInput
    orderBy?: SoftwareInstallOrderByWithRelationInput | SoftwareInstallOrderByWithRelationInput[]
    cursor?: SoftwareInstallWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SoftwareInstallScalarFieldEnum | SoftwareInstallScalarFieldEnum[]
  }

  /**
   * License without action
   */
  export type LicenseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
  }


  /**
   * Model HardwareItem
   */

  export type AggregateHardwareItem = {
    _count: HardwareItemCountAggregateOutputType | null
    _avg: HardwareItemAvgAggregateOutputType | null
    _sum: HardwareItemSumAggregateOutputType | null
    _min: HardwareItemMinAggregateOutputType | null
    _max: HardwareItemMaxAggregateOutputType | null
  }

  export type HardwareItemAvgAggregateOutputType = {
    purchaseCost: number | null
  }

  export type HardwareItemSumAggregateOutputType = {
    purchaseCost: number | null
  }

  export type HardwareItemMinAggregateOutputType = {
    id: string | null
    assetTag: string | null
    type: $Enums.HardwareType | null
    brand: string | null
    model: string | null
    serialNumber: string | null
    purchaseDate: Date | null
    purchaseCost: number | null
    vendorId: string | null
    warrantyEndDate: Date | null
    status: $Enums.HardwareStatus | null
    condition: $Enums.HardwareCondition | null
    location: string | null
    responsibleUserId: string | null
    departmentId: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HardwareItemMaxAggregateOutputType = {
    id: string | null
    assetTag: string | null
    type: $Enums.HardwareType | null
    brand: string | null
    model: string | null
    serialNumber: string | null
    purchaseDate: Date | null
    purchaseCost: number | null
    vendorId: string | null
    warrantyEndDate: Date | null
    status: $Enums.HardwareStatus | null
    condition: $Enums.HardwareCondition | null
    location: string | null
    responsibleUserId: string | null
    departmentId: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HardwareItemCountAggregateOutputType = {
    id: number
    assetTag: number
    type: number
    brand: number
    model: number
    serialNumber: number
    purchaseDate: number
    purchaseCost: number
    vendorId: number
    warrantyEndDate: number
    status: number
    condition: number
    location: number
    responsibleUserId: number
    departmentId: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type HardwareItemAvgAggregateInputType = {
    purchaseCost?: true
  }

  export type HardwareItemSumAggregateInputType = {
    purchaseCost?: true
  }

  export type HardwareItemMinAggregateInputType = {
    id?: true
    assetTag?: true
    type?: true
    brand?: true
    model?: true
    serialNumber?: true
    purchaseDate?: true
    purchaseCost?: true
    vendorId?: true
    warrantyEndDate?: true
    status?: true
    condition?: true
    location?: true
    responsibleUserId?: true
    departmentId?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HardwareItemMaxAggregateInputType = {
    id?: true
    assetTag?: true
    type?: true
    brand?: true
    model?: true
    serialNumber?: true
    purchaseDate?: true
    purchaseCost?: true
    vendorId?: true
    warrantyEndDate?: true
    status?: true
    condition?: true
    location?: true
    responsibleUserId?: true
    departmentId?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HardwareItemCountAggregateInputType = {
    id?: true
    assetTag?: true
    type?: true
    brand?: true
    model?: true
    serialNumber?: true
    purchaseDate?: true
    purchaseCost?: true
    vendorId?: true
    warrantyEndDate?: true
    status?: true
    condition?: true
    location?: true
    responsibleUserId?: true
    departmentId?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type HardwareItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HardwareItem to aggregate.
     */
    where?: HardwareItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HardwareItems to fetch.
     */
    orderBy?: HardwareItemOrderByWithRelationInput | HardwareItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HardwareItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HardwareItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HardwareItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HardwareItems
    **/
    _count?: true | HardwareItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HardwareItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HardwareItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HardwareItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HardwareItemMaxAggregateInputType
  }

  export type GetHardwareItemAggregateType<T extends HardwareItemAggregateArgs> = {
        [P in keyof T & keyof AggregateHardwareItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHardwareItem[P]>
      : GetScalarType<T[P], AggregateHardwareItem[P]>
  }




  export type HardwareItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HardwareItemWhereInput
    orderBy?: HardwareItemOrderByWithAggregationInput | HardwareItemOrderByWithAggregationInput[]
    by: HardwareItemScalarFieldEnum[] | HardwareItemScalarFieldEnum
    having?: HardwareItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HardwareItemCountAggregateInputType | true
    _avg?: HardwareItemAvgAggregateInputType
    _sum?: HardwareItemSumAggregateInputType
    _min?: HardwareItemMinAggregateInputType
    _max?: HardwareItemMaxAggregateInputType
  }

  export type HardwareItemGroupByOutputType = {
    id: string
    assetTag: string
    type: $Enums.HardwareType
    brand: string | null
    model: string | null
    serialNumber: string | null
    purchaseDate: Date | null
    purchaseCost: number | null
    vendorId: string | null
    warrantyEndDate: Date | null
    status: $Enums.HardwareStatus
    condition: $Enums.HardwareCondition
    location: string | null
    responsibleUserId: string | null
    departmentId: string | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: HardwareItemCountAggregateOutputType | null
    _avg: HardwareItemAvgAggregateOutputType | null
    _sum: HardwareItemSumAggregateOutputType | null
    _min: HardwareItemMinAggregateOutputType | null
    _max: HardwareItemMaxAggregateOutputType | null
  }

  type GetHardwareItemGroupByPayload<T extends HardwareItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HardwareItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HardwareItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HardwareItemGroupByOutputType[P]>
            : GetScalarType<T[P], HardwareItemGroupByOutputType[P]>
        }
      >
    >


  export type HardwareItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assetTag?: boolean
    type?: boolean
    brand?: boolean
    model?: boolean
    serialNumber?: boolean
    purchaseDate?: boolean
    purchaseCost?: boolean
    vendorId?: boolean
    warrantyEndDate?: boolean
    status?: boolean
    condition?: boolean
    location?: boolean
    responsibleUserId?: boolean
    departmentId?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    vendor?: boolean | HardwareItem$vendorArgs<ExtArgs>
    responsibleUser?: boolean | HardwareItem$responsibleUserArgs<ExtArgs>
    department?: boolean | HardwareItem$departmentArgs<ExtArgs>
    attachments?: boolean | HardwareItem$attachmentsArgs<ExtArgs>
    maintenances?: boolean | HardwareItem$maintenancesArgs<ExtArgs>
    allocations?: boolean | HardwareItem$allocationsArgs<ExtArgs>
    softwareInstalls?: boolean | HardwareItem$softwareInstallsArgs<ExtArgs>
    auditLogs?: boolean | HardwareItem$auditLogsArgs<ExtArgs>
    _count?: boolean | HardwareItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hardwareItem"]>


  export type HardwareItemSelectScalar = {
    id?: boolean
    assetTag?: boolean
    type?: boolean
    brand?: boolean
    model?: boolean
    serialNumber?: boolean
    purchaseDate?: boolean
    purchaseCost?: boolean
    vendorId?: boolean
    warrantyEndDate?: boolean
    status?: boolean
    condition?: boolean
    location?: boolean
    responsibleUserId?: boolean
    departmentId?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type HardwareItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vendor?: boolean | HardwareItem$vendorArgs<ExtArgs>
    responsibleUser?: boolean | HardwareItem$responsibleUserArgs<ExtArgs>
    department?: boolean | HardwareItem$departmentArgs<ExtArgs>
    attachments?: boolean | HardwareItem$attachmentsArgs<ExtArgs>
    maintenances?: boolean | HardwareItem$maintenancesArgs<ExtArgs>
    allocations?: boolean | HardwareItem$allocationsArgs<ExtArgs>
    softwareInstalls?: boolean | HardwareItem$softwareInstallsArgs<ExtArgs>
    auditLogs?: boolean | HardwareItem$auditLogsArgs<ExtArgs>
    _count?: boolean | HardwareItemCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $HardwareItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HardwareItem"
    objects: {
      vendor: Prisma.$VendorPayload<ExtArgs> | null
      responsibleUser: Prisma.$UserPayload<ExtArgs> | null
      department: Prisma.$DepartmentPayload<ExtArgs> | null
      attachments: Prisma.$AttachmentPayload<ExtArgs>[]
      maintenances: Prisma.$MaintenancePayload<ExtArgs>[]
      allocations: Prisma.$AllocationPayload<ExtArgs>[]
      softwareInstalls: Prisma.$SoftwareInstallPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      assetTag: string
      type: $Enums.HardwareType
      brand: string | null
      model: string | null
      serialNumber: string | null
      purchaseDate: Date | null
      purchaseCost: number | null
      vendorId: string | null
      warrantyEndDate: Date | null
      status: $Enums.HardwareStatus
      condition: $Enums.HardwareCondition
      location: string | null
      responsibleUserId: string | null
      departmentId: string | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["hardwareItem"]>
    composites: {}
  }

  type HardwareItemGetPayload<S extends boolean | null | undefined | HardwareItemDefaultArgs> = $Result.GetResult<Prisma.$HardwareItemPayload, S>

  type HardwareItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HardwareItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HardwareItemCountAggregateInputType | true
    }

  export interface HardwareItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HardwareItem'], meta: { name: 'HardwareItem' } }
    /**
     * Find zero or one HardwareItem that matches the filter.
     * @param {HardwareItemFindUniqueArgs} args - Arguments to find a HardwareItem
     * @example
     * // Get one HardwareItem
     * const hardwareItem = await prisma.hardwareItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HardwareItemFindUniqueArgs>(args: SelectSubset<T, HardwareItemFindUniqueArgs<ExtArgs>>): Prisma__HardwareItemClient<$Result.GetResult<Prisma.$HardwareItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one HardwareItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HardwareItemFindUniqueOrThrowArgs} args - Arguments to find a HardwareItem
     * @example
     * // Get one HardwareItem
     * const hardwareItem = await prisma.hardwareItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HardwareItemFindUniqueOrThrowArgs>(args: SelectSubset<T, HardwareItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HardwareItemClient<$Result.GetResult<Prisma.$HardwareItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first HardwareItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HardwareItemFindFirstArgs} args - Arguments to find a HardwareItem
     * @example
     * // Get one HardwareItem
     * const hardwareItem = await prisma.hardwareItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HardwareItemFindFirstArgs>(args?: SelectSubset<T, HardwareItemFindFirstArgs<ExtArgs>>): Prisma__HardwareItemClient<$Result.GetResult<Prisma.$HardwareItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first HardwareItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HardwareItemFindFirstOrThrowArgs} args - Arguments to find a HardwareItem
     * @example
     * // Get one HardwareItem
     * const hardwareItem = await prisma.hardwareItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HardwareItemFindFirstOrThrowArgs>(args?: SelectSubset<T, HardwareItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__HardwareItemClient<$Result.GetResult<Prisma.$HardwareItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more HardwareItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HardwareItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HardwareItems
     * const hardwareItems = await prisma.hardwareItem.findMany()
     * 
     * // Get first 10 HardwareItems
     * const hardwareItems = await prisma.hardwareItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hardwareItemWithIdOnly = await prisma.hardwareItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HardwareItemFindManyArgs>(args?: SelectSubset<T, HardwareItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HardwareItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a HardwareItem.
     * @param {HardwareItemCreateArgs} args - Arguments to create a HardwareItem.
     * @example
     * // Create one HardwareItem
     * const HardwareItem = await prisma.hardwareItem.create({
     *   data: {
     *     // ... data to create a HardwareItem
     *   }
     * })
     * 
     */
    create<T extends HardwareItemCreateArgs>(args: SelectSubset<T, HardwareItemCreateArgs<ExtArgs>>): Prisma__HardwareItemClient<$Result.GetResult<Prisma.$HardwareItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many HardwareItems.
     * @param {HardwareItemCreateManyArgs} args - Arguments to create many HardwareItems.
     * @example
     * // Create many HardwareItems
     * const hardwareItem = await prisma.hardwareItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HardwareItemCreateManyArgs>(args?: SelectSubset<T, HardwareItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a HardwareItem.
     * @param {HardwareItemDeleteArgs} args - Arguments to delete one HardwareItem.
     * @example
     * // Delete one HardwareItem
     * const HardwareItem = await prisma.hardwareItem.delete({
     *   where: {
     *     // ... filter to delete one HardwareItem
     *   }
     * })
     * 
     */
    delete<T extends HardwareItemDeleteArgs>(args: SelectSubset<T, HardwareItemDeleteArgs<ExtArgs>>): Prisma__HardwareItemClient<$Result.GetResult<Prisma.$HardwareItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one HardwareItem.
     * @param {HardwareItemUpdateArgs} args - Arguments to update one HardwareItem.
     * @example
     * // Update one HardwareItem
     * const hardwareItem = await prisma.hardwareItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HardwareItemUpdateArgs>(args: SelectSubset<T, HardwareItemUpdateArgs<ExtArgs>>): Prisma__HardwareItemClient<$Result.GetResult<Prisma.$HardwareItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more HardwareItems.
     * @param {HardwareItemDeleteManyArgs} args - Arguments to filter HardwareItems to delete.
     * @example
     * // Delete a few HardwareItems
     * const { count } = await prisma.hardwareItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HardwareItemDeleteManyArgs>(args?: SelectSubset<T, HardwareItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HardwareItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HardwareItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HardwareItems
     * const hardwareItem = await prisma.hardwareItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HardwareItemUpdateManyArgs>(args: SelectSubset<T, HardwareItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HardwareItem.
     * @param {HardwareItemUpsertArgs} args - Arguments to update or create a HardwareItem.
     * @example
     * // Update or create a HardwareItem
     * const hardwareItem = await prisma.hardwareItem.upsert({
     *   create: {
     *     // ... data to create a HardwareItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HardwareItem we want to update
     *   }
     * })
     */
    upsert<T extends HardwareItemUpsertArgs>(args: SelectSubset<T, HardwareItemUpsertArgs<ExtArgs>>): Prisma__HardwareItemClient<$Result.GetResult<Prisma.$HardwareItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of HardwareItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HardwareItemCountArgs} args - Arguments to filter HardwareItems to count.
     * @example
     * // Count the number of HardwareItems
     * const count = await prisma.hardwareItem.count({
     *   where: {
     *     // ... the filter for the HardwareItems we want to count
     *   }
     * })
    **/
    count<T extends HardwareItemCountArgs>(
      args?: Subset<T, HardwareItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HardwareItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HardwareItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HardwareItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HardwareItemAggregateArgs>(args: Subset<T, HardwareItemAggregateArgs>): Prisma.PrismaPromise<GetHardwareItemAggregateType<T>>

    /**
     * Group by HardwareItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HardwareItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HardwareItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HardwareItemGroupByArgs['orderBy'] }
        : { orderBy?: HardwareItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HardwareItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHardwareItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HardwareItem model
   */
  readonly fields: HardwareItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HardwareItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HardwareItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    vendor<T extends HardwareItem$vendorArgs<ExtArgs> = {}>(args?: Subset<T, HardwareItem$vendorArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    responsibleUser<T extends HardwareItem$responsibleUserArgs<ExtArgs> = {}>(args?: Subset<T, HardwareItem$responsibleUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    department<T extends HardwareItem$departmentArgs<ExtArgs> = {}>(args?: Subset<T, HardwareItem$departmentArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    attachments<T extends HardwareItem$attachmentsArgs<ExtArgs> = {}>(args?: Subset<T, HardwareItem$attachmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findMany"> | Null>
    maintenances<T extends HardwareItem$maintenancesArgs<ExtArgs> = {}>(args?: Subset<T, HardwareItem$maintenancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenancePayload<ExtArgs>, T, "findMany"> | Null>
    allocations<T extends HardwareItem$allocationsArgs<ExtArgs> = {}>(args?: Subset<T, HardwareItem$allocationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "findMany"> | Null>
    softwareInstalls<T extends HardwareItem$softwareInstallsArgs<ExtArgs> = {}>(args?: Subset<T, HardwareItem$softwareInstallsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoftwareInstallPayload<ExtArgs>, T, "findMany"> | Null>
    auditLogs<T extends HardwareItem$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, HardwareItem$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HardwareItem model
   */ 
  interface HardwareItemFieldRefs {
    readonly id: FieldRef<"HardwareItem", 'String'>
    readonly assetTag: FieldRef<"HardwareItem", 'String'>
    readonly type: FieldRef<"HardwareItem", 'HardwareType'>
    readonly brand: FieldRef<"HardwareItem", 'String'>
    readonly model: FieldRef<"HardwareItem", 'String'>
    readonly serialNumber: FieldRef<"HardwareItem", 'String'>
    readonly purchaseDate: FieldRef<"HardwareItem", 'DateTime'>
    readonly purchaseCost: FieldRef<"HardwareItem", 'Float'>
    readonly vendorId: FieldRef<"HardwareItem", 'String'>
    readonly warrantyEndDate: FieldRef<"HardwareItem", 'DateTime'>
    readonly status: FieldRef<"HardwareItem", 'HardwareStatus'>
    readonly condition: FieldRef<"HardwareItem", 'HardwareCondition'>
    readonly location: FieldRef<"HardwareItem", 'String'>
    readonly responsibleUserId: FieldRef<"HardwareItem", 'String'>
    readonly departmentId: FieldRef<"HardwareItem", 'String'>
    readonly notes: FieldRef<"HardwareItem", 'String'>
    readonly createdAt: FieldRef<"HardwareItem", 'DateTime'>
    readonly updatedAt: FieldRef<"HardwareItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * HardwareItem findUnique
   */
  export type HardwareItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareItem
     */
    select?: HardwareItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareItemInclude<ExtArgs> | null
    /**
     * Filter, which HardwareItem to fetch.
     */
    where: HardwareItemWhereUniqueInput
  }

  /**
   * HardwareItem findUniqueOrThrow
   */
  export type HardwareItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareItem
     */
    select?: HardwareItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareItemInclude<ExtArgs> | null
    /**
     * Filter, which HardwareItem to fetch.
     */
    where: HardwareItemWhereUniqueInput
  }

  /**
   * HardwareItem findFirst
   */
  export type HardwareItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareItem
     */
    select?: HardwareItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareItemInclude<ExtArgs> | null
    /**
     * Filter, which HardwareItem to fetch.
     */
    where?: HardwareItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HardwareItems to fetch.
     */
    orderBy?: HardwareItemOrderByWithRelationInput | HardwareItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HardwareItems.
     */
    cursor?: HardwareItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HardwareItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HardwareItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HardwareItems.
     */
    distinct?: HardwareItemScalarFieldEnum | HardwareItemScalarFieldEnum[]
  }

  /**
   * HardwareItem findFirstOrThrow
   */
  export type HardwareItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareItem
     */
    select?: HardwareItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareItemInclude<ExtArgs> | null
    /**
     * Filter, which HardwareItem to fetch.
     */
    where?: HardwareItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HardwareItems to fetch.
     */
    orderBy?: HardwareItemOrderByWithRelationInput | HardwareItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HardwareItems.
     */
    cursor?: HardwareItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HardwareItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HardwareItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HardwareItems.
     */
    distinct?: HardwareItemScalarFieldEnum | HardwareItemScalarFieldEnum[]
  }

  /**
   * HardwareItem findMany
   */
  export type HardwareItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareItem
     */
    select?: HardwareItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareItemInclude<ExtArgs> | null
    /**
     * Filter, which HardwareItems to fetch.
     */
    where?: HardwareItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HardwareItems to fetch.
     */
    orderBy?: HardwareItemOrderByWithRelationInput | HardwareItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HardwareItems.
     */
    cursor?: HardwareItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HardwareItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HardwareItems.
     */
    skip?: number
    distinct?: HardwareItemScalarFieldEnum | HardwareItemScalarFieldEnum[]
  }

  /**
   * HardwareItem create
   */
  export type HardwareItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareItem
     */
    select?: HardwareItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareItemInclude<ExtArgs> | null
    /**
     * The data needed to create a HardwareItem.
     */
    data: XOR<HardwareItemCreateInput, HardwareItemUncheckedCreateInput>
  }

  /**
   * HardwareItem createMany
   */
  export type HardwareItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HardwareItems.
     */
    data: HardwareItemCreateManyInput | HardwareItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HardwareItem update
   */
  export type HardwareItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareItem
     */
    select?: HardwareItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareItemInclude<ExtArgs> | null
    /**
     * The data needed to update a HardwareItem.
     */
    data: XOR<HardwareItemUpdateInput, HardwareItemUncheckedUpdateInput>
    /**
     * Choose, which HardwareItem to update.
     */
    where: HardwareItemWhereUniqueInput
  }

  /**
   * HardwareItem updateMany
   */
  export type HardwareItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HardwareItems.
     */
    data: XOR<HardwareItemUpdateManyMutationInput, HardwareItemUncheckedUpdateManyInput>
    /**
     * Filter which HardwareItems to update
     */
    where?: HardwareItemWhereInput
  }

  /**
   * HardwareItem upsert
   */
  export type HardwareItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareItem
     */
    select?: HardwareItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareItemInclude<ExtArgs> | null
    /**
     * The filter to search for the HardwareItem to update in case it exists.
     */
    where: HardwareItemWhereUniqueInput
    /**
     * In case the HardwareItem found by the `where` argument doesn't exist, create a new HardwareItem with this data.
     */
    create: XOR<HardwareItemCreateInput, HardwareItemUncheckedCreateInput>
    /**
     * In case the HardwareItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HardwareItemUpdateInput, HardwareItemUncheckedUpdateInput>
  }

  /**
   * HardwareItem delete
   */
  export type HardwareItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareItem
     */
    select?: HardwareItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareItemInclude<ExtArgs> | null
    /**
     * Filter which HardwareItem to delete.
     */
    where: HardwareItemWhereUniqueInput
  }

  /**
   * HardwareItem deleteMany
   */
  export type HardwareItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HardwareItems to delete
     */
    where?: HardwareItemWhereInput
  }

  /**
   * HardwareItem.vendor
   */
  export type HardwareItem$vendorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    where?: VendorWhereInput
  }

  /**
   * HardwareItem.responsibleUser
   */
  export type HardwareItem$responsibleUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * HardwareItem.department
   */
  export type HardwareItem$departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * HardwareItem.attachments
   */
  export type HardwareItem$attachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    where?: AttachmentWhereInput
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    cursor?: AttachmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * HardwareItem.maintenances
   */
  export type HardwareItem$maintenancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Maintenance
     */
    select?: MaintenanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceInclude<ExtArgs> | null
    where?: MaintenanceWhereInput
    orderBy?: MaintenanceOrderByWithRelationInput | MaintenanceOrderByWithRelationInput[]
    cursor?: MaintenanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MaintenanceScalarFieldEnum | MaintenanceScalarFieldEnum[]
  }

  /**
   * HardwareItem.allocations
   */
  export type HardwareItem$allocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allocation
     */
    select?: AllocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationInclude<ExtArgs> | null
    where?: AllocationWhereInput
    orderBy?: AllocationOrderByWithRelationInput | AllocationOrderByWithRelationInput[]
    cursor?: AllocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AllocationScalarFieldEnum | AllocationScalarFieldEnum[]
  }

  /**
   * HardwareItem.softwareInstalls
   */
  export type HardwareItem$softwareInstallsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareInstall
     */
    select?: SoftwareInstallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInstallInclude<ExtArgs> | null
    where?: SoftwareInstallWhereInput
    orderBy?: SoftwareInstallOrderByWithRelationInput | SoftwareInstallOrderByWithRelationInput[]
    cursor?: SoftwareInstallWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SoftwareInstallScalarFieldEnum | SoftwareInstallScalarFieldEnum[]
  }

  /**
   * HardwareItem.auditLogs
   */
  export type HardwareItem$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * HardwareItem without action
   */
  export type HardwareItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareItem
     */
    select?: HardwareItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareItemInclude<ExtArgs> | null
  }


  /**
   * Model Attachment
   */

  export type AggregateAttachment = {
    _count: AttachmentCountAggregateOutputType | null
    _min: AttachmentMinAggregateOutputType | null
    _max: AttachmentMaxAggregateOutputType | null
  }

  export type AttachmentMinAggregateOutputType = {
    id: string | null
    entityType: $Enums.EntityType | null
    entityId: string | null
    fileUrl: string | null
    fileName: string | null
    mimeType: string | null
    uploadedAt: Date | null
  }

  export type AttachmentMaxAggregateOutputType = {
    id: string | null
    entityType: $Enums.EntityType | null
    entityId: string | null
    fileUrl: string | null
    fileName: string | null
    mimeType: string | null
    uploadedAt: Date | null
  }

  export type AttachmentCountAggregateOutputType = {
    id: number
    entityType: number
    entityId: number
    fileUrl: number
    fileName: number
    mimeType: number
    uploadedAt: number
    _all: number
  }


  export type AttachmentMinAggregateInputType = {
    id?: true
    entityType?: true
    entityId?: true
    fileUrl?: true
    fileName?: true
    mimeType?: true
    uploadedAt?: true
  }

  export type AttachmentMaxAggregateInputType = {
    id?: true
    entityType?: true
    entityId?: true
    fileUrl?: true
    fileName?: true
    mimeType?: true
    uploadedAt?: true
  }

  export type AttachmentCountAggregateInputType = {
    id?: true
    entityType?: true
    entityId?: true
    fileUrl?: true
    fileName?: true
    mimeType?: true
    uploadedAt?: true
    _all?: true
  }

  export type AttachmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attachment to aggregate.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Attachments
    **/
    _count?: true | AttachmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttachmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttachmentMaxAggregateInputType
  }

  export type GetAttachmentAggregateType<T extends AttachmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAttachment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttachment[P]>
      : GetScalarType<T[P], AggregateAttachment[P]>
  }




  export type AttachmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttachmentWhereInput
    orderBy?: AttachmentOrderByWithAggregationInput | AttachmentOrderByWithAggregationInput[]
    by: AttachmentScalarFieldEnum[] | AttachmentScalarFieldEnum
    having?: AttachmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttachmentCountAggregateInputType | true
    _min?: AttachmentMinAggregateInputType
    _max?: AttachmentMaxAggregateInputType
  }

  export type AttachmentGroupByOutputType = {
    id: string
    entityType: $Enums.EntityType
    entityId: string
    fileUrl: string
    fileName: string
    mimeType: string
    uploadedAt: Date
    _count: AttachmentCountAggregateOutputType | null
    _min: AttachmentMinAggregateOutputType | null
    _max: AttachmentMaxAggregateOutputType | null
  }

  type GetAttachmentGroupByPayload<T extends AttachmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttachmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttachmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttachmentGroupByOutputType[P]>
            : GetScalarType<T[P], AttachmentGroupByOutputType[P]>
        }
      >
    >


  export type AttachmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityType?: boolean
    entityId?: boolean
    fileUrl?: boolean
    fileName?: boolean
    mimeType?: boolean
    uploadedAt?: boolean
    hardwareItem?: boolean | Attachment$hardwareItemArgs<ExtArgs>
  }, ExtArgs["result"]["attachment"]>


  export type AttachmentSelectScalar = {
    id?: boolean
    entityType?: boolean
    entityId?: boolean
    fileUrl?: boolean
    fileName?: boolean
    mimeType?: boolean
    uploadedAt?: boolean
  }

  export type AttachmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hardwareItem?: boolean | Attachment$hardwareItemArgs<ExtArgs>
  }

  export type $AttachmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Attachment"
    objects: {
      hardwareItem: Prisma.$HardwareItemPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      entityType: $Enums.EntityType
      entityId: string
      fileUrl: string
      fileName: string
      mimeType: string
      uploadedAt: Date
    }, ExtArgs["result"]["attachment"]>
    composites: {}
  }

  type AttachmentGetPayload<S extends boolean | null | undefined | AttachmentDefaultArgs> = $Result.GetResult<Prisma.$AttachmentPayload, S>

  type AttachmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AttachmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AttachmentCountAggregateInputType | true
    }

  export interface AttachmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Attachment'], meta: { name: 'Attachment' } }
    /**
     * Find zero or one Attachment that matches the filter.
     * @param {AttachmentFindUniqueArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttachmentFindUniqueArgs>(args: SelectSubset<T, AttachmentFindUniqueArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Attachment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AttachmentFindUniqueOrThrowArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttachmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AttachmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Attachment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentFindFirstArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttachmentFindFirstArgs>(args?: SelectSubset<T, AttachmentFindFirstArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Attachment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentFindFirstOrThrowArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttachmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AttachmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Attachments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attachments
     * const attachments = await prisma.attachment.findMany()
     * 
     * // Get first 10 Attachments
     * const attachments = await prisma.attachment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attachmentWithIdOnly = await prisma.attachment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AttachmentFindManyArgs>(args?: SelectSubset<T, AttachmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Attachment.
     * @param {AttachmentCreateArgs} args - Arguments to create a Attachment.
     * @example
     * // Create one Attachment
     * const Attachment = await prisma.attachment.create({
     *   data: {
     *     // ... data to create a Attachment
     *   }
     * })
     * 
     */
    create<T extends AttachmentCreateArgs>(args: SelectSubset<T, AttachmentCreateArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Attachments.
     * @param {AttachmentCreateManyArgs} args - Arguments to create many Attachments.
     * @example
     * // Create many Attachments
     * const attachment = await prisma.attachment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttachmentCreateManyArgs>(args?: SelectSubset<T, AttachmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Attachment.
     * @param {AttachmentDeleteArgs} args - Arguments to delete one Attachment.
     * @example
     * // Delete one Attachment
     * const Attachment = await prisma.attachment.delete({
     *   where: {
     *     // ... filter to delete one Attachment
     *   }
     * })
     * 
     */
    delete<T extends AttachmentDeleteArgs>(args: SelectSubset<T, AttachmentDeleteArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Attachment.
     * @param {AttachmentUpdateArgs} args - Arguments to update one Attachment.
     * @example
     * // Update one Attachment
     * const attachment = await prisma.attachment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttachmentUpdateArgs>(args: SelectSubset<T, AttachmentUpdateArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Attachments.
     * @param {AttachmentDeleteManyArgs} args - Arguments to filter Attachments to delete.
     * @example
     * // Delete a few Attachments
     * const { count } = await prisma.attachment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttachmentDeleteManyArgs>(args?: SelectSubset<T, AttachmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attachments
     * const attachment = await prisma.attachment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttachmentUpdateManyArgs>(args: SelectSubset<T, AttachmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Attachment.
     * @param {AttachmentUpsertArgs} args - Arguments to update or create a Attachment.
     * @example
     * // Update or create a Attachment
     * const attachment = await prisma.attachment.upsert({
     *   create: {
     *     // ... data to create a Attachment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attachment we want to update
     *   }
     * })
     */
    upsert<T extends AttachmentUpsertArgs>(args: SelectSubset<T, AttachmentUpsertArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Attachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentCountArgs} args - Arguments to filter Attachments to count.
     * @example
     * // Count the number of Attachments
     * const count = await prisma.attachment.count({
     *   where: {
     *     // ... the filter for the Attachments we want to count
     *   }
     * })
    **/
    count<T extends AttachmentCountArgs>(
      args?: Subset<T, AttachmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttachmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttachmentAggregateArgs>(args: Subset<T, AttachmentAggregateArgs>): Prisma.PrismaPromise<GetAttachmentAggregateType<T>>

    /**
     * Group by Attachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttachmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttachmentGroupByArgs['orderBy'] }
        : { orderBy?: AttachmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttachmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttachmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Attachment model
   */
  readonly fields: AttachmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Attachment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttachmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    hardwareItem<T extends Attachment$hardwareItemArgs<ExtArgs> = {}>(args?: Subset<T, Attachment$hardwareItemArgs<ExtArgs>>): Prisma__HardwareItemClient<$Result.GetResult<Prisma.$HardwareItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Attachment model
   */ 
  interface AttachmentFieldRefs {
    readonly id: FieldRef<"Attachment", 'String'>
    readonly entityType: FieldRef<"Attachment", 'EntityType'>
    readonly entityId: FieldRef<"Attachment", 'String'>
    readonly fileUrl: FieldRef<"Attachment", 'String'>
    readonly fileName: FieldRef<"Attachment", 'String'>
    readonly mimeType: FieldRef<"Attachment", 'String'>
    readonly uploadedAt: FieldRef<"Attachment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Attachment findUnique
   */
  export type AttachmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment findUniqueOrThrow
   */
  export type AttachmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment findFirst
   */
  export type AttachmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attachments.
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attachments.
     */
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Attachment findFirstOrThrow
   */
  export type AttachmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attachments.
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attachments.
     */
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Attachment findMany
   */
  export type AttachmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachments to fetch.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Attachments.
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Attachment create
   */
  export type AttachmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Attachment.
     */
    data: XOR<AttachmentCreateInput, AttachmentUncheckedCreateInput>
  }

  /**
   * Attachment createMany
   */
  export type AttachmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Attachments.
     */
    data: AttachmentCreateManyInput | AttachmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Attachment update
   */
  export type AttachmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Attachment.
     */
    data: XOR<AttachmentUpdateInput, AttachmentUncheckedUpdateInput>
    /**
     * Choose, which Attachment to update.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment updateMany
   */
  export type AttachmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Attachments.
     */
    data: XOR<AttachmentUpdateManyMutationInput, AttachmentUncheckedUpdateManyInput>
    /**
     * Filter which Attachments to update
     */
    where?: AttachmentWhereInput
  }

  /**
   * Attachment upsert
   */
  export type AttachmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Attachment to update in case it exists.
     */
    where: AttachmentWhereUniqueInput
    /**
     * In case the Attachment found by the `where` argument doesn't exist, create a new Attachment with this data.
     */
    create: XOR<AttachmentCreateInput, AttachmentUncheckedCreateInput>
    /**
     * In case the Attachment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttachmentUpdateInput, AttachmentUncheckedUpdateInput>
  }

  /**
   * Attachment delete
   */
  export type AttachmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter which Attachment to delete.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment deleteMany
   */
  export type AttachmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attachments to delete
     */
    where?: AttachmentWhereInput
  }

  /**
   * Attachment.hardwareItem
   */
  export type Attachment$hardwareItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareItem
     */
    select?: HardwareItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareItemInclude<ExtArgs> | null
    where?: HardwareItemWhereInput
  }

  /**
   * Attachment without action
   */
  export type AttachmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
  }


  /**
   * Model Maintenance
   */

  export type AggregateMaintenance = {
    _count: MaintenanceCountAggregateOutputType | null
    _avg: MaintenanceAvgAggregateOutputType | null
    _sum: MaintenanceSumAggregateOutputType | null
    _min: MaintenanceMinAggregateOutputType | null
    _max: MaintenanceMaxAggregateOutputType | null
  }

  export type MaintenanceAvgAggregateOutputType = {
    cost: number | null
  }

  export type MaintenanceSumAggregateOutputType = {
    cost: number | null
  }

  export type MaintenanceMinAggregateOutputType = {
    id: string | null
    hardwareItemId: string | null
    startDate: Date | null
    endDate: Date | null
    provider: string | null
    description: string | null
    cost: number | null
    status: $Enums.MaintenanceStatus | null
    notes: string | null
  }

  export type MaintenanceMaxAggregateOutputType = {
    id: string | null
    hardwareItemId: string | null
    startDate: Date | null
    endDate: Date | null
    provider: string | null
    description: string | null
    cost: number | null
    status: $Enums.MaintenanceStatus | null
    notes: string | null
  }

  export type MaintenanceCountAggregateOutputType = {
    id: number
    hardwareItemId: number
    startDate: number
    endDate: number
    provider: number
    description: number
    cost: number
    status: number
    notes: number
    _all: number
  }


  export type MaintenanceAvgAggregateInputType = {
    cost?: true
  }

  export type MaintenanceSumAggregateInputType = {
    cost?: true
  }

  export type MaintenanceMinAggregateInputType = {
    id?: true
    hardwareItemId?: true
    startDate?: true
    endDate?: true
    provider?: true
    description?: true
    cost?: true
    status?: true
    notes?: true
  }

  export type MaintenanceMaxAggregateInputType = {
    id?: true
    hardwareItemId?: true
    startDate?: true
    endDate?: true
    provider?: true
    description?: true
    cost?: true
    status?: true
    notes?: true
  }

  export type MaintenanceCountAggregateInputType = {
    id?: true
    hardwareItemId?: true
    startDate?: true
    endDate?: true
    provider?: true
    description?: true
    cost?: true
    status?: true
    notes?: true
    _all?: true
  }

  export type MaintenanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Maintenance to aggregate.
     */
    where?: MaintenanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Maintenances to fetch.
     */
    orderBy?: MaintenanceOrderByWithRelationInput | MaintenanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MaintenanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Maintenances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Maintenances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Maintenances
    **/
    _count?: true | MaintenanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MaintenanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MaintenanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MaintenanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MaintenanceMaxAggregateInputType
  }

  export type GetMaintenanceAggregateType<T extends MaintenanceAggregateArgs> = {
        [P in keyof T & keyof AggregateMaintenance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMaintenance[P]>
      : GetScalarType<T[P], AggregateMaintenance[P]>
  }




  export type MaintenanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaintenanceWhereInput
    orderBy?: MaintenanceOrderByWithAggregationInput | MaintenanceOrderByWithAggregationInput[]
    by: MaintenanceScalarFieldEnum[] | MaintenanceScalarFieldEnum
    having?: MaintenanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MaintenanceCountAggregateInputType | true
    _avg?: MaintenanceAvgAggregateInputType
    _sum?: MaintenanceSumAggregateInputType
    _min?: MaintenanceMinAggregateInputType
    _max?: MaintenanceMaxAggregateInputType
  }

  export type MaintenanceGroupByOutputType = {
    id: string
    hardwareItemId: string
    startDate: Date
    endDate: Date | null
    provider: string
    description: string
    cost: number | null
    status: $Enums.MaintenanceStatus
    notes: string | null
    _count: MaintenanceCountAggregateOutputType | null
    _avg: MaintenanceAvgAggregateOutputType | null
    _sum: MaintenanceSumAggregateOutputType | null
    _min: MaintenanceMinAggregateOutputType | null
    _max: MaintenanceMaxAggregateOutputType | null
  }

  type GetMaintenanceGroupByPayload<T extends MaintenanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MaintenanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MaintenanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MaintenanceGroupByOutputType[P]>
            : GetScalarType<T[P], MaintenanceGroupByOutputType[P]>
        }
      >
    >


  export type MaintenanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hardwareItemId?: boolean
    startDate?: boolean
    endDate?: boolean
    provider?: boolean
    description?: boolean
    cost?: boolean
    status?: boolean
    notes?: boolean
    hardwareItem?: boolean | HardwareItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["maintenance"]>


  export type MaintenanceSelectScalar = {
    id?: boolean
    hardwareItemId?: boolean
    startDate?: boolean
    endDate?: boolean
    provider?: boolean
    description?: boolean
    cost?: boolean
    status?: boolean
    notes?: boolean
  }

  export type MaintenanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hardwareItem?: boolean | HardwareItemDefaultArgs<ExtArgs>
  }

  export type $MaintenancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Maintenance"
    objects: {
      hardwareItem: Prisma.$HardwareItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      hardwareItemId: string
      startDate: Date
      endDate: Date | null
      provider: string
      description: string
      cost: number | null
      status: $Enums.MaintenanceStatus
      notes: string | null
    }, ExtArgs["result"]["maintenance"]>
    composites: {}
  }

  type MaintenanceGetPayload<S extends boolean | null | undefined | MaintenanceDefaultArgs> = $Result.GetResult<Prisma.$MaintenancePayload, S>

  type MaintenanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MaintenanceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MaintenanceCountAggregateInputType | true
    }

  export interface MaintenanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Maintenance'], meta: { name: 'Maintenance' } }
    /**
     * Find zero or one Maintenance that matches the filter.
     * @param {MaintenanceFindUniqueArgs} args - Arguments to find a Maintenance
     * @example
     * // Get one Maintenance
     * const maintenance = await prisma.maintenance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MaintenanceFindUniqueArgs>(args: SelectSubset<T, MaintenanceFindUniqueArgs<ExtArgs>>): Prisma__MaintenanceClient<$Result.GetResult<Prisma.$MaintenancePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Maintenance that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MaintenanceFindUniqueOrThrowArgs} args - Arguments to find a Maintenance
     * @example
     * // Get one Maintenance
     * const maintenance = await prisma.maintenance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MaintenanceFindUniqueOrThrowArgs>(args: SelectSubset<T, MaintenanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MaintenanceClient<$Result.GetResult<Prisma.$MaintenancePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Maintenance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceFindFirstArgs} args - Arguments to find a Maintenance
     * @example
     * // Get one Maintenance
     * const maintenance = await prisma.maintenance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MaintenanceFindFirstArgs>(args?: SelectSubset<T, MaintenanceFindFirstArgs<ExtArgs>>): Prisma__MaintenanceClient<$Result.GetResult<Prisma.$MaintenancePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Maintenance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceFindFirstOrThrowArgs} args - Arguments to find a Maintenance
     * @example
     * // Get one Maintenance
     * const maintenance = await prisma.maintenance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MaintenanceFindFirstOrThrowArgs>(args?: SelectSubset<T, MaintenanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__MaintenanceClient<$Result.GetResult<Prisma.$MaintenancePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Maintenances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Maintenances
     * const maintenances = await prisma.maintenance.findMany()
     * 
     * // Get first 10 Maintenances
     * const maintenances = await prisma.maintenance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const maintenanceWithIdOnly = await prisma.maintenance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MaintenanceFindManyArgs>(args?: SelectSubset<T, MaintenanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenancePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Maintenance.
     * @param {MaintenanceCreateArgs} args - Arguments to create a Maintenance.
     * @example
     * // Create one Maintenance
     * const Maintenance = await prisma.maintenance.create({
     *   data: {
     *     // ... data to create a Maintenance
     *   }
     * })
     * 
     */
    create<T extends MaintenanceCreateArgs>(args: SelectSubset<T, MaintenanceCreateArgs<ExtArgs>>): Prisma__MaintenanceClient<$Result.GetResult<Prisma.$MaintenancePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Maintenances.
     * @param {MaintenanceCreateManyArgs} args - Arguments to create many Maintenances.
     * @example
     * // Create many Maintenances
     * const maintenance = await prisma.maintenance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MaintenanceCreateManyArgs>(args?: SelectSubset<T, MaintenanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Maintenance.
     * @param {MaintenanceDeleteArgs} args - Arguments to delete one Maintenance.
     * @example
     * // Delete one Maintenance
     * const Maintenance = await prisma.maintenance.delete({
     *   where: {
     *     // ... filter to delete one Maintenance
     *   }
     * })
     * 
     */
    delete<T extends MaintenanceDeleteArgs>(args: SelectSubset<T, MaintenanceDeleteArgs<ExtArgs>>): Prisma__MaintenanceClient<$Result.GetResult<Prisma.$MaintenancePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Maintenance.
     * @param {MaintenanceUpdateArgs} args - Arguments to update one Maintenance.
     * @example
     * // Update one Maintenance
     * const maintenance = await prisma.maintenance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MaintenanceUpdateArgs>(args: SelectSubset<T, MaintenanceUpdateArgs<ExtArgs>>): Prisma__MaintenanceClient<$Result.GetResult<Prisma.$MaintenancePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Maintenances.
     * @param {MaintenanceDeleteManyArgs} args - Arguments to filter Maintenances to delete.
     * @example
     * // Delete a few Maintenances
     * const { count } = await prisma.maintenance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MaintenanceDeleteManyArgs>(args?: SelectSubset<T, MaintenanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Maintenances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Maintenances
     * const maintenance = await prisma.maintenance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MaintenanceUpdateManyArgs>(args: SelectSubset<T, MaintenanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Maintenance.
     * @param {MaintenanceUpsertArgs} args - Arguments to update or create a Maintenance.
     * @example
     * // Update or create a Maintenance
     * const maintenance = await prisma.maintenance.upsert({
     *   create: {
     *     // ... data to create a Maintenance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Maintenance we want to update
     *   }
     * })
     */
    upsert<T extends MaintenanceUpsertArgs>(args: SelectSubset<T, MaintenanceUpsertArgs<ExtArgs>>): Prisma__MaintenanceClient<$Result.GetResult<Prisma.$MaintenancePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Maintenances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceCountArgs} args - Arguments to filter Maintenances to count.
     * @example
     * // Count the number of Maintenances
     * const count = await prisma.maintenance.count({
     *   where: {
     *     // ... the filter for the Maintenances we want to count
     *   }
     * })
    **/
    count<T extends MaintenanceCountArgs>(
      args?: Subset<T, MaintenanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MaintenanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Maintenance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MaintenanceAggregateArgs>(args: Subset<T, MaintenanceAggregateArgs>): Prisma.PrismaPromise<GetMaintenanceAggregateType<T>>

    /**
     * Group by Maintenance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MaintenanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MaintenanceGroupByArgs['orderBy'] }
        : { orderBy?: MaintenanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MaintenanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMaintenanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Maintenance model
   */
  readonly fields: MaintenanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Maintenance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MaintenanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    hardwareItem<T extends HardwareItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HardwareItemDefaultArgs<ExtArgs>>): Prisma__HardwareItemClient<$Result.GetResult<Prisma.$HardwareItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Maintenance model
   */ 
  interface MaintenanceFieldRefs {
    readonly id: FieldRef<"Maintenance", 'String'>
    readonly hardwareItemId: FieldRef<"Maintenance", 'String'>
    readonly startDate: FieldRef<"Maintenance", 'DateTime'>
    readonly endDate: FieldRef<"Maintenance", 'DateTime'>
    readonly provider: FieldRef<"Maintenance", 'String'>
    readonly description: FieldRef<"Maintenance", 'String'>
    readonly cost: FieldRef<"Maintenance", 'Float'>
    readonly status: FieldRef<"Maintenance", 'MaintenanceStatus'>
    readonly notes: FieldRef<"Maintenance", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Maintenance findUnique
   */
  export type MaintenanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Maintenance
     */
    select?: MaintenanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceInclude<ExtArgs> | null
    /**
     * Filter, which Maintenance to fetch.
     */
    where: MaintenanceWhereUniqueInput
  }

  /**
   * Maintenance findUniqueOrThrow
   */
  export type MaintenanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Maintenance
     */
    select?: MaintenanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceInclude<ExtArgs> | null
    /**
     * Filter, which Maintenance to fetch.
     */
    where: MaintenanceWhereUniqueInput
  }

  /**
   * Maintenance findFirst
   */
  export type MaintenanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Maintenance
     */
    select?: MaintenanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceInclude<ExtArgs> | null
    /**
     * Filter, which Maintenance to fetch.
     */
    where?: MaintenanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Maintenances to fetch.
     */
    orderBy?: MaintenanceOrderByWithRelationInput | MaintenanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Maintenances.
     */
    cursor?: MaintenanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Maintenances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Maintenances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Maintenances.
     */
    distinct?: MaintenanceScalarFieldEnum | MaintenanceScalarFieldEnum[]
  }

  /**
   * Maintenance findFirstOrThrow
   */
  export type MaintenanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Maintenance
     */
    select?: MaintenanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceInclude<ExtArgs> | null
    /**
     * Filter, which Maintenance to fetch.
     */
    where?: MaintenanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Maintenances to fetch.
     */
    orderBy?: MaintenanceOrderByWithRelationInput | MaintenanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Maintenances.
     */
    cursor?: MaintenanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Maintenances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Maintenances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Maintenances.
     */
    distinct?: MaintenanceScalarFieldEnum | MaintenanceScalarFieldEnum[]
  }

  /**
   * Maintenance findMany
   */
  export type MaintenanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Maintenance
     */
    select?: MaintenanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceInclude<ExtArgs> | null
    /**
     * Filter, which Maintenances to fetch.
     */
    where?: MaintenanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Maintenances to fetch.
     */
    orderBy?: MaintenanceOrderByWithRelationInput | MaintenanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Maintenances.
     */
    cursor?: MaintenanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Maintenances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Maintenances.
     */
    skip?: number
    distinct?: MaintenanceScalarFieldEnum | MaintenanceScalarFieldEnum[]
  }

  /**
   * Maintenance create
   */
  export type MaintenanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Maintenance
     */
    select?: MaintenanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceInclude<ExtArgs> | null
    /**
     * The data needed to create a Maintenance.
     */
    data: XOR<MaintenanceCreateInput, MaintenanceUncheckedCreateInput>
  }

  /**
   * Maintenance createMany
   */
  export type MaintenanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Maintenances.
     */
    data: MaintenanceCreateManyInput | MaintenanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Maintenance update
   */
  export type MaintenanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Maintenance
     */
    select?: MaintenanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceInclude<ExtArgs> | null
    /**
     * The data needed to update a Maintenance.
     */
    data: XOR<MaintenanceUpdateInput, MaintenanceUncheckedUpdateInput>
    /**
     * Choose, which Maintenance to update.
     */
    where: MaintenanceWhereUniqueInput
  }

  /**
   * Maintenance updateMany
   */
  export type MaintenanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Maintenances.
     */
    data: XOR<MaintenanceUpdateManyMutationInput, MaintenanceUncheckedUpdateManyInput>
    /**
     * Filter which Maintenances to update
     */
    where?: MaintenanceWhereInput
  }

  /**
   * Maintenance upsert
   */
  export type MaintenanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Maintenance
     */
    select?: MaintenanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceInclude<ExtArgs> | null
    /**
     * The filter to search for the Maintenance to update in case it exists.
     */
    where: MaintenanceWhereUniqueInput
    /**
     * In case the Maintenance found by the `where` argument doesn't exist, create a new Maintenance with this data.
     */
    create: XOR<MaintenanceCreateInput, MaintenanceUncheckedCreateInput>
    /**
     * In case the Maintenance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MaintenanceUpdateInput, MaintenanceUncheckedUpdateInput>
  }

  /**
   * Maintenance delete
   */
  export type MaintenanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Maintenance
     */
    select?: MaintenanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceInclude<ExtArgs> | null
    /**
     * Filter which Maintenance to delete.
     */
    where: MaintenanceWhereUniqueInput
  }

  /**
   * Maintenance deleteMany
   */
  export type MaintenanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Maintenances to delete
     */
    where?: MaintenanceWhereInput
  }

  /**
   * Maintenance without action
   */
  export type MaintenanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Maintenance
     */
    select?: MaintenanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceInclude<ExtArgs> | null
  }


  /**
   * Model Allocation
   */

  export type AggregateAllocation = {
    _count: AllocationCountAggregateOutputType | null
    _min: AllocationMinAggregateOutputType | null
    _max: AllocationMaxAggregateOutputType | null
  }

  export type AllocationMinAggregateOutputType = {
    id: string | null
    hardwareItemId: string | null
    assignedToUserId: string | null
    assignedToDepartmentId: string | null
    checkoutDate: Date | null
    expectedReturnDate: Date | null
    returnDate: Date | null
    notes: string | null
  }

  export type AllocationMaxAggregateOutputType = {
    id: string | null
    hardwareItemId: string | null
    assignedToUserId: string | null
    assignedToDepartmentId: string | null
    checkoutDate: Date | null
    expectedReturnDate: Date | null
    returnDate: Date | null
    notes: string | null
  }

  export type AllocationCountAggregateOutputType = {
    id: number
    hardwareItemId: number
    assignedToUserId: number
    assignedToDepartmentId: number
    checkoutDate: number
    expectedReturnDate: number
    returnDate: number
    notes: number
    _all: number
  }


  export type AllocationMinAggregateInputType = {
    id?: true
    hardwareItemId?: true
    assignedToUserId?: true
    assignedToDepartmentId?: true
    checkoutDate?: true
    expectedReturnDate?: true
    returnDate?: true
    notes?: true
  }

  export type AllocationMaxAggregateInputType = {
    id?: true
    hardwareItemId?: true
    assignedToUserId?: true
    assignedToDepartmentId?: true
    checkoutDate?: true
    expectedReturnDate?: true
    returnDate?: true
    notes?: true
  }

  export type AllocationCountAggregateInputType = {
    id?: true
    hardwareItemId?: true
    assignedToUserId?: true
    assignedToDepartmentId?: true
    checkoutDate?: true
    expectedReturnDate?: true
    returnDate?: true
    notes?: true
    _all?: true
  }

  export type AllocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Allocation to aggregate.
     */
    where?: AllocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Allocations to fetch.
     */
    orderBy?: AllocationOrderByWithRelationInput | AllocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AllocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Allocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Allocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Allocations
    **/
    _count?: true | AllocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AllocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AllocationMaxAggregateInputType
  }

  export type GetAllocationAggregateType<T extends AllocationAggregateArgs> = {
        [P in keyof T & keyof AggregateAllocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAllocation[P]>
      : GetScalarType<T[P], AggregateAllocation[P]>
  }




  export type AllocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AllocationWhereInput
    orderBy?: AllocationOrderByWithAggregationInput | AllocationOrderByWithAggregationInput[]
    by: AllocationScalarFieldEnum[] | AllocationScalarFieldEnum
    having?: AllocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AllocationCountAggregateInputType | true
    _min?: AllocationMinAggregateInputType
    _max?: AllocationMaxAggregateInputType
  }

  export type AllocationGroupByOutputType = {
    id: string
    hardwareItemId: string
    assignedToUserId: string | null
    assignedToDepartmentId: string | null
    checkoutDate: Date
    expectedReturnDate: Date | null
    returnDate: Date | null
    notes: string | null
    _count: AllocationCountAggregateOutputType | null
    _min: AllocationMinAggregateOutputType | null
    _max: AllocationMaxAggregateOutputType | null
  }

  type GetAllocationGroupByPayload<T extends AllocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AllocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AllocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AllocationGroupByOutputType[P]>
            : GetScalarType<T[P], AllocationGroupByOutputType[P]>
        }
      >
    >


  export type AllocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hardwareItemId?: boolean
    assignedToUserId?: boolean
    assignedToDepartmentId?: boolean
    checkoutDate?: boolean
    expectedReturnDate?: boolean
    returnDate?: boolean
    notes?: boolean
    hardwareItem?: boolean | HardwareItemDefaultArgs<ExtArgs>
    assignedToUser?: boolean | Allocation$assignedToUserArgs<ExtArgs>
    assignedToDepartment?: boolean | Allocation$assignedToDepartmentArgs<ExtArgs>
  }, ExtArgs["result"]["allocation"]>


  export type AllocationSelectScalar = {
    id?: boolean
    hardwareItemId?: boolean
    assignedToUserId?: boolean
    assignedToDepartmentId?: boolean
    checkoutDate?: boolean
    expectedReturnDate?: boolean
    returnDate?: boolean
    notes?: boolean
  }

  export type AllocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hardwareItem?: boolean | HardwareItemDefaultArgs<ExtArgs>
    assignedToUser?: boolean | Allocation$assignedToUserArgs<ExtArgs>
    assignedToDepartment?: boolean | Allocation$assignedToDepartmentArgs<ExtArgs>
  }

  export type $AllocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Allocation"
    objects: {
      hardwareItem: Prisma.$HardwareItemPayload<ExtArgs>
      assignedToUser: Prisma.$UserPayload<ExtArgs> | null
      assignedToDepartment: Prisma.$DepartmentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      hardwareItemId: string
      assignedToUserId: string | null
      assignedToDepartmentId: string | null
      checkoutDate: Date
      expectedReturnDate: Date | null
      returnDate: Date | null
      notes: string | null
    }, ExtArgs["result"]["allocation"]>
    composites: {}
  }

  type AllocationGetPayload<S extends boolean | null | undefined | AllocationDefaultArgs> = $Result.GetResult<Prisma.$AllocationPayload, S>

  type AllocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AllocationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AllocationCountAggregateInputType | true
    }

  export interface AllocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Allocation'], meta: { name: 'Allocation' } }
    /**
     * Find zero or one Allocation that matches the filter.
     * @param {AllocationFindUniqueArgs} args - Arguments to find a Allocation
     * @example
     * // Get one Allocation
     * const allocation = await prisma.allocation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AllocationFindUniqueArgs>(args: SelectSubset<T, AllocationFindUniqueArgs<ExtArgs>>): Prisma__AllocationClient<$Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Allocation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AllocationFindUniqueOrThrowArgs} args - Arguments to find a Allocation
     * @example
     * // Get one Allocation
     * const allocation = await prisma.allocation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AllocationFindUniqueOrThrowArgs>(args: SelectSubset<T, AllocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AllocationClient<$Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Allocation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocationFindFirstArgs} args - Arguments to find a Allocation
     * @example
     * // Get one Allocation
     * const allocation = await prisma.allocation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AllocationFindFirstArgs>(args?: SelectSubset<T, AllocationFindFirstArgs<ExtArgs>>): Prisma__AllocationClient<$Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Allocation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocationFindFirstOrThrowArgs} args - Arguments to find a Allocation
     * @example
     * // Get one Allocation
     * const allocation = await prisma.allocation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AllocationFindFirstOrThrowArgs>(args?: SelectSubset<T, AllocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__AllocationClient<$Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Allocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Allocations
     * const allocations = await prisma.allocation.findMany()
     * 
     * // Get first 10 Allocations
     * const allocations = await prisma.allocation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const allocationWithIdOnly = await prisma.allocation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AllocationFindManyArgs>(args?: SelectSubset<T, AllocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Allocation.
     * @param {AllocationCreateArgs} args - Arguments to create a Allocation.
     * @example
     * // Create one Allocation
     * const Allocation = await prisma.allocation.create({
     *   data: {
     *     // ... data to create a Allocation
     *   }
     * })
     * 
     */
    create<T extends AllocationCreateArgs>(args: SelectSubset<T, AllocationCreateArgs<ExtArgs>>): Prisma__AllocationClient<$Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Allocations.
     * @param {AllocationCreateManyArgs} args - Arguments to create many Allocations.
     * @example
     * // Create many Allocations
     * const allocation = await prisma.allocation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AllocationCreateManyArgs>(args?: SelectSubset<T, AllocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Allocation.
     * @param {AllocationDeleteArgs} args - Arguments to delete one Allocation.
     * @example
     * // Delete one Allocation
     * const Allocation = await prisma.allocation.delete({
     *   where: {
     *     // ... filter to delete one Allocation
     *   }
     * })
     * 
     */
    delete<T extends AllocationDeleteArgs>(args: SelectSubset<T, AllocationDeleteArgs<ExtArgs>>): Prisma__AllocationClient<$Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Allocation.
     * @param {AllocationUpdateArgs} args - Arguments to update one Allocation.
     * @example
     * // Update one Allocation
     * const allocation = await prisma.allocation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AllocationUpdateArgs>(args: SelectSubset<T, AllocationUpdateArgs<ExtArgs>>): Prisma__AllocationClient<$Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Allocations.
     * @param {AllocationDeleteManyArgs} args - Arguments to filter Allocations to delete.
     * @example
     * // Delete a few Allocations
     * const { count } = await prisma.allocation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AllocationDeleteManyArgs>(args?: SelectSubset<T, AllocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Allocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Allocations
     * const allocation = await prisma.allocation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AllocationUpdateManyArgs>(args: SelectSubset<T, AllocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Allocation.
     * @param {AllocationUpsertArgs} args - Arguments to update or create a Allocation.
     * @example
     * // Update or create a Allocation
     * const allocation = await prisma.allocation.upsert({
     *   create: {
     *     // ... data to create a Allocation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Allocation we want to update
     *   }
     * })
     */
    upsert<T extends AllocationUpsertArgs>(args: SelectSubset<T, AllocationUpsertArgs<ExtArgs>>): Prisma__AllocationClient<$Result.GetResult<Prisma.$AllocationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Allocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocationCountArgs} args - Arguments to filter Allocations to count.
     * @example
     * // Count the number of Allocations
     * const count = await prisma.allocation.count({
     *   where: {
     *     // ... the filter for the Allocations we want to count
     *   }
     * })
    **/
    count<T extends AllocationCountArgs>(
      args?: Subset<T, AllocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AllocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Allocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AllocationAggregateArgs>(args: Subset<T, AllocationAggregateArgs>): Prisma.PrismaPromise<GetAllocationAggregateType<T>>

    /**
     * Group by Allocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AllocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AllocationGroupByArgs['orderBy'] }
        : { orderBy?: AllocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AllocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAllocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Allocation model
   */
  readonly fields: AllocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Allocation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AllocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    hardwareItem<T extends HardwareItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HardwareItemDefaultArgs<ExtArgs>>): Prisma__HardwareItemClient<$Result.GetResult<Prisma.$HardwareItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    assignedToUser<T extends Allocation$assignedToUserArgs<ExtArgs> = {}>(args?: Subset<T, Allocation$assignedToUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    assignedToDepartment<T extends Allocation$assignedToDepartmentArgs<ExtArgs> = {}>(args?: Subset<T, Allocation$assignedToDepartmentArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Allocation model
   */ 
  interface AllocationFieldRefs {
    readonly id: FieldRef<"Allocation", 'String'>
    readonly hardwareItemId: FieldRef<"Allocation", 'String'>
    readonly assignedToUserId: FieldRef<"Allocation", 'String'>
    readonly assignedToDepartmentId: FieldRef<"Allocation", 'String'>
    readonly checkoutDate: FieldRef<"Allocation", 'DateTime'>
    readonly expectedReturnDate: FieldRef<"Allocation", 'DateTime'>
    readonly returnDate: FieldRef<"Allocation", 'DateTime'>
    readonly notes: FieldRef<"Allocation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Allocation findUnique
   */
  export type AllocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allocation
     */
    select?: AllocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationInclude<ExtArgs> | null
    /**
     * Filter, which Allocation to fetch.
     */
    where: AllocationWhereUniqueInput
  }

  /**
   * Allocation findUniqueOrThrow
   */
  export type AllocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allocation
     */
    select?: AllocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationInclude<ExtArgs> | null
    /**
     * Filter, which Allocation to fetch.
     */
    where: AllocationWhereUniqueInput
  }

  /**
   * Allocation findFirst
   */
  export type AllocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allocation
     */
    select?: AllocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationInclude<ExtArgs> | null
    /**
     * Filter, which Allocation to fetch.
     */
    where?: AllocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Allocations to fetch.
     */
    orderBy?: AllocationOrderByWithRelationInput | AllocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Allocations.
     */
    cursor?: AllocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Allocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Allocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Allocations.
     */
    distinct?: AllocationScalarFieldEnum | AllocationScalarFieldEnum[]
  }

  /**
   * Allocation findFirstOrThrow
   */
  export type AllocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allocation
     */
    select?: AllocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationInclude<ExtArgs> | null
    /**
     * Filter, which Allocation to fetch.
     */
    where?: AllocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Allocations to fetch.
     */
    orderBy?: AllocationOrderByWithRelationInput | AllocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Allocations.
     */
    cursor?: AllocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Allocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Allocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Allocations.
     */
    distinct?: AllocationScalarFieldEnum | AllocationScalarFieldEnum[]
  }

  /**
   * Allocation findMany
   */
  export type AllocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allocation
     */
    select?: AllocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationInclude<ExtArgs> | null
    /**
     * Filter, which Allocations to fetch.
     */
    where?: AllocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Allocations to fetch.
     */
    orderBy?: AllocationOrderByWithRelationInput | AllocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Allocations.
     */
    cursor?: AllocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Allocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Allocations.
     */
    skip?: number
    distinct?: AllocationScalarFieldEnum | AllocationScalarFieldEnum[]
  }

  /**
   * Allocation create
   */
  export type AllocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allocation
     */
    select?: AllocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationInclude<ExtArgs> | null
    /**
     * The data needed to create a Allocation.
     */
    data: XOR<AllocationCreateInput, AllocationUncheckedCreateInput>
  }

  /**
   * Allocation createMany
   */
  export type AllocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Allocations.
     */
    data: AllocationCreateManyInput | AllocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Allocation update
   */
  export type AllocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allocation
     */
    select?: AllocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationInclude<ExtArgs> | null
    /**
     * The data needed to update a Allocation.
     */
    data: XOR<AllocationUpdateInput, AllocationUncheckedUpdateInput>
    /**
     * Choose, which Allocation to update.
     */
    where: AllocationWhereUniqueInput
  }

  /**
   * Allocation updateMany
   */
  export type AllocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Allocations.
     */
    data: XOR<AllocationUpdateManyMutationInput, AllocationUncheckedUpdateManyInput>
    /**
     * Filter which Allocations to update
     */
    where?: AllocationWhereInput
  }

  /**
   * Allocation upsert
   */
  export type AllocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allocation
     */
    select?: AllocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationInclude<ExtArgs> | null
    /**
     * The filter to search for the Allocation to update in case it exists.
     */
    where: AllocationWhereUniqueInput
    /**
     * In case the Allocation found by the `where` argument doesn't exist, create a new Allocation with this data.
     */
    create: XOR<AllocationCreateInput, AllocationUncheckedCreateInput>
    /**
     * In case the Allocation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AllocationUpdateInput, AllocationUncheckedUpdateInput>
  }

  /**
   * Allocation delete
   */
  export type AllocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allocation
     */
    select?: AllocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationInclude<ExtArgs> | null
    /**
     * Filter which Allocation to delete.
     */
    where: AllocationWhereUniqueInput
  }

  /**
   * Allocation deleteMany
   */
  export type AllocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Allocations to delete
     */
    where?: AllocationWhereInput
  }

  /**
   * Allocation.assignedToUser
   */
  export type Allocation$assignedToUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Allocation.assignedToDepartment
   */
  export type Allocation$assignedToDepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * Allocation without action
   */
  export type AllocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allocation
     */
    select?: AllocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllocationInclude<ExtArgs> | null
  }


  /**
   * Model SoftwareInstall
   */

  export type AggregateSoftwareInstall = {
    _count: SoftwareInstallCountAggregateOutputType | null
    _min: SoftwareInstallMinAggregateOutputType | null
    _max: SoftwareInstallMaxAggregateOutputType | null
  }

  export type SoftwareInstallMinAggregateOutputType = {
    id: string | null
    hardwareItemId: string | null
    softwareId: string | null
    licenseId: string | null
    installedAt: Date | null
    uninstalledAt: Date | null
  }

  export type SoftwareInstallMaxAggregateOutputType = {
    id: string | null
    hardwareItemId: string | null
    softwareId: string | null
    licenseId: string | null
    installedAt: Date | null
    uninstalledAt: Date | null
  }

  export type SoftwareInstallCountAggregateOutputType = {
    id: number
    hardwareItemId: number
    softwareId: number
    licenseId: number
    installedAt: number
    uninstalledAt: number
    _all: number
  }


  export type SoftwareInstallMinAggregateInputType = {
    id?: true
    hardwareItemId?: true
    softwareId?: true
    licenseId?: true
    installedAt?: true
    uninstalledAt?: true
  }

  export type SoftwareInstallMaxAggregateInputType = {
    id?: true
    hardwareItemId?: true
    softwareId?: true
    licenseId?: true
    installedAt?: true
    uninstalledAt?: true
  }

  export type SoftwareInstallCountAggregateInputType = {
    id?: true
    hardwareItemId?: true
    softwareId?: true
    licenseId?: true
    installedAt?: true
    uninstalledAt?: true
    _all?: true
  }

  export type SoftwareInstallAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SoftwareInstall to aggregate.
     */
    where?: SoftwareInstallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoftwareInstalls to fetch.
     */
    orderBy?: SoftwareInstallOrderByWithRelationInput | SoftwareInstallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SoftwareInstallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoftwareInstalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoftwareInstalls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SoftwareInstalls
    **/
    _count?: true | SoftwareInstallCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SoftwareInstallMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SoftwareInstallMaxAggregateInputType
  }

  export type GetSoftwareInstallAggregateType<T extends SoftwareInstallAggregateArgs> = {
        [P in keyof T & keyof AggregateSoftwareInstall]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSoftwareInstall[P]>
      : GetScalarType<T[P], AggregateSoftwareInstall[P]>
  }




  export type SoftwareInstallGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoftwareInstallWhereInput
    orderBy?: SoftwareInstallOrderByWithAggregationInput | SoftwareInstallOrderByWithAggregationInput[]
    by: SoftwareInstallScalarFieldEnum[] | SoftwareInstallScalarFieldEnum
    having?: SoftwareInstallScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SoftwareInstallCountAggregateInputType | true
    _min?: SoftwareInstallMinAggregateInputType
    _max?: SoftwareInstallMaxAggregateInputType
  }

  export type SoftwareInstallGroupByOutputType = {
    id: string
    hardwareItemId: string
    softwareId: string
    licenseId: string | null
    installedAt: Date
    uninstalledAt: Date | null
    _count: SoftwareInstallCountAggregateOutputType | null
    _min: SoftwareInstallMinAggregateOutputType | null
    _max: SoftwareInstallMaxAggregateOutputType | null
  }

  type GetSoftwareInstallGroupByPayload<T extends SoftwareInstallGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SoftwareInstallGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SoftwareInstallGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SoftwareInstallGroupByOutputType[P]>
            : GetScalarType<T[P], SoftwareInstallGroupByOutputType[P]>
        }
      >
    >


  export type SoftwareInstallSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hardwareItemId?: boolean
    softwareId?: boolean
    licenseId?: boolean
    installedAt?: boolean
    uninstalledAt?: boolean
    hardwareItem?: boolean | HardwareItemDefaultArgs<ExtArgs>
    software?: boolean | SoftwareDefaultArgs<ExtArgs>
    license?: boolean | SoftwareInstall$licenseArgs<ExtArgs>
  }, ExtArgs["result"]["softwareInstall"]>


  export type SoftwareInstallSelectScalar = {
    id?: boolean
    hardwareItemId?: boolean
    softwareId?: boolean
    licenseId?: boolean
    installedAt?: boolean
    uninstalledAt?: boolean
  }

  export type SoftwareInstallInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hardwareItem?: boolean | HardwareItemDefaultArgs<ExtArgs>
    software?: boolean | SoftwareDefaultArgs<ExtArgs>
    license?: boolean | SoftwareInstall$licenseArgs<ExtArgs>
  }

  export type $SoftwareInstallPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SoftwareInstall"
    objects: {
      hardwareItem: Prisma.$HardwareItemPayload<ExtArgs>
      software: Prisma.$SoftwarePayload<ExtArgs>
      license: Prisma.$LicensePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      hardwareItemId: string
      softwareId: string
      licenseId: string | null
      installedAt: Date
      uninstalledAt: Date | null
    }, ExtArgs["result"]["softwareInstall"]>
    composites: {}
  }

  type SoftwareInstallGetPayload<S extends boolean | null | undefined | SoftwareInstallDefaultArgs> = $Result.GetResult<Prisma.$SoftwareInstallPayload, S>

  type SoftwareInstallCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SoftwareInstallFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SoftwareInstallCountAggregateInputType | true
    }

  export interface SoftwareInstallDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SoftwareInstall'], meta: { name: 'SoftwareInstall' } }
    /**
     * Find zero or one SoftwareInstall that matches the filter.
     * @param {SoftwareInstallFindUniqueArgs} args - Arguments to find a SoftwareInstall
     * @example
     * // Get one SoftwareInstall
     * const softwareInstall = await prisma.softwareInstall.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SoftwareInstallFindUniqueArgs>(args: SelectSubset<T, SoftwareInstallFindUniqueArgs<ExtArgs>>): Prisma__SoftwareInstallClient<$Result.GetResult<Prisma.$SoftwareInstallPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SoftwareInstall that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SoftwareInstallFindUniqueOrThrowArgs} args - Arguments to find a SoftwareInstall
     * @example
     * // Get one SoftwareInstall
     * const softwareInstall = await prisma.softwareInstall.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SoftwareInstallFindUniqueOrThrowArgs>(args: SelectSubset<T, SoftwareInstallFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SoftwareInstallClient<$Result.GetResult<Prisma.$SoftwareInstallPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SoftwareInstall that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareInstallFindFirstArgs} args - Arguments to find a SoftwareInstall
     * @example
     * // Get one SoftwareInstall
     * const softwareInstall = await prisma.softwareInstall.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SoftwareInstallFindFirstArgs>(args?: SelectSubset<T, SoftwareInstallFindFirstArgs<ExtArgs>>): Prisma__SoftwareInstallClient<$Result.GetResult<Prisma.$SoftwareInstallPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SoftwareInstall that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareInstallFindFirstOrThrowArgs} args - Arguments to find a SoftwareInstall
     * @example
     * // Get one SoftwareInstall
     * const softwareInstall = await prisma.softwareInstall.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SoftwareInstallFindFirstOrThrowArgs>(args?: SelectSubset<T, SoftwareInstallFindFirstOrThrowArgs<ExtArgs>>): Prisma__SoftwareInstallClient<$Result.GetResult<Prisma.$SoftwareInstallPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SoftwareInstalls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareInstallFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SoftwareInstalls
     * const softwareInstalls = await prisma.softwareInstall.findMany()
     * 
     * // Get first 10 SoftwareInstalls
     * const softwareInstalls = await prisma.softwareInstall.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const softwareInstallWithIdOnly = await prisma.softwareInstall.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SoftwareInstallFindManyArgs>(args?: SelectSubset<T, SoftwareInstallFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoftwareInstallPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SoftwareInstall.
     * @param {SoftwareInstallCreateArgs} args - Arguments to create a SoftwareInstall.
     * @example
     * // Create one SoftwareInstall
     * const SoftwareInstall = await prisma.softwareInstall.create({
     *   data: {
     *     // ... data to create a SoftwareInstall
     *   }
     * })
     * 
     */
    create<T extends SoftwareInstallCreateArgs>(args: SelectSubset<T, SoftwareInstallCreateArgs<ExtArgs>>): Prisma__SoftwareInstallClient<$Result.GetResult<Prisma.$SoftwareInstallPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SoftwareInstalls.
     * @param {SoftwareInstallCreateManyArgs} args - Arguments to create many SoftwareInstalls.
     * @example
     * // Create many SoftwareInstalls
     * const softwareInstall = await prisma.softwareInstall.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SoftwareInstallCreateManyArgs>(args?: SelectSubset<T, SoftwareInstallCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SoftwareInstall.
     * @param {SoftwareInstallDeleteArgs} args - Arguments to delete one SoftwareInstall.
     * @example
     * // Delete one SoftwareInstall
     * const SoftwareInstall = await prisma.softwareInstall.delete({
     *   where: {
     *     // ... filter to delete one SoftwareInstall
     *   }
     * })
     * 
     */
    delete<T extends SoftwareInstallDeleteArgs>(args: SelectSubset<T, SoftwareInstallDeleteArgs<ExtArgs>>): Prisma__SoftwareInstallClient<$Result.GetResult<Prisma.$SoftwareInstallPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SoftwareInstall.
     * @param {SoftwareInstallUpdateArgs} args - Arguments to update one SoftwareInstall.
     * @example
     * // Update one SoftwareInstall
     * const softwareInstall = await prisma.softwareInstall.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SoftwareInstallUpdateArgs>(args: SelectSubset<T, SoftwareInstallUpdateArgs<ExtArgs>>): Prisma__SoftwareInstallClient<$Result.GetResult<Prisma.$SoftwareInstallPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SoftwareInstalls.
     * @param {SoftwareInstallDeleteManyArgs} args - Arguments to filter SoftwareInstalls to delete.
     * @example
     * // Delete a few SoftwareInstalls
     * const { count } = await prisma.softwareInstall.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SoftwareInstallDeleteManyArgs>(args?: SelectSubset<T, SoftwareInstallDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SoftwareInstalls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareInstallUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SoftwareInstalls
     * const softwareInstall = await prisma.softwareInstall.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SoftwareInstallUpdateManyArgs>(args: SelectSubset<T, SoftwareInstallUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SoftwareInstall.
     * @param {SoftwareInstallUpsertArgs} args - Arguments to update or create a SoftwareInstall.
     * @example
     * // Update or create a SoftwareInstall
     * const softwareInstall = await prisma.softwareInstall.upsert({
     *   create: {
     *     // ... data to create a SoftwareInstall
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SoftwareInstall we want to update
     *   }
     * })
     */
    upsert<T extends SoftwareInstallUpsertArgs>(args: SelectSubset<T, SoftwareInstallUpsertArgs<ExtArgs>>): Prisma__SoftwareInstallClient<$Result.GetResult<Prisma.$SoftwareInstallPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SoftwareInstalls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareInstallCountArgs} args - Arguments to filter SoftwareInstalls to count.
     * @example
     * // Count the number of SoftwareInstalls
     * const count = await prisma.softwareInstall.count({
     *   where: {
     *     // ... the filter for the SoftwareInstalls we want to count
     *   }
     * })
    **/
    count<T extends SoftwareInstallCountArgs>(
      args?: Subset<T, SoftwareInstallCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SoftwareInstallCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SoftwareInstall.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareInstallAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SoftwareInstallAggregateArgs>(args: Subset<T, SoftwareInstallAggregateArgs>): Prisma.PrismaPromise<GetSoftwareInstallAggregateType<T>>

    /**
     * Group by SoftwareInstall.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareInstallGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SoftwareInstallGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SoftwareInstallGroupByArgs['orderBy'] }
        : { orderBy?: SoftwareInstallGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SoftwareInstallGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSoftwareInstallGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SoftwareInstall model
   */
  readonly fields: SoftwareInstallFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SoftwareInstall.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SoftwareInstallClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    hardwareItem<T extends HardwareItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HardwareItemDefaultArgs<ExtArgs>>): Prisma__HardwareItemClient<$Result.GetResult<Prisma.$HardwareItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    software<T extends SoftwareDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SoftwareDefaultArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    license<T extends SoftwareInstall$licenseArgs<ExtArgs> = {}>(args?: Subset<T, SoftwareInstall$licenseArgs<ExtArgs>>): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SoftwareInstall model
   */ 
  interface SoftwareInstallFieldRefs {
    readonly id: FieldRef<"SoftwareInstall", 'String'>
    readonly hardwareItemId: FieldRef<"SoftwareInstall", 'String'>
    readonly softwareId: FieldRef<"SoftwareInstall", 'String'>
    readonly licenseId: FieldRef<"SoftwareInstall", 'String'>
    readonly installedAt: FieldRef<"SoftwareInstall", 'DateTime'>
    readonly uninstalledAt: FieldRef<"SoftwareInstall", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SoftwareInstall findUnique
   */
  export type SoftwareInstallFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareInstall
     */
    select?: SoftwareInstallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInstallInclude<ExtArgs> | null
    /**
     * Filter, which SoftwareInstall to fetch.
     */
    where: SoftwareInstallWhereUniqueInput
  }

  /**
   * SoftwareInstall findUniqueOrThrow
   */
  export type SoftwareInstallFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareInstall
     */
    select?: SoftwareInstallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInstallInclude<ExtArgs> | null
    /**
     * Filter, which SoftwareInstall to fetch.
     */
    where: SoftwareInstallWhereUniqueInput
  }

  /**
   * SoftwareInstall findFirst
   */
  export type SoftwareInstallFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareInstall
     */
    select?: SoftwareInstallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInstallInclude<ExtArgs> | null
    /**
     * Filter, which SoftwareInstall to fetch.
     */
    where?: SoftwareInstallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoftwareInstalls to fetch.
     */
    orderBy?: SoftwareInstallOrderByWithRelationInput | SoftwareInstallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SoftwareInstalls.
     */
    cursor?: SoftwareInstallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoftwareInstalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoftwareInstalls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SoftwareInstalls.
     */
    distinct?: SoftwareInstallScalarFieldEnum | SoftwareInstallScalarFieldEnum[]
  }

  /**
   * SoftwareInstall findFirstOrThrow
   */
  export type SoftwareInstallFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareInstall
     */
    select?: SoftwareInstallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInstallInclude<ExtArgs> | null
    /**
     * Filter, which SoftwareInstall to fetch.
     */
    where?: SoftwareInstallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoftwareInstalls to fetch.
     */
    orderBy?: SoftwareInstallOrderByWithRelationInput | SoftwareInstallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SoftwareInstalls.
     */
    cursor?: SoftwareInstallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoftwareInstalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoftwareInstalls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SoftwareInstalls.
     */
    distinct?: SoftwareInstallScalarFieldEnum | SoftwareInstallScalarFieldEnum[]
  }

  /**
   * SoftwareInstall findMany
   */
  export type SoftwareInstallFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareInstall
     */
    select?: SoftwareInstallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInstallInclude<ExtArgs> | null
    /**
     * Filter, which SoftwareInstalls to fetch.
     */
    where?: SoftwareInstallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoftwareInstalls to fetch.
     */
    orderBy?: SoftwareInstallOrderByWithRelationInput | SoftwareInstallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SoftwareInstalls.
     */
    cursor?: SoftwareInstallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoftwareInstalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoftwareInstalls.
     */
    skip?: number
    distinct?: SoftwareInstallScalarFieldEnum | SoftwareInstallScalarFieldEnum[]
  }

  /**
   * SoftwareInstall create
   */
  export type SoftwareInstallCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareInstall
     */
    select?: SoftwareInstallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInstallInclude<ExtArgs> | null
    /**
     * The data needed to create a SoftwareInstall.
     */
    data: XOR<SoftwareInstallCreateInput, SoftwareInstallUncheckedCreateInput>
  }

  /**
   * SoftwareInstall createMany
   */
  export type SoftwareInstallCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SoftwareInstalls.
     */
    data: SoftwareInstallCreateManyInput | SoftwareInstallCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SoftwareInstall update
   */
  export type SoftwareInstallUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareInstall
     */
    select?: SoftwareInstallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInstallInclude<ExtArgs> | null
    /**
     * The data needed to update a SoftwareInstall.
     */
    data: XOR<SoftwareInstallUpdateInput, SoftwareInstallUncheckedUpdateInput>
    /**
     * Choose, which SoftwareInstall to update.
     */
    where: SoftwareInstallWhereUniqueInput
  }

  /**
   * SoftwareInstall updateMany
   */
  export type SoftwareInstallUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SoftwareInstalls.
     */
    data: XOR<SoftwareInstallUpdateManyMutationInput, SoftwareInstallUncheckedUpdateManyInput>
    /**
     * Filter which SoftwareInstalls to update
     */
    where?: SoftwareInstallWhereInput
  }

  /**
   * SoftwareInstall upsert
   */
  export type SoftwareInstallUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareInstall
     */
    select?: SoftwareInstallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInstallInclude<ExtArgs> | null
    /**
     * The filter to search for the SoftwareInstall to update in case it exists.
     */
    where: SoftwareInstallWhereUniqueInput
    /**
     * In case the SoftwareInstall found by the `where` argument doesn't exist, create a new SoftwareInstall with this data.
     */
    create: XOR<SoftwareInstallCreateInput, SoftwareInstallUncheckedCreateInput>
    /**
     * In case the SoftwareInstall was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SoftwareInstallUpdateInput, SoftwareInstallUncheckedUpdateInput>
  }

  /**
   * SoftwareInstall delete
   */
  export type SoftwareInstallDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareInstall
     */
    select?: SoftwareInstallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInstallInclude<ExtArgs> | null
    /**
     * Filter which SoftwareInstall to delete.
     */
    where: SoftwareInstallWhereUniqueInput
  }

  /**
   * SoftwareInstall deleteMany
   */
  export type SoftwareInstallDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SoftwareInstalls to delete
     */
    where?: SoftwareInstallWhereInput
  }

  /**
   * SoftwareInstall.license
   */
  export type SoftwareInstall$licenseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    where?: LicenseWhereInput
  }

  /**
   * SoftwareInstall without action
   */
  export type SoftwareInstallDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareInstall
     */
    select?: SoftwareInstallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInstallInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    entityType: string | null
    entityId: string | null
    action: string | null
    timestamp: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    entityType: string | null
    entityId: string | null
    action: string | null
    timestamp: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    userId: number
    entityType: number
    entityId: number
    action: number
    oldValues: number
    newValues: number
    timestamp: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    userId?: true
    entityType?: true
    entityId?: true
    action?: true
    timestamp?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    userId?: true
    entityType?: true
    entityId?: true
    action?: true
    timestamp?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    userId?: true
    entityType?: true
    entityId?: true
    action?: true
    oldValues?: true
    newValues?: true
    timestamp?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    userId: string
    entityType: string
    entityId: string
    action: string
    oldValues: JsonValue | null
    newValues: JsonValue | null
    timestamp: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    entityType?: boolean
    entityId?: boolean
    action?: boolean
    oldValues?: boolean
    newValues?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    hardwareItem?: boolean | AuditLog$hardwareItemArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>


  export type AuditLogSelectScalar = {
    id?: boolean
    userId?: boolean
    entityType?: boolean
    entityId?: boolean
    action?: boolean
    oldValues?: boolean
    newValues?: boolean
    timestamp?: boolean
  }

  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    hardwareItem?: boolean | AuditLog$hardwareItemArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      hardwareItem: Prisma.$HardwareItemPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      entityType: string
      entityId: string
      action: string
      oldValues: Prisma.JsonValue | null
      newValues: Prisma.JsonValue | null
      timestamp: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    hardwareItem<T extends AuditLog$hardwareItemArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$hardwareItemArgs<ExtArgs>>): Prisma__HardwareItemClient<$Result.GetResult<Prisma.$HardwareItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */ 
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly userId: FieldRef<"AuditLog", 'String'>
    readonly entityType: FieldRef<"AuditLog", 'String'>
    readonly entityId: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly oldValues: FieldRef<"AuditLog", 'Json'>
    readonly newValues: FieldRef<"AuditLog", 'Json'>
    readonly timestamp: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog.hardwareItem
   */
  export type AuditLog$hardwareItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareItem
     */
    select?: HardwareItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareItemInclude<ExtArgs> | null
    where?: HardwareItemWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    passwordHash: 'passwordHash',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const VendorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    cnpj: 'cnpj',
    contactEmail: 'contactEmail',
    contactPhone: 'contactPhone',
    address: 'address',
    notes: 'notes'
  };

  export type VendorScalarFieldEnum = (typeof VendorScalarFieldEnum)[keyof typeof VendorScalarFieldEnum]


  export const SoftwareScalarFieldEnum: {
    id: 'id',
    name: 'name',
    version: 'version',
    category: 'category',
    notes: 'notes',
    vendorId: 'vendorId'
  };

  export type SoftwareScalarFieldEnum = (typeof SoftwareScalarFieldEnum)[keyof typeof SoftwareScalarFieldEnum]


  export const LicenseScalarFieldEnum: {
    id: 'id',
    softwareId: 'softwareId',
    key: 'key',
    seatsTotal: 'seatsTotal',
    seatsInUse: 'seatsInUse',
    purchaseDate: 'purchaseDate',
    startDate: 'startDate',
    endDate: 'endDate',
    renewalType: 'renewalType',
    cost: 'cost',
    vendorId: 'vendorId',
    notes: 'notes'
  };

  export type LicenseScalarFieldEnum = (typeof LicenseScalarFieldEnum)[keyof typeof LicenseScalarFieldEnum]


  export const HardwareItemScalarFieldEnum: {
    id: 'id',
    assetTag: 'assetTag',
    type: 'type',
    brand: 'brand',
    model: 'model',
    serialNumber: 'serialNumber',
    purchaseDate: 'purchaseDate',
    purchaseCost: 'purchaseCost',
    vendorId: 'vendorId',
    warrantyEndDate: 'warrantyEndDate',
    status: 'status',
    condition: 'condition',
    location: 'location',
    responsibleUserId: 'responsibleUserId',
    departmentId: 'departmentId',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type HardwareItemScalarFieldEnum = (typeof HardwareItemScalarFieldEnum)[keyof typeof HardwareItemScalarFieldEnum]


  export const AttachmentScalarFieldEnum: {
    id: 'id',
    entityType: 'entityType',
    entityId: 'entityId',
    fileUrl: 'fileUrl',
    fileName: 'fileName',
    mimeType: 'mimeType',
    uploadedAt: 'uploadedAt'
  };

  export type AttachmentScalarFieldEnum = (typeof AttachmentScalarFieldEnum)[keyof typeof AttachmentScalarFieldEnum]


  export const MaintenanceScalarFieldEnum: {
    id: 'id',
    hardwareItemId: 'hardwareItemId',
    startDate: 'startDate',
    endDate: 'endDate',
    provider: 'provider',
    description: 'description',
    cost: 'cost',
    status: 'status',
    notes: 'notes'
  };

  export type MaintenanceScalarFieldEnum = (typeof MaintenanceScalarFieldEnum)[keyof typeof MaintenanceScalarFieldEnum]


  export const AllocationScalarFieldEnum: {
    id: 'id',
    hardwareItemId: 'hardwareItemId',
    assignedToUserId: 'assignedToUserId',
    assignedToDepartmentId: 'assignedToDepartmentId',
    checkoutDate: 'checkoutDate',
    expectedReturnDate: 'expectedReturnDate',
    returnDate: 'returnDate',
    notes: 'notes'
  };

  export type AllocationScalarFieldEnum = (typeof AllocationScalarFieldEnum)[keyof typeof AllocationScalarFieldEnum]


  export const SoftwareInstallScalarFieldEnum: {
    id: 'id',
    hardwareItemId: 'hardwareItemId',
    softwareId: 'softwareId',
    licenseId: 'licenseId',
    installedAt: 'installedAt',
    uninstalledAt: 'uninstalledAt'
  };

  export type SoftwareInstallScalarFieldEnum = (typeof SoftwareInstallScalarFieldEnum)[keyof typeof SoftwareInstallScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    entityType: 'entityType',
    entityId: 'entityId',
    action: 'action',
    oldValues: 'oldValues',
    newValues: 'newValues',
    timestamp: 'timestamp'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'VendorType'
   */
  export type EnumVendorTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VendorType'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'RenewalType'
   */
  export type EnumRenewalTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RenewalType'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'HardwareType'
   */
  export type EnumHardwareTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'HardwareType'>
    


  /**
   * Reference to a field of type 'HardwareStatus'
   */
  export type EnumHardwareStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'HardwareStatus'>
    


  /**
   * Reference to a field of type 'HardwareCondition'
   */
  export type EnumHardwareConditionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'HardwareCondition'>
    


  /**
   * Reference to a field of type 'EntityType'
   */
  export type EnumEntityTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EntityType'>
    


  /**
   * Reference to a field of type 'MaintenanceStatus'
   */
  export type EnumMaintenanceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaintenanceStatus'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    hardwareItems?: HardwareItemListRelationFilter
    allocations?: AllocationListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hardwareItems?: HardwareItemOrderByRelationAggregateInput
    allocations?: AllocationOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    hardwareItems?: HardwareItemListRelationFilter
    allocations?: AllocationListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    hardwareItems?: HardwareItemListRelationFilter
    allocations?: AllocationListRelationFilter
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    hardwareItems?: HardwareItemOrderByRelationAggregateInput
    allocations?: AllocationOrderByRelationAggregateInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    name?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    hardwareItems?: HardwareItemListRelationFilter
    allocations?: AllocationListRelationFilter
  }, "id">

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Department"> | string
    name?: StringWithAggregatesFilter<"Department"> | string
    description?: StringNullableWithAggregatesFilter<"Department"> | string | null
  }

  export type VendorWhereInput = {
    AND?: VendorWhereInput | VendorWhereInput[]
    OR?: VendorWhereInput[]
    NOT?: VendorWhereInput | VendorWhereInput[]
    id?: StringFilter<"Vendor"> | string
    name?: StringFilter<"Vendor"> | string
    type?: EnumVendorTypeFilter<"Vendor"> | $Enums.VendorType
    cnpj?: StringNullableFilter<"Vendor"> | string | null
    contactEmail?: StringNullableFilter<"Vendor"> | string | null
    contactPhone?: StringNullableFilter<"Vendor"> | string | null
    address?: StringNullableFilter<"Vendor"> | string | null
    notes?: StringNullableFilter<"Vendor"> | string | null
    hardwareItems?: HardwareItemListRelationFilter
    licenses?: LicenseListRelationFilter
    software?: SoftwareListRelationFilter
  }

  export type VendorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    cnpj?: SortOrderInput | SortOrder
    contactEmail?: SortOrderInput | SortOrder
    contactPhone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    hardwareItems?: HardwareItemOrderByRelationAggregateInput
    licenses?: LicenseOrderByRelationAggregateInput
    software?: SoftwareOrderByRelationAggregateInput
  }

  export type VendorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VendorWhereInput | VendorWhereInput[]
    OR?: VendorWhereInput[]
    NOT?: VendorWhereInput | VendorWhereInput[]
    name?: StringFilter<"Vendor"> | string
    type?: EnumVendorTypeFilter<"Vendor"> | $Enums.VendorType
    cnpj?: StringNullableFilter<"Vendor"> | string | null
    contactEmail?: StringNullableFilter<"Vendor"> | string | null
    contactPhone?: StringNullableFilter<"Vendor"> | string | null
    address?: StringNullableFilter<"Vendor"> | string | null
    notes?: StringNullableFilter<"Vendor"> | string | null
    hardwareItems?: HardwareItemListRelationFilter
    licenses?: LicenseListRelationFilter
    software?: SoftwareListRelationFilter
  }, "id">

  export type VendorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    cnpj?: SortOrderInput | SortOrder
    contactEmail?: SortOrderInput | SortOrder
    contactPhone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: VendorCountOrderByAggregateInput
    _max?: VendorMaxOrderByAggregateInput
    _min?: VendorMinOrderByAggregateInput
  }

  export type VendorScalarWhereWithAggregatesInput = {
    AND?: VendorScalarWhereWithAggregatesInput | VendorScalarWhereWithAggregatesInput[]
    OR?: VendorScalarWhereWithAggregatesInput[]
    NOT?: VendorScalarWhereWithAggregatesInput | VendorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Vendor"> | string
    name?: StringWithAggregatesFilter<"Vendor"> | string
    type?: EnumVendorTypeWithAggregatesFilter<"Vendor"> | $Enums.VendorType
    cnpj?: StringNullableWithAggregatesFilter<"Vendor"> | string | null
    contactEmail?: StringNullableWithAggregatesFilter<"Vendor"> | string | null
    contactPhone?: StringNullableWithAggregatesFilter<"Vendor"> | string | null
    address?: StringNullableWithAggregatesFilter<"Vendor"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Vendor"> | string | null
  }

  export type SoftwareWhereInput = {
    AND?: SoftwareWhereInput | SoftwareWhereInput[]
    OR?: SoftwareWhereInput[]
    NOT?: SoftwareWhereInput | SoftwareWhereInput[]
    id?: StringFilter<"Software"> | string
    name?: StringFilter<"Software"> | string
    version?: StringNullableFilter<"Software"> | string | null
    category?: StringNullableFilter<"Software"> | string | null
    notes?: StringNullableFilter<"Software"> | string | null
    vendorId?: StringNullableFilter<"Software"> | string | null
    vendor?: XOR<VendorNullableRelationFilter, VendorWhereInput> | null
    licenses?: LicenseListRelationFilter
    softwareInstalls?: SoftwareInstallListRelationFilter
  }

  export type SoftwareOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    version?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    vendorId?: SortOrderInput | SortOrder
    vendor?: VendorOrderByWithRelationInput
    licenses?: LicenseOrderByRelationAggregateInput
    softwareInstalls?: SoftwareInstallOrderByRelationAggregateInput
  }

  export type SoftwareWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SoftwareWhereInput | SoftwareWhereInput[]
    OR?: SoftwareWhereInput[]
    NOT?: SoftwareWhereInput | SoftwareWhereInput[]
    name?: StringFilter<"Software"> | string
    version?: StringNullableFilter<"Software"> | string | null
    category?: StringNullableFilter<"Software"> | string | null
    notes?: StringNullableFilter<"Software"> | string | null
    vendorId?: StringNullableFilter<"Software"> | string | null
    vendor?: XOR<VendorNullableRelationFilter, VendorWhereInput> | null
    licenses?: LicenseListRelationFilter
    softwareInstalls?: SoftwareInstallListRelationFilter
  }, "id">

  export type SoftwareOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    version?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    vendorId?: SortOrderInput | SortOrder
    _count?: SoftwareCountOrderByAggregateInput
    _max?: SoftwareMaxOrderByAggregateInput
    _min?: SoftwareMinOrderByAggregateInput
  }

  export type SoftwareScalarWhereWithAggregatesInput = {
    AND?: SoftwareScalarWhereWithAggregatesInput | SoftwareScalarWhereWithAggregatesInput[]
    OR?: SoftwareScalarWhereWithAggregatesInput[]
    NOT?: SoftwareScalarWhereWithAggregatesInput | SoftwareScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Software"> | string
    name?: StringWithAggregatesFilter<"Software"> | string
    version?: StringNullableWithAggregatesFilter<"Software"> | string | null
    category?: StringNullableWithAggregatesFilter<"Software"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Software"> | string | null
    vendorId?: StringNullableWithAggregatesFilter<"Software"> | string | null
  }

  export type LicenseWhereInput = {
    AND?: LicenseWhereInput | LicenseWhereInput[]
    OR?: LicenseWhereInput[]
    NOT?: LicenseWhereInput | LicenseWhereInput[]
    id?: StringFilter<"License"> | string
    softwareId?: StringFilter<"License"> | string
    key?: StringFilter<"License"> | string
    seatsTotal?: IntFilter<"License"> | number
    seatsInUse?: IntFilter<"License"> | number
    purchaseDate?: DateTimeNullableFilter<"License"> | Date | string | null
    startDate?: DateTimeNullableFilter<"License"> | Date | string | null
    endDate?: DateTimeNullableFilter<"License"> | Date | string | null
    renewalType?: EnumRenewalTypeFilter<"License"> | $Enums.RenewalType
    cost?: FloatNullableFilter<"License"> | number | null
    vendorId?: StringNullableFilter<"License"> | string | null
    notes?: StringNullableFilter<"License"> | string | null
    software?: XOR<SoftwareRelationFilter, SoftwareWhereInput>
    vendor?: XOR<VendorNullableRelationFilter, VendorWhereInput> | null
    softwareInstalls?: SoftwareInstallListRelationFilter
  }

  export type LicenseOrderByWithRelationInput = {
    id?: SortOrder
    softwareId?: SortOrder
    key?: SortOrder
    seatsTotal?: SortOrder
    seatsInUse?: SortOrder
    purchaseDate?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    renewalType?: SortOrder
    cost?: SortOrderInput | SortOrder
    vendorId?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    software?: SoftwareOrderByWithRelationInput
    vendor?: VendorOrderByWithRelationInput
    softwareInstalls?: SoftwareInstallOrderByRelationAggregateInput
  }

  export type LicenseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LicenseWhereInput | LicenseWhereInput[]
    OR?: LicenseWhereInput[]
    NOT?: LicenseWhereInput | LicenseWhereInput[]
    softwareId?: StringFilter<"License"> | string
    key?: StringFilter<"License"> | string
    seatsTotal?: IntFilter<"License"> | number
    seatsInUse?: IntFilter<"License"> | number
    purchaseDate?: DateTimeNullableFilter<"License"> | Date | string | null
    startDate?: DateTimeNullableFilter<"License"> | Date | string | null
    endDate?: DateTimeNullableFilter<"License"> | Date | string | null
    renewalType?: EnumRenewalTypeFilter<"License"> | $Enums.RenewalType
    cost?: FloatNullableFilter<"License"> | number | null
    vendorId?: StringNullableFilter<"License"> | string | null
    notes?: StringNullableFilter<"License"> | string | null
    software?: XOR<SoftwareRelationFilter, SoftwareWhereInput>
    vendor?: XOR<VendorNullableRelationFilter, VendorWhereInput> | null
    softwareInstalls?: SoftwareInstallListRelationFilter
  }, "id">

  export type LicenseOrderByWithAggregationInput = {
    id?: SortOrder
    softwareId?: SortOrder
    key?: SortOrder
    seatsTotal?: SortOrder
    seatsInUse?: SortOrder
    purchaseDate?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    renewalType?: SortOrder
    cost?: SortOrderInput | SortOrder
    vendorId?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: LicenseCountOrderByAggregateInput
    _avg?: LicenseAvgOrderByAggregateInput
    _max?: LicenseMaxOrderByAggregateInput
    _min?: LicenseMinOrderByAggregateInput
    _sum?: LicenseSumOrderByAggregateInput
  }

  export type LicenseScalarWhereWithAggregatesInput = {
    AND?: LicenseScalarWhereWithAggregatesInput | LicenseScalarWhereWithAggregatesInput[]
    OR?: LicenseScalarWhereWithAggregatesInput[]
    NOT?: LicenseScalarWhereWithAggregatesInput | LicenseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"License"> | string
    softwareId?: StringWithAggregatesFilter<"License"> | string
    key?: StringWithAggregatesFilter<"License"> | string
    seatsTotal?: IntWithAggregatesFilter<"License"> | number
    seatsInUse?: IntWithAggregatesFilter<"License"> | number
    purchaseDate?: DateTimeNullableWithAggregatesFilter<"License"> | Date | string | null
    startDate?: DateTimeNullableWithAggregatesFilter<"License"> | Date | string | null
    endDate?: DateTimeNullableWithAggregatesFilter<"License"> | Date | string | null
    renewalType?: EnumRenewalTypeWithAggregatesFilter<"License"> | $Enums.RenewalType
    cost?: FloatNullableWithAggregatesFilter<"License"> | number | null
    vendorId?: StringNullableWithAggregatesFilter<"License"> | string | null
    notes?: StringNullableWithAggregatesFilter<"License"> | string | null
  }

  export type HardwareItemWhereInput = {
    AND?: HardwareItemWhereInput | HardwareItemWhereInput[]
    OR?: HardwareItemWhereInput[]
    NOT?: HardwareItemWhereInput | HardwareItemWhereInput[]
    id?: StringFilter<"HardwareItem"> | string
    assetTag?: StringFilter<"HardwareItem"> | string
    type?: EnumHardwareTypeFilter<"HardwareItem"> | $Enums.HardwareType
    brand?: StringNullableFilter<"HardwareItem"> | string | null
    model?: StringNullableFilter<"HardwareItem"> | string | null
    serialNumber?: StringNullableFilter<"HardwareItem"> | string | null
    purchaseDate?: DateTimeNullableFilter<"HardwareItem"> | Date | string | null
    purchaseCost?: FloatNullableFilter<"HardwareItem"> | number | null
    vendorId?: StringNullableFilter<"HardwareItem"> | string | null
    warrantyEndDate?: DateTimeNullableFilter<"HardwareItem"> | Date | string | null
    status?: EnumHardwareStatusFilter<"HardwareItem"> | $Enums.HardwareStatus
    condition?: EnumHardwareConditionFilter<"HardwareItem"> | $Enums.HardwareCondition
    location?: StringNullableFilter<"HardwareItem"> | string | null
    responsibleUserId?: StringNullableFilter<"HardwareItem"> | string | null
    departmentId?: StringNullableFilter<"HardwareItem"> | string | null
    notes?: StringNullableFilter<"HardwareItem"> | string | null
    createdAt?: DateTimeFilter<"HardwareItem"> | Date | string
    updatedAt?: DateTimeFilter<"HardwareItem"> | Date | string
    vendor?: XOR<VendorNullableRelationFilter, VendorWhereInput> | null
    responsibleUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    department?: XOR<DepartmentNullableRelationFilter, DepartmentWhereInput> | null
    attachments?: AttachmentListRelationFilter
    maintenances?: MaintenanceListRelationFilter
    allocations?: AllocationListRelationFilter
    softwareInstalls?: SoftwareInstallListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }

  export type HardwareItemOrderByWithRelationInput = {
    id?: SortOrder
    assetTag?: SortOrder
    type?: SortOrder
    brand?: SortOrderInput | SortOrder
    model?: SortOrderInput | SortOrder
    serialNumber?: SortOrderInput | SortOrder
    purchaseDate?: SortOrderInput | SortOrder
    purchaseCost?: SortOrderInput | SortOrder
    vendorId?: SortOrderInput | SortOrder
    warrantyEndDate?: SortOrderInput | SortOrder
    status?: SortOrder
    condition?: SortOrder
    location?: SortOrderInput | SortOrder
    responsibleUserId?: SortOrderInput | SortOrder
    departmentId?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    vendor?: VendorOrderByWithRelationInput
    responsibleUser?: UserOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
    attachments?: AttachmentOrderByRelationAggregateInput
    maintenances?: MaintenanceOrderByRelationAggregateInput
    allocations?: AllocationOrderByRelationAggregateInput
    softwareInstalls?: SoftwareInstallOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
  }

  export type HardwareItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    assetTag?: string
    AND?: HardwareItemWhereInput | HardwareItemWhereInput[]
    OR?: HardwareItemWhereInput[]
    NOT?: HardwareItemWhereInput | HardwareItemWhereInput[]
    type?: EnumHardwareTypeFilter<"HardwareItem"> | $Enums.HardwareType
    brand?: StringNullableFilter<"HardwareItem"> | string | null
    model?: StringNullableFilter<"HardwareItem"> | string | null
    serialNumber?: StringNullableFilter<"HardwareItem"> | string | null
    purchaseDate?: DateTimeNullableFilter<"HardwareItem"> | Date | string | null
    purchaseCost?: FloatNullableFilter<"HardwareItem"> | number | null
    vendorId?: StringNullableFilter<"HardwareItem"> | string | null
    warrantyEndDate?: DateTimeNullableFilter<"HardwareItem"> | Date | string | null
    status?: EnumHardwareStatusFilter<"HardwareItem"> | $Enums.HardwareStatus
    condition?: EnumHardwareConditionFilter<"HardwareItem"> | $Enums.HardwareCondition
    location?: StringNullableFilter<"HardwareItem"> | string | null
    responsibleUserId?: StringNullableFilter<"HardwareItem"> | string | null
    departmentId?: StringNullableFilter<"HardwareItem"> | string | null
    notes?: StringNullableFilter<"HardwareItem"> | string | null
    createdAt?: DateTimeFilter<"HardwareItem"> | Date | string
    updatedAt?: DateTimeFilter<"HardwareItem"> | Date | string
    vendor?: XOR<VendorNullableRelationFilter, VendorWhereInput> | null
    responsibleUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    department?: XOR<DepartmentNullableRelationFilter, DepartmentWhereInput> | null
    attachments?: AttachmentListRelationFilter
    maintenances?: MaintenanceListRelationFilter
    allocations?: AllocationListRelationFilter
    softwareInstalls?: SoftwareInstallListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }, "id" | "assetTag">

  export type HardwareItemOrderByWithAggregationInput = {
    id?: SortOrder
    assetTag?: SortOrder
    type?: SortOrder
    brand?: SortOrderInput | SortOrder
    model?: SortOrderInput | SortOrder
    serialNumber?: SortOrderInput | SortOrder
    purchaseDate?: SortOrderInput | SortOrder
    purchaseCost?: SortOrderInput | SortOrder
    vendorId?: SortOrderInput | SortOrder
    warrantyEndDate?: SortOrderInput | SortOrder
    status?: SortOrder
    condition?: SortOrder
    location?: SortOrderInput | SortOrder
    responsibleUserId?: SortOrderInput | SortOrder
    departmentId?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: HardwareItemCountOrderByAggregateInput
    _avg?: HardwareItemAvgOrderByAggregateInput
    _max?: HardwareItemMaxOrderByAggregateInput
    _min?: HardwareItemMinOrderByAggregateInput
    _sum?: HardwareItemSumOrderByAggregateInput
  }

  export type HardwareItemScalarWhereWithAggregatesInput = {
    AND?: HardwareItemScalarWhereWithAggregatesInput | HardwareItemScalarWhereWithAggregatesInput[]
    OR?: HardwareItemScalarWhereWithAggregatesInput[]
    NOT?: HardwareItemScalarWhereWithAggregatesInput | HardwareItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"HardwareItem"> | string
    assetTag?: StringWithAggregatesFilter<"HardwareItem"> | string
    type?: EnumHardwareTypeWithAggregatesFilter<"HardwareItem"> | $Enums.HardwareType
    brand?: StringNullableWithAggregatesFilter<"HardwareItem"> | string | null
    model?: StringNullableWithAggregatesFilter<"HardwareItem"> | string | null
    serialNumber?: StringNullableWithAggregatesFilter<"HardwareItem"> | string | null
    purchaseDate?: DateTimeNullableWithAggregatesFilter<"HardwareItem"> | Date | string | null
    purchaseCost?: FloatNullableWithAggregatesFilter<"HardwareItem"> | number | null
    vendorId?: StringNullableWithAggregatesFilter<"HardwareItem"> | string | null
    warrantyEndDate?: DateTimeNullableWithAggregatesFilter<"HardwareItem"> | Date | string | null
    status?: EnumHardwareStatusWithAggregatesFilter<"HardwareItem"> | $Enums.HardwareStatus
    condition?: EnumHardwareConditionWithAggregatesFilter<"HardwareItem"> | $Enums.HardwareCondition
    location?: StringNullableWithAggregatesFilter<"HardwareItem"> | string | null
    responsibleUserId?: StringNullableWithAggregatesFilter<"HardwareItem"> | string | null
    departmentId?: StringNullableWithAggregatesFilter<"HardwareItem"> | string | null
    notes?: StringNullableWithAggregatesFilter<"HardwareItem"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"HardwareItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"HardwareItem"> | Date | string
  }

  export type AttachmentWhereInput = {
    AND?: AttachmentWhereInput | AttachmentWhereInput[]
    OR?: AttachmentWhereInput[]
    NOT?: AttachmentWhereInput | AttachmentWhereInput[]
    id?: StringFilter<"Attachment"> | string
    entityType?: EnumEntityTypeFilter<"Attachment"> | $Enums.EntityType
    entityId?: StringFilter<"Attachment"> | string
    fileUrl?: StringFilter<"Attachment"> | string
    fileName?: StringFilter<"Attachment"> | string
    mimeType?: StringFilter<"Attachment"> | string
    uploadedAt?: DateTimeFilter<"Attachment"> | Date | string
    hardwareItem?: XOR<HardwareItemNullableRelationFilter, HardwareItemWhereInput> | null
  }

  export type AttachmentOrderByWithRelationInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    fileUrl?: SortOrder
    fileName?: SortOrder
    mimeType?: SortOrder
    uploadedAt?: SortOrder
    hardwareItem?: HardwareItemOrderByWithRelationInput
  }

  export type AttachmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AttachmentWhereInput | AttachmentWhereInput[]
    OR?: AttachmentWhereInput[]
    NOT?: AttachmentWhereInput | AttachmentWhereInput[]
    entityType?: EnumEntityTypeFilter<"Attachment"> | $Enums.EntityType
    entityId?: StringFilter<"Attachment"> | string
    fileUrl?: StringFilter<"Attachment"> | string
    fileName?: StringFilter<"Attachment"> | string
    mimeType?: StringFilter<"Attachment"> | string
    uploadedAt?: DateTimeFilter<"Attachment"> | Date | string
    hardwareItem?: XOR<HardwareItemNullableRelationFilter, HardwareItemWhereInput> | null
  }, "id">

  export type AttachmentOrderByWithAggregationInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    fileUrl?: SortOrder
    fileName?: SortOrder
    mimeType?: SortOrder
    uploadedAt?: SortOrder
    _count?: AttachmentCountOrderByAggregateInput
    _max?: AttachmentMaxOrderByAggregateInput
    _min?: AttachmentMinOrderByAggregateInput
  }

  export type AttachmentScalarWhereWithAggregatesInput = {
    AND?: AttachmentScalarWhereWithAggregatesInput | AttachmentScalarWhereWithAggregatesInput[]
    OR?: AttachmentScalarWhereWithAggregatesInput[]
    NOT?: AttachmentScalarWhereWithAggregatesInput | AttachmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Attachment"> | string
    entityType?: EnumEntityTypeWithAggregatesFilter<"Attachment"> | $Enums.EntityType
    entityId?: StringWithAggregatesFilter<"Attachment"> | string
    fileUrl?: StringWithAggregatesFilter<"Attachment"> | string
    fileName?: StringWithAggregatesFilter<"Attachment"> | string
    mimeType?: StringWithAggregatesFilter<"Attachment"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"Attachment"> | Date | string
  }

  export type MaintenanceWhereInput = {
    AND?: MaintenanceWhereInput | MaintenanceWhereInput[]
    OR?: MaintenanceWhereInput[]
    NOT?: MaintenanceWhereInput | MaintenanceWhereInput[]
    id?: StringFilter<"Maintenance"> | string
    hardwareItemId?: StringFilter<"Maintenance"> | string
    startDate?: DateTimeFilter<"Maintenance"> | Date | string
    endDate?: DateTimeNullableFilter<"Maintenance"> | Date | string | null
    provider?: StringFilter<"Maintenance"> | string
    description?: StringFilter<"Maintenance"> | string
    cost?: FloatNullableFilter<"Maintenance"> | number | null
    status?: EnumMaintenanceStatusFilter<"Maintenance"> | $Enums.MaintenanceStatus
    notes?: StringNullableFilter<"Maintenance"> | string | null
    hardwareItem?: XOR<HardwareItemRelationFilter, HardwareItemWhereInput>
  }

  export type MaintenanceOrderByWithRelationInput = {
    id?: SortOrder
    hardwareItemId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    provider?: SortOrder
    description?: SortOrder
    cost?: SortOrderInput | SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    hardwareItem?: HardwareItemOrderByWithRelationInput
  }

  export type MaintenanceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MaintenanceWhereInput | MaintenanceWhereInput[]
    OR?: MaintenanceWhereInput[]
    NOT?: MaintenanceWhereInput | MaintenanceWhereInput[]
    hardwareItemId?: StringFilter<"Maintenance"> | string
    startDate?: DateTimeFilter<"Maintenance"> | Date | string
    endDate?: DateTimeNullableFilter<"Maintenance"> | Date | string | null
    provider?: StringFilter<"Maintenance"> | string
    description?: StringFilter<"Maintenance"> | string
    cost?: FloatNullableFilter<"Maintenance"> | number | null
    status?: EnumMaintenanceStatusFilter<"Maintenance"> | $Enums.MaintenanceStatus
    notes?: StringNullableFilter<"Maintenance"> | string | null
    hardwareItem?: XOR<HardwareItemRelationFilter, HardwareItemWhereInput>
  }, "id">

  export type MaintenanceOrderByWithAggregationInput = {
    id?: SortOrder
    hardwareItemId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    provider?: SortOrder
    description?: SortOrder
    cost?: SortOrderInput | SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: MaintenanceCountOrderByAggregateInput
    _avg?: MaintenanceAvgOrderByAggregateInput
    _max?: MaintenanceMaxOrderByAggregateInput
    _min?: MaintenanceMinOrderByAggregateInput
    _sum?: MaintenanceSumOrderByAggregateInput
  }

  export type MaintenanceScalarWhereWithAggregatesInput = {
    AND?: MaintenanceScalarWhereWithAggregatesInput | MaintenanceScalarWhereWithAggregatesInput[]
    OR?: MaintenanceScalarWhereWithAggregatesInput[]
    NOT?: MaintenanceScalarWhereWithAggregatesInput | MaintenanceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Maintenance"> | string
    hardwareItemId?: StringWithAggregatesFilter<"Maintenance"> | string
    startDate?: DateTimeWithAggregatesFilter<"Maintenance"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"Maintenance"> | Date | string | null
    provider?: StringWithAggregatesFilter<"Maintenance"> | string
    description?: StringWithAggregatesFilter<"Maintenance"> | string
    cost?: FloatNullableWithAggregatesFilter<"Maintenance"> | number | null
    status?: EnumMaintenanceStatusWithAggregatesFilter<"Maintenance"> | $Enums.MaintenanceStatus
    notes?: StringNullableWithAggregatesFilter<"Maintenance"> | string | null
  }

  export type AllocationWhereInput = {
    AND?: AllocationWhereInput | AllocationWhereInput[]
    OR?: AllocationWhereInput[]
    NOT?: AllocationWhereInput | AllocationWhereInput[]
    id?: StringFilter<"Allocation"> | string
    hardwareItemId?: StringFilter<"Allocation"> | string
    assignedToUserId?: StringNullableFilter<"Allocation"> | string | null
    assignedToDepartmentId?: StringNullableFilter<"Allocation"> | string | null
    checkoutDate?: DateTimeFilter<"Allocation"> | Date | string
    expectedReturnDate?: DateTimeNullableFilter<"Allocation"> | Date | string | null
    returnDate?: DateTimeNullableFilter<"Allocation"> | Date | string | null
    notes?: StringNullableFilter<"Allocation"> | string | null
    hardwareItem?: XOR<HardwareItemRelationFilter, HardwareItemWhereInput>
    assignedToUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    assignedToDepartment?: XOR<DepartmentNullableRelationFilter, DepartmentWhereInput> | null
  }

  export type AllocationOrderByWithRelationInput = {
    id?: SortOrder
    hardwareItemId?: SortOrder
    assignedToUserId?: SortOrderInput | SortOrder
    assignedToDepartmentId?: SortOrderInput | SortOrder
    checkoutDate?: SortOrder
    expectedReturnDate?: SortOrderInput | SortOrder
    returnDate?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    hardwareItem?: HardwareItemOrderByWithRelationInput
    assignedToUser?: UserOrderByWithRelationInput
    assignedToDepartment?: DepartmentOrderByWithRelationInput
  }

  export type AllocationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AllocationWhereInput | AllocationWhereInput[]
    OR?: AllocationWhereInput[]
    NOT?: AllocationWhereInput | AllocationWhereInput[]
    hardwareItemId?: StringFilter<"Allocation"> | string
    assignedToUserId?: StringNullableFilter<"Allocation"> | string | null
    assignedToDepartmentId?: StringNullableFilter<"Allocation"> | string | null
    checkoutDate?: DateTimeFilter<"Allocation"> | Date | string
    expectedReturnDate?: DateTimeNullableFilter<"Allocation"> | Date | string | null
    returnDate?: DateTimeNullableFilter<"Allocation"> | Date | string | null
    notes?: StringNullableFilter<"Allocation"> | string | null
    hardwareItem?: XOR<HardwareItemRelationFilter, HardwareItemWhereInput>
    assignedToUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    assignedToDepartment?: XOR<DepartmentNullableRelationFilter, DepartmentWhereInput> | null
  }, "id">

  export type AllocationOrderByWithAggregationInput = {
    id?: SortOrder
    hardwareItemId?: SortOrder
    assignedToUserId?: SortOrderInput | SortOrder
    assignedToDepartmentId?: SortOrderInput | SortOrder
    checkoutDate?: SortOrder
    expectedReturnDate?: SortOrderInput | SortOrder
    returnDate?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: AllocationCountOrderByAggregateInput
    _max?: AllocationMaxOrderByAggregateInput
    _min?: AllocationMinOrderByAggregateInput
  }

  export type AllocationScalarWhereWithAggregatesInput = {
    AND?: AllocationScalarWhereWithAggregatesInput | AllocationScalarWhereWithAggregatesInput[]
    OR?: AllocationScalarWhereWithAggregatesInput[]
    NOT?: AllocationScalarWhereWithAggregatesInput | AllocationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Allocation"> | string
    hardwareItemId?: StringWithAggregatesFilter<"Allocation"> | string
    assignedToUserId?: StringNullableWithAggregatesFilter<"Allocation"> | string | null
    assignedToDepartmentId?: StringNullableWithAggregatesFilter<"Allocation"> | string | null
    checkoutDate?: DateTimeWithAggregatesFilter<"Allocation"> | Date | string
    expectedReturnDate?: DateTimeNullableWithAggregatesFilter<"Allocation"> | Date | string | null
    returnDate?: DateTimeNullableWithAggregatesFilter<"Allocation"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"Allocation"> | string | null
  }

  export type SoftwareInstallWhereInput = {
    AND?: SoftwareInstallWhereInput | SoftwareInstallWhereInput[]
    OR?: SoftwareInstallWhereInput[]
    NOT?: SoftwareInstallWhereInput | SoftwareInstallWhereInput[]
    id?: StringFilter<"SoftwareInstall"> | string
    hardwareItemId?: StringFilter<"SoftwareInstall"> | string
    softwareId?: StringFilter<"SoftwareInstall"> | string
    licenseId?: StringNullableFilter<"SoftwareInstall"> | string | null
    installedAt?: DateTimeFilter<"SoftwareInstall"> | Date | string
    uninstalledAt?: DateTimeNullableFilter<"SoftwareInstall"> | Date | string | null
    hardwareItem?: XOR<HardwareItemRelationFilter, HardwareItemWhereInput>
    software?: XOR<SoftwareRelationFilter, SoftwareWhereInput>
    license?: XOR<LicenseNullableRelationFilter, LicenseWhereInput> | null
  }

  export type SoftwareInstallOrderByWithRelationInput = {
    id?: SortOrder
    hardwareItemId?: SortOrder
    softwareId?: SortOrder
    licenseId?: SortOrderInput | SortOrder
    installedAt?: SortOrder
    uninstalledAt?: SortOrderInput | SortOrder
    hardwareItem?: HardwareItemOrderByWithRelationInput
    software?: SoftwareOrderByWithRelationInput
    license?: LicenseOrderByWithRelationInput
  }

  export type SoftwareInstallWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SoftwareInstallWhereInput | SoftwareInstallWhereInput[]
    OR?: SoftwareInstallWhereInput[]
    NOT?: SoftwareInstallWhereInput | SoftwareInstallWhereInput[]
    hardwareItemId?: StringFilter<"SoftwareInstall"> | string
    softwareId?: StringFilter<"SoftwareInstall"> | string
    licenseId?: StringNullableFilter<"SoftwareInstall"> | string | null
    installedAt?: DateTimeFilter<"SoftwareInstall"> | Date | string
    uninstalledAt?: DateTimeNullableFilter<"SoftwareInstall"> | Date | string | null
    hardwareItem?: XOR<HardwareItemRelationFilter, HardwareItemWhereInput>
    software?: XOR<SoftwareRelationFilter, SoftwareWhereInput>
    license?: XOR<LicenseNullableRelationFilter, LicenseWhereInput> | null
  }, "id">

  export type SoftwareInstallOrderByWithAggregationInput = {
    id?: SortOrder
    hardwareItemId?: SortOrder
    softwareId?: SortOrder
    licenseId?: SortOrderInput | SortOrder
    installedAt?: SortOrder
    uninstalledAt?: SortOrderInput | SortOrder
    _count?: SoftwareInstallCountOrderByAggregateInput
    _max?: SoftwareInstallMaxOrderByAggregateInput
    _min?: SoftwareInstallMinOrderByAggregateInput
  }

  export type SoftwareInstallScalarWhereWithAggregatesInput = {
    AND?: SoftwareInstallScalarWhereWithAggregatesInput | SoftwareInstallScalarWhereWithAggregatesInput[]
    OR?: SoftwareInstallScalarWhereWithAggregatesInput[]
    NOT?: SoftwareInstallScalarWhereWithAggregatesInput | SoftwareInstallScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SoftwareInstall"> | string
    hardwareItemId?: StringWithAggregatesFilter<"SoftwareInstall"> | string
    softwareId?: StringWithAggregatesFilter<"SoftwareInstall"> | string
    licenseId?: StringNullableWithAggregatesFilter<"SoftwareInstall"> | string | null
    installedAt?: DateTimeWithAggregatesFilter<"SoftwareInstall"> | Date | string
    uninstalledAt?: DateTimeNullableWithAggregatesFilter<"SoftwareInstall"> | Date | string | null
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringFilter<"AuditLog"> | string
    entityType?: StringFilter<"AuditLog"> | string
    entityId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    hardwareItem?: XOR<HardwareItemNullableRelationFilter, HardwareItemWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    action?: SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    user?: UserOrderByWithRelationInput
    hardwareItem?: HardwareItemOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    userId?: StringFilter<"AuditLog"> | string
    entityType?: StringFilter<"AuditLog"> | string
    entityId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    hardwareItem?: XOR<HardwareItemNullableRelationFilter, HardwareItemWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    action?: SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    userId?: StringWithAggregatesFilter<"AuditLog"> | string
    entityType?: StringWithAggregatesFilter<"AuditLog"> | string
    entityId?: StringWithAggregatesFilter<"AuditLog"> | string
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    oldValues?: JsonNullableWithAggregatesFilter<"AuditLog">
    newValues?: JsonNullableWithAggregatesFilter<"AuditLog">
    timestamp?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    hardwareItems?: HardwareItemCreateNestedManyWithoutResponsibleUserInput
    allocations?: AllocationCreateNestedManyWithoutAssignedToUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    hardwareItems?: HardwareItemUncheckedCreateNestedManyWithoutResponsibleUserInput
    allocations?: AllocationUncheckedCreateNestedManyWithoutAssignedToUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hardwareItems?: HardwareItemUpdateManyWithoutResponsibleUserNestedInput
    allocations?: AllocationUpdateManyWithoutAssignedToUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hardwareItems?: HardwareItemUncheckedUpdateManyWithoutResponsibleUserNestedInput
    allocations?: AllocationUncheckedUpdateManyWithoutAssignedToUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentCreateInput = {
    id?: string
    name: string
    description?: string | null
    hardwareItems?: HardwareItemCreateNestedManyWithoutDepartmentInput
    allocations?: AllocationCreateNestedManyWithoutAssignedToDepartmentInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    hardwareItems?: HardwareItemUncheckedCreateNestedManyWithoutDepartmentInput
    allocations?: AllocationUncheckedCreateNestedManyWithoutAssignedToDepartmentInput
  }

  export type DepartmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    hardwareItems?: HardwareItemUpdateManyWithoutDepartmentNestedInput
    allocations?: AllocationUpdateManyWithoutAssignedToDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    hardwareItems?: HardwareItemUncheckedUpdateManyWithoutDepartmentNestedInput
    allocations?: AllocationUncheckedUpdateManyWithoutAssignedToDepartmentNestedInput
  }

  export type DepartmentCreateManyInput = {
    id?: string
    name: string
    description?: string | null
  }

  export type DepartmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VendorCreateInput = {
    id?: string
    name: string
    type: $Enums.VendorType
    cnpj?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    address?: string | null
    notes?: string | null
    hardwareItems?: HardwareItemCreateNestedManyWithoutVendorInput
    licenses?: LicenseCreateNestedManyWithoutVendorInput
    software?: SoftwareCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateInput = {
    id?: string
    name: string
    type: $Enums.VendorType
    cnpj?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    address?: string | null
    notes?: string | null
    hardwareItems?: HardwareItemUncheckedCreateNestedManyWithoutVendorInput
    licenses?: LicenseUncheckedCreateNestedManyWithoutVendorInput
    software?: SoftwareUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumVendorTypeFieldUpdateOperationsInput | $Enums.VendorType
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hardwareItems?: HardwareItemUpdateManyWithoutVendorNestedInput
    licenses?: LicenseUpdateManyWithoutVendorNestedInput
    software?: SoftwareUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumVendorTypeFieldUpdateOperationsInput | $Enums.VendorType
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hardwareItems?: HardwareItemUncheckedUpdateManyWithoutVendorNestedInput
    licenses?: LicenseUncheckedUpdateManyWithoutVendorNestedInput
    software?: SoftwareUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type VendorCreateManyInput = {
    id?: string
    name: string
    type: $Enums.VendorType
    cnpj?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    address?: string | null
    notes?: string | null
  }

  export type VendorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumVendorTypeFieldUpdateOperationsInput | $Enums.VendorType
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VendorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumVendorTypeFieldUpdateOperationsInput | $Enums.VendorType
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SoftwareCreateInput = {
    id?: string
    name: string
    version?: string | null
    category?: string | null
    notes?: string | null
    vendor?: VendorCreateNestedOneWithoutSoftwareInput
    licenses?: LicenseCreateNestedManyWithoutSoftwareInput
    softwareInstalls?: SoftwareInstallCreateNestedManyWithoutSoftwareInput
  }

  export type SoftwareUncheckedCreateInput = {
    id?: string
    name: string
    version?: string | null
    category?: string | null
    notes?: string | null
    vendorId?: string | null
    licenses?: LicenseUncheckedCreateNestedManyWithoutSoftwareInput
    softwareInstalls?: SoftwareInstallUncheckedCreateNestedManyWithoutSoftwareInput
  }

  export type SoftwareUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    vendor?: VendorUpdateOneWithoutSoftwareNestedInput
    licenses?: LicenseUpdateManyWithoutSoftwareNestedInput
    softwareInstalls?: SoftwareInstallUpdateManyWithoutSoftwareNestedInput
  }

  export type SoftwareUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    licenses?: LicenseUncheckedUpdateManyWithoutSoftwareNestedInput
    softwareInstalls?: SoftwareInstallUncheckedUpdateManyWithoutSoftwareNestedInput
  }

  export type SoftwareCreateManyInput = {
    id?: string
    name: string
    version?: string | null
    category?: string | null
    notes?: string | null
    vendorId?: string | null
  }

  export type SoftwareUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SoftwareUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LicenseCreateInput = {
    id?: string
    key: string
    seatsTotal: number
    seatsInUse?: number
    purchaseDate?: Date | string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    renewalType?: $Enums.RenewalType
    cost?: number | null
    notes?: string | null
    software: SoftwareCreateNestedOneWithoutLicensesInput
    vendor?: VendorCreateNestedOneWithoutLicensesInput
    softwareInstalls?: SoftwareInstallCreateNestedManyWithoutLicenseInput
  }

  export type LicenseUncheckedCreateInput = {
    id?: string
    softwareId: string
    key: string
    seatsTotal: number
    seatsInUse?: number
    purchaseDate?: Date | string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    renewalType?: $Enums.RenewalType
    cost?: number | null
    vendorId?: string | null
    notes?: string | null
    softwareInstalls?: SoftwareInstallUncheckedCreateNestedManyWithoutLicenseInput
  }

  export type LicenseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    seatsTotal?: IntFieldUpdateOperationsInput | number
    seatsInUse?: IntFieldUpdateOperationsInput | number
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    renewalType?: EnumRenewalTypeFieldUpdateOperationsInput | $Enums.RenewalType
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    software?: SoftwareUpdateOneRequiredWithoutLicensesNestedInput
    vendor?: VendorUpdateOneWithoutLicensesNestedInput
    softwareInstalls?: SoftwareInstallUpdateManyWithoutLicenseNestedInput
  }

  export type LicenseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    seatsTotal?: IntFieldUpdateOperationsInput | number
    seatsInUse?: IntFieldUpdateOperationsInput | number
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    renewalType?: EnumRenewalTypeFieldUpdateOperationsInput | $Enums.RenewalType
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    softwareInstalls?: SoftwareInstallUncheckedUpdateManyWithoutLicenseNestedInput
  }

  export type LicenseCreateManyInput = {
    id?: string
    softwareId: string
    key: string
    seatsTotal: number
    seatsInUse?: number
    purchaseDate?: Date | string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    renewalType?: $Enums.RenewalType
    cost?: number | null
    vendorId?: string | null
    notes?: string | null
  }

  export type LicenseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    seatsTotal?: IntFieldUpdateOperationsInput | number
    seatsInUse?: IntFieldUpdateOperationsInput | number
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    renewalType?: EnumRenewalTypeFieldUpdateOperationsInput | $Enums.RenewalType
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LicenseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    seatsTotal?: IntFieldUpdateOperationsInput | number
    seatsInUse?: IntFieldUpdateOperationsInput | number
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    renewalType?: EnumRenewalTypeFieldUpdateOperationsInput | $Enums.RenewalType
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HardwareItemCreateInput = {
    id?: string
    assetTag: string
    type: $Enums.HardwareType
    brand?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    purchaseCost?: number | null
    warrantyEndDate?: Date | string | null
    status?: $Enums.HardwareStatus
    condition?: $Enums.HardwareCondition
    location?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutHardwareItemsInput
    responsibleUser?: UserCreateNestedOneWithoutHardwareItemsInput
    department?: DepartmentCreateNestedOneWithoutHardwareItemsInput
    attachments?: AttachmentCreateNestedManyWithoutHardwareItemInput
    maintenances?: MaintenanceCreateNestedManyWithoutHardwareItemInput
    allocations?: AllocationCreateNestedManyWithoutHardwareItemInput
    softwareInstalls?: SoftwareInstallCreateNestedManyWithoutHardwareItemInput
    auditLogs?: AuditLogCreateNestedManyWithoutHardwareItemInput
  }

  export type HardwareItemUncheckedCreateInput = {
    id?: string
    assetTag: string
    type: $Enums.HardwareType
    brand?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    purchaseCost?: number | null
    vendorId?: string | null
    warrantyEndDate?: Date | string | null
    status?: $Enums.HardwareStatus
    condition?: $Enums.HardwareCondition
    location?: string | null
    responsibleUserId?: string | null
    departmentId?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attachments?: AttachmentUncheckedCreateNestedManyWithoutHardwareItemInput
    maintenances?: MaintenanceUncheckedCreateNestedManyWithoutHardwareItemInput
    allocations?: AllocationUncheckedCreateNestedManyWithoutHardwareItemInput
    softwareInstalls?: SoftwareInstallUncheckedCreateNestedManyWithoutHardwareItemInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutHardwareItemInput
  }

  export type HardwareItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypeFieldUpdateOperationsInput | $Enums.HardwareType
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    warrantyEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHardwareStatusFieldUpdateOperationsInput | $Enums.HardwareStatus
    condition?: EnumHardwareConditionFieldUpdateOperationsInput | $Enums.HardwareCondition
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutHardwareItemsNestedInput
    responsibleUser?: UserUpdateOneWithoutHardwareItemsNestedInput
    department?: DepartmentUpdateOneWithoutHardwareItemsNestedInput
    attachments?: AttachmentUpdateManyWithoutHardwareItemNestedInput
    maintenances?: MaintenanceUpdateManyWithoutHardwareItemNestedInput
    allocations?: AllocationUpdateManyWithoutHardwareItemNestedInput
    softwareInstalls?: SoftwareInstallUpdateManyWithoutHardwareItemNestedInput
    auditLogs?: AuditLogUpdateManyWithoutHardwareItemNestedInput
  }

  export type HardwareItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypeFieldUpdateOperationsInput | $Enums.HardwareType
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    warrantyEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHardwareStatusFieldUpdateOperationsInput | $Enums.HardwareStatus
    condition?: EnumHardwareConditionFieldUpdateOperationsInput | $Enums.HardwareCondition
    location?: NullableStringFieldUpdateOperationsInput | string | null
    responsibleUserId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attachments?: AttachmentUncheckedUpdateManyWithoutHardwareItemNestedInput
    maintenances?: MaintenanceUncheckedUpdateManyWithoutHardwareItemNestedInput
    allocations?: AllocationUncheckedUpdateManyWithoutHardwareItemNestedInput
    softwareInstalls?: SoftwareInstallUncheckedUpdateManyWithoutHardwareItemNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutHardwareItemNestedInput
  }

  export type HardwareItemCreateManyInput = {
    id?: string
    assetTag: string
    type: $Enums.HardwareType
    brand?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    purchaseCost?: number | null
    vendorId?: string | null
    warrantyEndDate?: Date | string | null
    status?: $Enums.HardwareStatus
    condition?: $Enums.HardwareCondition
    location?: string | null
    responsibleUserId?: string | null
    departmentId?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HardwareItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypeFieldUpdateOperationsInput | $Enums.HardwareType
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    warrantyEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHardwareStatusFieldUpdateOperationsInput | $Enums.HardwareStatus
    condition?: EnumHardwareConditionFieldUpdateOperationsInput | $Enums.HardwareCondition
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HardwareItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypeFieldUpdateOperationsInput | $Enums.HardwareType
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    warrantyEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHardwareStatusFieldUpdateOperationsInput | $Enums.HardwareStatus
    condition?: EnumHardwareConditionFieldUpdateOperationsInput | $Enums.HardwareCondition
    location?: NullableStringFieldUpdateOperationsInput | string | null
    responsibleUserId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttachmentCreateInput = {
    id?: string
    entityType: $Enums.EntityType
    fileUrl: string
    fileName: string
    mimeType: string
    uploadedAt?: Date | string
    hardwareItem?: HardwareItemCreateNestedOneWithoutAttachmentsInput
  }

  export type AttachmentUncheckedCreateInput = {
    id?: string
    entityType: $Enums.EntityType
    entityId: string
    fileUrl: string
    fileName: string
    mimeType: string
    uploadedAt?: Date | string
  }

  export type AttachmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hardwareItem?: HardwareItemUpdateOneWithoutAttachmentsNestedInput
  }

  export type AttachmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    entityId?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttachmentCreateManyInput = {
    id?: string
    entityType: $Enums.EntityType
    entityId: string
    fileUrl: string
    fileName: string
    mimeType: string
    uploadedAt?: Date | string
  }

  export type AttachmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttachmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    entityId?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceCreateInput = {
    id?: string
    startDate: Date | string
    endDate?: Date | string | null
    provider: string
    description: string
    cost?: number | null
    status?: $Enums.MaintenanceStatus
    notes?: string | null
    hardwareItem: HardwareItemCreateNestedOneWithoutMaintenancesInput
  }

  export type MaintenanceUncheckedCreateInput = {
    id?: string
    hardwareItemId: string
    startDate: Date | string
    endDate?: Date | string | null
    provider: string
    description: string
    cost?: number | null
    status?: $Enums.MaintenanceStatus
    notes?: string | null
  }

  export type MaintenanceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hardwareItem?: HardwareItemUpdateOneRequiredWithoutMaintenancesNestedInput
  }

  export type MaintenanceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hardwareItemId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MaintenanceCreateManyInput = {
    id?: string
    hardwareItemId: string
    startDate: Date | string
    endDate?: Date | string | null
    provider: string
    description: string
    cost?: number | null
    status?: $Enums.MaintenanceStatus
    notes?: string | null
  }

  export type MaintenanceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MaintenanceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    hardwareItemId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AllocationCreateInput = {
    id?: string
    checkoutDate?: Date | string
    expectedReturnDate?: Date | string | null
    returnDate?: Date | string | null
    notes?: string | null
    hardwareItem: HardwareItemCreateNestedOneWithoutAllocationsInput
    assignedToUser?: UserCreateNestedOneWithoutAllocationsInput
    assignedToDepartment?: DepartmentCreateNestedOneWithoutAllocationsInput
  }

  export type AllocationUncheckedCreateInput = {
    id?: string
    hardwareItemId: string
    assignedToUserId?: string | null
    assignedToDepartmentId?: string | null
    checkoutDate?: Date | string
    expectedReturnDate?: Date | string | null
    returnDate?: Date | string | null
    notes?: string | null
  }

  export type AllocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    checkoutDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    returnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hardwareItem?: HardwareItemUpdateOneRequiredWithoutAllocationsNestedInput
    assignedToUser?: UserUpdateOneWithoutAllocationsNestedInput
    assignedToDepartment?: DepartmentUpdateOneWithoutAllocationsNestedInput
  }

  export type AllocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hardwareItemId?: StringFieldUpdateOperationsInput | string
    assignedToUserId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToDepartmentId?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    returnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AllocationCreateManyInput = {
    id?: string
    hardwareItemId: string
    assignedToUserId?: string | null
    assignedToDepartmentId?: string | null
    checkoutDate?: Date | string
    expectedReturnDate?: Date | string | null
    returnDate?: Date | string | null
    notes?: string | null
  }

  export type AllocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    checkoutDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    returnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AllocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    hardwareItemId?: StringFieldUpdateOperationsInput | string
    assignedToUserId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToDepartmentId?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    returnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SoftwareInstallCreateInput = {
    id?: string
    installedAt?: Date | string
    uninstalledAt?: Date | string | null
    hardwareItem: HardwareItemCreateNestedOneWithoutSoftwareInstallsInput
    software: SoftwareCreateNestedOneWithoutSoftwareInstallsInput
    license?: LicenseCreateNestedOneWithoutSoftwareInstallsInput
  }

  export type SoftwareInstallUncheckedCreateInput = {
    id?: string
    hardwareItemId: string
    softwareId: string
    licenseId?: string | null
    installedAt?: Date | string
    uninstalledAt?: Date | string | null
  }

  export type SoftwareInstallUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    installedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uninstalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hardwareItem?: HardwareItemUpdateOneRequiredWithoutSoftwareInstallsNestedInput
    software?: SoftwareUpdateOneRequiredWithoutSoftwareInstallsNestedInput
    license?: LicenseUpdateOneWithoutSoftwareInstallsNestedInput
  }

  export type SoftwareInstallUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hardwareItemId?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    licenseId?: NullableStringFieldUpdateOperationsInput | string | null
    installedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uninstalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SoftwareInstallCreateManyInput = {
    id?: string
    hardwareItemId: string
    softwareId: string
    licenseId?: string | null
    installedAt?: Date | string
    uninstalledAt?: Date | string | null
  }

  export type SoftwareInstallUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    installedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uninstalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SoftwareInstallUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    hardwareItemId?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    licenseId?: NullableStringFieldUpdateOperationsInput | string | null
    installedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uninstalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuditLogCreateInput = {
    id?: string
    entityType: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutAuditLogsInput
    hardwareItem?: HardwareItemCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    userId: string
    entityType: string
    entityId: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
    hardwareItem?: HardwareItemUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    userId: string
    entityType: string
    entityId: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type HardwareItemListRelationFilter = {
    every?: HardwareItemWhereInput
    some?: HardwareItemWhereInput
    none?: HardwareItemWhereInput
  }

  export type AllocationListRelationFilter = {
    every?: AllocationWhereInput
    some?: AllocationWhereInput
    none?: AllocationWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type HardwareItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AllocationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumVendorTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.VendorType | EnumVendorTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VendorType[]
    notIn?: $Enums.VendorType[]
    not?: NestedEnumVendorTypeFilter<$PrismaModel> | $Enums.VendorType
  }

  export type LicenseListRelationFilter = {
    every?: LicenseWhereInput
    some?: LicenseWhereInput
    none?: LicenseWhereInput
  }

  export type SoftwareListRelationFilter = {
    every?: SoftwareWhereInput
    some?: SoftwareWhereInput
    none?: SoftwareWhereInput
  }

  export type LicenseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SoftwareOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VendorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    cnpj?: SortOrder
    contactEmail?: SortOrder
    contactPhone?: SortOrder
    address?: SortOrder
    notes?: SortOrder
  }

  export type VendorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    cnpj?: SortOrder
    contactEmail?: SortOrder
    contactPhone?: SortOrder
    address?: SortOrder
    notes?: SortOrder
  }

  export type VendorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    cnpj?: SortOrder
    contactEmail?: SortOrder
    contactPhone?: SortOrder
    address?: SortOrder
    notes?: SortOrder
  }

  export type EnumVendorTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VendorType | EnumVendorTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VendorType[]
    notIn?: $Enums.VendorType[]
    not?: NestedEnumVendorTypeWithAggregatesFilter<$PrismaModel> | $Enums.VendorType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVendorTypeFilter<$PrismaModel>
    _max?: NestedEnumVendorTypeFilter<$PrismaModel>
  }

  export type VendorNullableRelationFilter = {
    is?: VendorWhereInput | null
    isNot?: VendorWhereInput | null
  }

  export type SoftwareInstallListRelationFilter = {
    every?: SoftwareInstallWhereInput
    some?: SoftwareInstallWhereInput
    none?: SoftwareInstallWhereInput
  }

  export type SoftwareInstallOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SoftwareCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    version?: SortOrder
    category?: SortOrder
    notes?: SortOrder
    vendorId?: SortOrder
  }

  export type SoftwareMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    version?: SortOrder
    category?: SortOrder
    notes?: SortOrder
    vendorId?: SortOrder
  }

  export type SoftwareMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    version?: SortOrder
    category?: SortOrder
    notes?: SortOrder
    vendorId?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumRenewalTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RenewalType | EnumRenewalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RenewalType[]
    notIn?: $Enums.RenewalType[]
    not?: NestedEnumRenewalTypeFilter<$PrismaModel> | $Enums.RenewalType
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type SoftwareRelationFilter = {
    is?: SoftwareWhereInput
    isNot?: SoftwareWhereInput
  }

  export type LicenseCountOrderByAggregateInput = {
    id?: SortOrder
    softwareId?: SortOrder
    key?: SortOrder
    seatsTotal?: SortOrder
    seatsInUse?: SortOrder
    purchaseDate?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    renewalType?: SortOrder
    cost?: SortOrder
    vendorId?: SortOrder
    notes?: SortOrder
  }

  export type LicenseAvgOrderByAggregateInput = {
    seatsTotal?: SortOrder
    seatsInUse?: SortOrder
    cost?: SortOrder
  }

  export type LicenseMaxOrderByAggregateInput = {
    id?: SortOrder
    softwareId?: SortOrder
    key?: SortOrder
    seatsTotal?: SortOrder
    seatsInUse?: SortOrder
    purchaseDate?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    renewalType?: SortOrder
    cost?: SortOrder
    vendorId?: SortOrder
    notes?: SortOrder
  }

  export type LicenseMinOrderByAggregateInput = {
    id?: SortOrder
    softwareId?: SortOrder
    key?: SortOrder
    seatsTotal?: SortOrder
    seatsInUse?: SortOrder
    purchaseDate?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    renewalType?: SortOrder
    cost?: SortOrder
    vendorId?: SortOrder
    notes?: SortOrder
  }

  export type LicenseSumOrderByAggregateInput = {
    seatsTotal?: SortOrder
    seatsInUse?: SortOrder
    cost?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumRenewalTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RenewalType | EnumRenewalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RenewalType[]
    notIn?: $Enums.RenewalType[]
    not?: NestedEnumRenewalTypeWithAggregatesFilter<$PrismaModel> | $Enums.RenewalType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRenewalTypeFilter<$PrismaModel>
    _max?: NestedEnumRenewalTypeFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumHardwareTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.HardwareType | EnumHardwareTypeFieldRefInput<$PrismaModel>
    in?: $Enums.HardwareType[]
    notIn?: $Enums.HardwareType[]
    not?: NestedEnumHardwareTypeFilter<$PrismaModel> | $Enums.HardwareType
  }

  export type EnumHardwareStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.HardwareStatus | EnumHardwareStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HardwareStatus[]
    notIn?: $Enums.HardwareStatus[]
    not?: NestedEnumHardwareStatusFilter<$PrismaModel> | $Enums.HardwareStatus
  }

  export type EnumHardwareConditionFilter<$PrismaModel = never> = {
    equals?: $Enums.HardwareCondition | EnumHardwareConditionFieldRefInput<$PrismaModel>
    in?: $Enums.HardwareCondition[]
    notIn?: $Enums.HardwareCondition[]
    not?: NestedEnumHardwareConditionFilter<$PrismaModel> | $Enums.HardwareCondition
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type DepartmentNullableRelationFilter = {
    is?: DepartmentWhereInput | null
    isNot?: DepartmentWhereInput | null
  }

  export type AttachmentListRelationFilter = {
    every?: AttachmentWhereInput
    some?: AttachmentWhereInput
    none?: AttachmentWhereInput
  }

  export type MaintenanceListRelationFilter = {
    every?: MaintenanceWhereInput
    some?: MaintenanceWhereInput
    none?: MaintenanceWhereInput
  }

  export type AttachmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MaintenanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HardwareItemCountOrderByAggregateInput = {
    id?: SortOrder
    assetTag?: SortOrder
    type?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    serialNumber?: SortOrder
    purchaseDate?: SortOrder
    purchaseCost?: SortOrder
    vendorId?: SortOrder
    warrantyEndDate?: SortOrder
    status?: SortOrder
    condition?: SortOrder
    location?: SortOrder
    responsibleUserId?: SortOrder
    departmentId?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HardwareItemAvgOrderByAggregateInput = {
    purchaseCost?: SortOrder
  }

  export type HardwareItemMaxOrderByAggregateInput = {
    id?: SortOrder
    assetTag?: SortOrder
    type?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    serialNumber?: SortOrder
    purchaseDate?: SortOrder
    purchaseCost?: SortOrder
    vendorId?: SortOrder
    warrantyEndDate?: SortOrder
    status?: SortOrder
    condition?: SortOrder
    location?: SortOrder
    responsibleUserId?: SortOrder
    departmentId?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HardwareItemMinOrderByAggregateInput = {
    id?: SortOrder
    assetTag?: SortOrder
    type?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    serialNumber?: SortOrder
    purchaseDate?: SortOrder
    purchaseCost?: SortOrder
    vendorId?: SortOrder
    warrantyEndDate?: SortOrder
    status?: SortOrder
    condition?: SortOrder
    location?: SortOrder
    responsibleUserId?: SortOrder
    departmentId?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HardwareItemSumOrderByAggregateInput = {
    purchaseCost?: SortOrder
  }

  export type EnumHardwareTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HardwareType | EnumHardwareTypeFieldRefInput<$PrismaModel>
    in?: $Enums.HardwareType[]
    notIn?: $Enums.HardwareType[]
    not?: NestedEnumHardwareTypeWithAggregatesFilter<$PrismaModel> | $Enums.HardwareType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHardwareTypeFilter<$PrismaModel>
    _max?: NestedEnumHardwareTypeFilter<$PrismaModel>
  }

  export type EnumHardwareStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HardwareStatus | EnumHardwareStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HardwareStatus[]
    notIn?: $Enums.HardwareStatus[]
    not?: NestedEnumHardwareStatusWithAggregatesFilter<$PrismaModel> | $Enums.HardwareStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHardwareStatusFilter<$PrismaModel>
    _max?: NestedEnumHardwareStatusFilter<$PrismaModel>
  }

  export type EnumHardwareConditionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HardwareCondition | EnumHardwareConditionFieldRefInput<$PrismaModel>
    in?: $Enums.HardwareCondition[]
    notIn?: $Enums.HardwareCondition[]
    not?: NestedEnumHardwareConditionWithAggregatesFilter<$PrismaModel> | $Enums.HardwareCondition
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHardwareConditionFilter<$PrismaModel>
    _max?: NestedEnumHardwareConditionFilter<$PrismaModel>
  }

  export type EnumEntityTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EntityType | EnumEntityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EntityType[]
    notIn?: $Enums.EntityType[]
    not?: NestedEnumEntityTypeFilter<$PrismaModel> | $Enums.EntityType
  }

  export type HardwareItemNullableRelationFilter = {
    is?: HardwareItemWhereInput | null
    isNot?: HardwareItemWhereInput | null
  }

  export type AttachmentCountOrderByAggregateInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    fileUrl?: SortOrder
    fileName?: SortOrder
    mimeType?: SortOrder
    uploadedAt?: SortOrder
  }

  export type AttachmentMaxOrderByAggregateInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    fileUrl?: SortOrder
    fileName?: SortOrder
    mimeType?: SortOrder
    uploadedAt?: SortOrder
  }

  export type AttachmentMinOrderByAggregateInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    fileUrl?: SortOrder
    fileName?: SortOrder
    mimeType?: SortOrder
    uploadedAt?: SortOrder
  }

  export type EnumEntityTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EntityType | EnumEntityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EntityType[]
    notIn?: $Enums.EntityType[]
    not?: NestedEnumEntityTypeWithAggregatesFilter<$PrismaModel> | $Enums.EntityType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEntityTypeFilter<$PrismaModel>
    _max?: NestedEnumEntityTypeFilter<$PrismaModel>
  }

  export type EnumMaintenanceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceStatus | EnumMaintenanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MaintenanceStatus[]
    notIn?: $Enums.MaintenanceStatus[]
    not?: NestedEnumMaintenanceStatusFilter<$PrismaModel> | $Enums.MaintenanceStatus
  }

  export type HardwareItemRelationFilter = {
    is?: HardwareItemWhereInput
    isNot?: HardwareItemWhereInput
  }

  export type MaintenanceCountOrderByAggregateInput = {
    id?: SortOrder
    hardwareItemId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    provider?: SortOrder
    description?: SortOrder
    cost?: SortOrder
    status?: SortOrder
    notes?: SortOrder
  }

  export type MaintenanceAvgOrderByAggregateInput = {
    cost?: SortOrder
  }

  export type MaintenanceMaxOrderByAggregateInput = {
    id?: SortOrder
    hardwareItemId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    provider?: SortOrder
    description?: SortOrder
    cost?: SortOrder
    status?: SortOrder
    notes?: SortOrder
  }

  export type MaintenanceMinOrderByAggregateInput = {
    id?: SortOrder
    hardwareItemId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    provider?: SortOrder
    description?: SortOrder
    cost?: SortOrder
    status?: SortOrder
    notes?: SortOrder
  }

  export type MaintenanceSumOrderByAggregateInput = {
    cost?: SortOrder
  }

  export type EnumMaintenanceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceStatus | EnumMaintenanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MaintenanceStatus[]
    notIn?: $Enums.MaintenanceStatus[]
    not?: NestedEnumMaintenanceStatusWithAggregatesFilter<$PrismaModel> | $Enums.MaintenanceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMaintenanceStatusFilter<$PrismaModel>
    _max?: NestedEnumMaintenanceStatusFilter<$PrismaModel>
  }

  export type AllocationCountOrderByAggregateInput = {
    id?: SortOrder
    hardwareItemId?: SortOrder
    assignedToUserId?: SortOrder
    assignedToDepartmentId?: SortOrder
    checkoutDate?: SortOrder
    expectedReturnDate?: SortOrder
    returnDate?: SortOrder
    notes?: SortOrder
  }

  export type AllocationMaxOrderByAggregateInput = {
    id?: SortOrder
    hardwareItemId?: SortOrder
    assignedToUserId?: SortOrder
    assignedToDepartmentId?: SortOrder
    checkoutDate?: SortOrder
    expectedReturnDate?: SortOrder
    returnDate?: SortOrder
    notes?: SortOrder
  }

  export type AllocationMinOrderByAggregateInput = {
    id?: SortOrder
    hardwareItemId?: SortOrder
    assignedToUserId?: SortOrder
    assignedToDepartmentId?: SortOrder
    checkoutDate?: SortOrder
    expectedReturnDate?: SortOrder
    returnDate?: SortOrder
    notes?: SortOrder
  }

  export type LicenseNullableRelationFilter = {
    is?: LicenseWhereInput | null
    isNot?: LicenseWhereInput | null
  }

  export type SoftwareInstallCountOrderByAggregateInput = {
    id?: SortOrder
    hardwareItemId?: SortOrder
    softwareId?: SortOrder
    licenseId?: SortOrder
    installedAt?: SortOrder
    uninstalledAt?: SortOrder
  }

  export type SoftwareInstallMaxOrderByAggregateInput = {
    id?: SortOrder
    hardwareItemId?: SortOrder
    softwareId?: SortOrder
    licenseId?: SortOrder
    installedAt?: SortOrder
    uninstalledAt?: SortOrder
  }

  export type SoftwareInstallMinOrderByAggregateInput = {
    id?: SortOrder
    hardwareItemId?: SortOrder
    softwareId?: SortOrder
    licenseId?: SortOrder
    installedAt?: SortOrder
    uninstalledAt?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    action?: SortOrder
    oldValues?: SortOrder
    newValues?: SortOrder
    timestamp?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    action?: SortOrder
    timestamp?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    action?: SortOrder
    timestamp?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type HardwareItemCreateNestedManyWithoutResponsibleUserInput = {
    create?: XOR<HardwareItemCreateWithoutResponsibleUserInput, HardwareItemUncheckedCreateWithoutResponsibleUserInput> | HardwareItemCreateWithoutResponsibleUserInput[] | HardwareItemUncheckedCreateWithoutResponsibleUserInput[]
    connectOrCreate?: HardwareItemCreateOrConnectWithoutResponsibleUserInput | HardwareItemCreateOrConnectWithoutResponsibleUserInput[]
    createMany?: HardwareItemCreateManyResponsibleUserInputEnvelope
    connect?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
  }

  export type AllocationCreateNestedManyWithoutAssignedToUserInput = {
    create?: XOR<AllocationCreateWithoutAssignedToUserInput, AllocationUncheckedCreateWithoutAssignedToUserInput> | AllocationCreateWithoutAssignedToUserInput[] | AllocationUncheckedCreateWithoutAssignedToUserInput[]
    connectOrCreate?: AllocationCreateOrConnectWithoutAssignedToUserInput | AllocationCreateOrConnectWithoutAssignedToUserInput[]
    createMany?: AllocationCreateManyAssignedToUserInputEnvelope
    connect?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type HardwareItemUncheckedCreateNestedManyWithoutResponsibleUserInput = {
    create?: XOR<HardwareItemCreateWithoutResponsibleUserInput, HardwareItemUncheckedCreateWithoutResponsibleUserInput> | HardwareItemCreateWithoutResponsibleUserInput[] | HardwareItemUncheckedCreateWithoutResponsibleUserInput[]
    connectOrCreate?: HardwareItemCreateOrConnectWithoutResponsibleUserInput | HardwareItemCreateOrConnectWithoutResponsibleUserInput[]
    createMany?: HardwareItemCreateManyResponsibleUserInputEnvelope
    connect?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
  }

  export type AllocationUncheckedCreateNestedManyWithoutAssignedToUserInput = {
    create?: XOR<AllocationCreateWithoutAssignedToUserInput, AllocationUncheckedCreateWithoutAssignedToUserInput> | AllocationCreateWithoutAssignedToUserInput[] | AllocationUncheckedCreateWithoutAssignedToUserInput[]
    connectOrCreate?: AllocationCreateOrConnectWithoutAssignedToUserInput | AllocationCreateOrConnectWithoutAssignedToUserInput[]
    createMany?: AllocationCreateManyAssignedToUserInputEnvelope
    connect?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type HardwareItemUpdateManyWithoutResponsibleUserNestedInput = {
    create?: XOR<HardwareItemCreateWithoutResponsibleUserInput, HardwareItemUncheckedCreateWithoutResponsibleUserInput> | HardwareItemCreateWithoutResponsibleUserInput[] | HardwareItemUncheckedCreateWithoutResponsibleUserInput[]
    connectOrCreate?: HardwareItemCreateOrConnectWithoutResponsibleUserInput | HardwareItemCreateOrConnectWithoutResponsibleUserInput[]
    upsert?: HardwareItemUpsertWithWhereUniqueWithoutResponsibleUserInput | HardwareItemUpsertWithWhereUniqueWithoutResponsibleUserInput[]
    createMany?: HardwareItemCreateManyResponsibleUserInputEnvelope
    set?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
    disconnect?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
    delete?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
    connect?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
    update?: HardwareItemUpdateWithWhereUniqueWithoutResponsibleUserInput | HardwareItemUpdateWithWhereUniqueWithoutResponsibleUserInput[]
    updateMany?: HardwareItemUpdateManyWithWhereWithoutResponsibleUserInput | HardwareItemUpdateManyWithWhereWithoutResponsibleUserInput[]
    deleteMany?: HardwareItemScalarWhereInput | HardwareItemScalarWhereInput[]
  }

  export type AllocationUpdateManyWithoutAssignedToUserNestedInput = {
    create?: XOR<AllocationCreateWithoutAssignedToUserInput, AllocationUncheckedCreateWithoutAssignedToUserInput> | AllocationCreateWithoutAssignedToUserInput[] | AllocationUncheckedCreateWithoutAssignedToUserInput[]
    connectOrCreate?: AllocationCreateOrConnectWithoutAssignedToUserInput | AllocationCreateOrConnectWithoutAssignedToUserInput[]
    upsert?: AllocationUpsertWithWhereUniqueWithoutAssignedToUserInput | AllocationUpsertWithWhereUniqueWithoutAssignedToUserInput[]
    createMany?: AllocationCreateManyAssignedToUserInputEnvelope
    set?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    disconnect?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    delete?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    connect?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    update?: AllocationUpdateWithWhereUniqueWithoutAssignedToUserInput | AllocationUpdateWithWhereUniqueWithoutAssignedToUserInput[]
    updateMany?: AllocationUpdateManyWithWhereWithoutAssignedToUserInput | AllocationUpdateManyWithWhereWithoutAssignedToUserInput[]
    deleteMany?: AllocationScalarWhereInput | AllocationScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type HardwareItemUncheckedUpdateManyWithoutResponsibleUserNestedInput = {
    create?: XOR<HardwareItemCreateWithoutResponsibleUserInput, HardwareItemUncheckedCreateWithoutResponsibleUserInput> | HardwareItemCreateWithoutResponsibleUserInput[] | HardwareItemUncheckedCreateWithoutResponsibleUserInput[]
    connectOrCreate?: HardwareItemCreateOrConnectWithoutResponsibleUserInput | HardwareItemCreateOrConnectWithoutResponsibleUserInput[]
    upsert?: HardwareItemUpsertWithWhereUniqueWithoutResponsibleUserInput | HardwareItemUpsertWithWhereUniqueWithoutResponsibleUserInput[]
    createMany?: HardwareItemCreateManyResponsibleUserInputEnvelope
    set?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
    disconnect?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
    delete?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
    connect?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
    update?: HardwareItemUpdateWithWhereUniqueWithoutResponsibleUserInput | HardwareItemUpdateWithWhereUniqueWithoutResponsibleUserInput[]
    updateMany?: HardwareItemUpdateManyWithWhereWithoutResponsibleUserInput | HardwareItemUpdateManyWithWhereWithoutResponsibleUserInput[]
    deleteMany?: HardwareItemScalarWhereInput | HardwareItemScalarWhereInput[]
  }

  export type AllocationUncheckedUpdateManyWithoutAssignedToUserNestedInput = {
    create?: XOR<AllocationCreateWithoutAssignedToUserInput, AllocationUncheckedCreateWithoutAssignedToUserInput> | AllocationCreateWithoutAssignedToUserInput[] | AllocationUncheckedCreateWithoutAssignedToUserInput[]
    connectOrCreate?: AllocationCreateOrConnectWithoutAssignedToUserInput | AllocationCreateOrConnectWithoutAssignedToUserInput[]
    upsert?: AllocationUpsertWithWhereUniqueWithoutAssignedToUserInput | AllocationUpsertWithWhereUniqueWithoutAssignedToUserInput[]
    createMany?: AllocationCreateManyAssignedToUserInputEnvelope
    set?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    disconnect?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    delete?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    connect?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    update?: AllocationUpdateWithWhereUniqueWithoutAssignedToUserInput | AllocationUpdateWithWhereUniqueWithoutAssignedToUserInput[]
    updateMany?: AllocationUpdateManyWithWhereWithoutAssignedToUserInput | AllocationUpdateManyWithWhereWithoutAssignedToUserInput[]
    deleteMany?: AllocationScalarWhereInput | AllocationScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type HardwareItemCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<HardwareItemCreateWithoutDepartmentInput, HardwareItemUncheckedCreateWithoutDepartmentInput> | HardwareItemCreateWithoutDepartmentInput[] | HardwareItemUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: HardwareItemCreateOrConnectWithoutDepartmentInput | HardwareItemCreateOrConnectWithoutDepartmentInput[]
    createMany?: HardwareItemCreateManyDepartmentInputEnvelope
    connect?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
  }

  export type AllocationCreateNestedManyWithoutAssignedToDepartmentInput = {
    create?: XOR<AllocationCreateWithoutAssignedToDepartmentInput, AllocationUncheckedCreateWithoutAssignedToDepartmentInput> | AllocationCreateWithoutAssignedToDepartmentInput[] | AllocationUncheckedCreateWithoutAssignedToDepartmentInput[]
    connectOrCreate?: AllocationCreateOrConnectWithoutAssignedToDepartmentInput | AllocationCreateOrConnectWithoutAssignedToDepartmentInput[]
    createMany?: AllocationCreateManyAssignedToDepartmentInputEnvelope
    connect?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
  }

  export type HardwareItemUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<HardwareItemCreateWithoutDepartmentInput, HardwareItemUncheckedCreateWithoutDepartmentInput> | HardwareItemCreateWithoutDepartmentInput[] | HardwareItemUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: HardwareItemCreateOrConnectWithoutDepartmentInput | HardwareItemCreateOrConnectWithoutDepartmentInput[]
    createMany?: HardwareItemCreateManyDepartmentInputEnvelope
    connect?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
  }

  export type AllocationUncheckedCreateNestedManyWithoutAssignedToDepartmentInput = {
    create?: XOR<AllocationCreateWithoutAssignedToDepartmentInput, AllocationUncheckedCreateWithoutAssignedToDepartmentInput> | AllocationCreateWithoutAssignedToDepartmentInput[] | AllocationUncheckedCreateWithoutAssignedToDepartmentInput[]
    connectOrCreate?: AllocationCreateOrConnectWithoutAssignedToDepartmentInput | AllocationCreateOrConnectWithoutAssignedToDepartmentInput[]
    createMany?: AllocationCreateManyAssignedToDepartmentInputEnvelope
    connect?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type HardwareItemUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<HardwareItemCreateWithoutDepartmentInput, HardwareItemUncheckedCreateWithoutDepartmentInput> | HardwareItemCreateWithoutDepartmentInput[] | HardwareItemUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: HardwareItemCreateOrConnectWithoutDepartmentInput | HardwareItemCreateOrConnectWithoutDepartmentInput[]
    upsert?: HardwareItemUpsertWithWhereUniqueWithoutDepartmentInput | HardwareItemUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: HardwareItemCreateManyDepartmentInputEnvelope
    set?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
    disconnect?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
    delete?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
    connect?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
    update?: HardwareItemUpdateWithWhereUniqueWithoutDepartmentInput | HardwareItemUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: HardwareItemUpdateManyWithWhereWithoutDepartmentInput | HardwareItemUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: HardwareItemScalarWhereInput | HardwareItemScalarWhereInput[]
  }

  export type AllocationUpdateManyWithoutAssignedToDepartmentNestedInput = {
    create?: XOR<AllocationCreateWithoutAssignedToDepartmentInput, AllocationUncheckedCreateWithoutAssignedToDepartmentInput> | AllocationCreateWithoutAssignedToDepartmentInput[] | AllocationUncheckedCreateWithoutAssignedToDepartmentInput[]
    connectOrCreate?: AllocationCreateOrConnectWithoutAssignedToDepartmentInput | AllocationCreateOrConnectWithoutAssignedToDepartmentInput[]
    upsert?: AllocationUpsertWithWhereUniqueWithoutAssignedToDepartmentInput | AllocationUpsertWithWhereUniqueWithoutAssignedToDepartmentInput[]
    createMany?: AllocationCreateManyAssignedToDepartmentInputEnvelope
    set?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    disconnect?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    delete?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    connect?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    update?: AllocationUpdateWithWhereUniqueWithoutAssignedToDepartmentInput | AllocationUpdateWithWhereUniqueWithoutAssignedToDepartmentInput[]
    updateMany?: AllocationUpdateManyWithWhereWithoutAssignedToDepartmentInput | AllocationUpdateManyWithWhereWithoutAssignedToDepartmentInput[]
    deleteMany?: AllocationScalarWhereInput | AllocationScalarWhereInput[]
  }

  export type HardwareItemUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<HardwareItemCreateWithoutDepartmentInput, HardwareItemUncheckedCreateWithoutDepartmentInput> | HardwareItemCreateWithoutDepartmentInput[] | HardwareItemUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: HardwareItemCreateOrConnectWithoutDepartmentInput | HardwareItemCreateOrConnectWithoutDepartmentInput[]
    upsert?: HardwareItemUpsertWithWhereUniqueWithoutDepartmentInput | HardwareItemUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: HardwareItemCreateManyDepartmentInputEnvelope
    set?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
    disconnect?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
    delete?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
    connect?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
    update?: HardwareItemUpdateWithWhereUniqueWithoutDepartmentInput | HardwareItemUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: HardwareItemUpdateManyWithWhereWithoutDepartmentInput | HardwareItemUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: HardwareItemScalarWhereInput | HardwareItemScalarWhereInput[]
  }

  export type AllocationUncheckedUpdateManyWithoutAssignedToDepartmentNestedInput = {
    create?: XOR<AllocationCreateWithoutAssignedToDepartmentInput, AllocationUncheckedCreateWithoutAssignedToDepartmentInput> | AllocationCreateWithoutAssignedToDepartmentInput[] | AllocationUncheckedCreateWithoutAssignedToDepartmentInput[]
    connectOrCreate?: AllocationCreateOrConnectWithoutAssignedToDepartmentInput | AllocationCreateOrConnectWithoutAssignedToDepartmentInput[]
    upsert?: AllocationUpsertWithWhereUniqueWithoutAssignedToDepartmentInput | AllocationUpsertWithWhereUniqueWithoutAssignedToDepartmentInput[]
    createMany?: AllocationCreateManyAssignedToDepartmentInputEnvelope
    set?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    disconnect?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    delete?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    connect?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    update?: AllocationUpdateWithWhereUniqueWithoutAssignedToDepartmentInput | AllocationUpdateWithWhereUniqueWithoutAssignedToDepartmentInput[]
    updateMany?: AllocationUpdateManyWithWhereWithoutAssignedToDepartmentInput | AllocationUpdateManyWithWhereWithoutAssignedToDepartmentInput[]
    deleteMany?: AllocationScalarWhereInput | AllocationScalarWhereInput[]
  }

  export type HardwareItemCreateNestedManyWithoutVendorInput = {
    create?: XOR<HardwareItemCreateWithoutVendorInput, HardwareItemUncheckedCreateWithoutVendorInput> | HardwareItemCreateWithoutVendorInput[] | HardwareItemUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: HardwareItemCreateOrConnectWithoutVendorInput | HardwareItemCreateOrConnectWithoutVendorInput[]
    createMany?: HardwareItemCreateManyVendorInputEnvelope
    connect?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
  }

  export type LicenseCreateNestedManyWithoutVendorInput = {
    create?: XOR<LicenseCreateWithoutVendorInput, LicenseUncheckedCreateWithoutVendorInput> | LicenseCreateWithoutVendorInput[] | LicenseUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: LicenseCreateOrConnectWithoutVendorInput | LicenseCreateOrConnectWithoutVendorInput[]
    createMany?: LicenseCreateManyVendorInputEnvelope
    connect?: LicenseWhereUniqueInput | LicenseWhereUniqueInput[]
  }

  export type SoftwareCreateNestedManyWithoutVendorInput = {
    create?: XOR<SoftwareCreateWithoutVendorInput, SoftwareUncheckedCreateWithoutVendorInput> | SoftwareCreateWithoutVendorInput[] | SoftwareUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: SoftwareCreateOrConnectWithoutVendorInput | SoftwareCreateOrConnectWithoutVendorInput[]
    createMany?: SoftwareCreateManyVendorInputEnvelope
    connect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
  }

  export type HardwareItemUncheckedCreateNestedManyWithoutVendorInput = {
    create?: XOR<HardwareItemCreateWithoutVendorInput, HardwareItemUncheckedCreateWithoutVendorInput> | HardwareItemCreateWithoutVendorInput[] | HardwareItemUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: HardwareItemCreateOrConnectWithoutVendorInput | HardwareItemCreateOrConnectWithoutVendorInput[]
    createMany?: HardwareItemCreateManyVendorInputEnvelope
    connect?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
  }

  export type LicenseUncheckedCreateNestedManyWithoutVendorInput = {
    create?: XOR<LicenseCreateWithoutVendorInput, LicenseUncheckedCreateWithoutVendorInput> | LicenseCreateWithoutVendorInput[] | LicenseUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: LicenseCreateOrConnectWithoutVendorInput | LicenseCreateOrConnectWithoutVendorInput[]
    createMany?: LicenseCreateManyVendorInputEnvelope
    connect?: LicenseWhereUniqueInput | LicenseWhereUniqueInput[]
  }

  export type SoftwareUncheckedCreateNestedManyWithoutVendorInput = {
    create?: XOR<SoftwareCreateWithoutVendorInput, SoftwareUncheckedCreateWithoutVendorInput> | SoftwareCreateWithoutVendorInput[] | SoftwareUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: SoftwareCreateOrConnectWithoutVendorInput | SoftwareCreateOrConnectWithoutVendorInput[]
    createMany?: SoftwareCreateManyVendorInputEnvelope
    connect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
  }

  export type EnumVendorTypeFieldUpdateOperationsInput = {
    set?: $Enums.VendorType
  }

  export type HardwareItemUpdateManyWithoutVendorNestedInput = {
    create?: XOR<HardwareItemCreateWithoutVendorInput, HardwareItemUncheckedCreateWithoutVendorInput> | HardwareItemCreateWithoutVendorInput[] | HardwareItemUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: HardwareItemCreateOrConnectWithoutVendorInput | HardwareItemCreateOrConnectWithoutVendorInput[]
    upsert?: HardwareItemUpsertWithWhereUniqueWithoutVendorInput | HardwareItemUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: HardwareItemCreateManyVendorInputEnvelope
    set?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
    disconnect?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
    delete?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
    connect?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
    update?: HardwareItemUpdateWithWhereUniqueWithoutVendorInput | HardwareItemUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: HardwareItemUpdateManyWithWhereWithoutVendorInput | HardwareItemUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: HardwareItemScalarWhereInput | HardwareItemScalarWhereInput[]
  }

  export type LicenseUpdateManyWithoutVendorNestedInput = {
    create?: XOR<LicenseCreateWithoutVendorInput, LicenseUncheckedCreateWithoutVendorInput> | LicenseCreateWithoutVendorInput[] | LicenseUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: LicenseCreateOrConnectWithoutVendorInput | LicenseCreateOrConnectWithoutVendorInput[]
    upsert?: LicenseUpsertWithWhereUniqueWithoutVendorInput | LicenseUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: LicenseCreateManyVendorInputEnvelope
    set?: LicenseWhereUniqueInput | LicenseWhereUniqueInput[]
    disconnect?: LicenseWhereUniqueInput | LicenseWhereUniqueInput[]
    delete?: LicenseWhereUniqueInput | LicenseWhereUniqueInput[]
    connect?: LicenseWhereUniqueInput | LicenseWhereUniqueInput[]
    update?: LicenseUpdateWithWhereUniqueWithoutVendorInput | LicenseUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: LicenseUpdateManyWithWhereWithoutVendorInput | LicenseUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: LicenseScalarWhereInput | LicenseScalarWhereInput[]
  }

  export type SoftwareUpdateManyWithoutVendorNestedInput = {
    create?: XOR<SoftwareCreateWithoutVendorInput, SoftwareUncheckedCreateWithoutVendorInput> | SoftwareCreateWithoutVendorInput[] | SoftwareUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: SoftwareCreateOrConnectWithoutVendorInput | SoftwareCreateOrConnectWithoutVendorInput[]
    upsert?: SoftwareUpsertWithWhereUniqueWithoutVendorInput | SoftwareUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: SoftwareCreateManyVendorInputEnvelope
    set?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    disconnect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    delete?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    connect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    update?: SoftwareUpdateWithWhereUniqueWithoutVendorInput | SoftwareUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: SoftwareUpdateManyWithWhereWithoutVendorInput | SoftwareUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: SoftwareScalarWhereInput | SoftwareScalarWhereInput[]
  }

  export type HardwareItemUncheckedUpdateManyWithoutVendorNestedInput = {
    create?: XOR<HardwareItemCreateWithoutVendorInput, HardwareItemUncheckedCreateWithoutVendorInput> | HardwareItemCreateWithoutVendorInput[] | HardwareItemUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: HardwareItemCreateOrConnectWithoutVendorInput | HardwareItemCreateOrConnectWithoutVendorInput[]
    upsert?: HardwareItemUpsertWithWhereUniqueWithoutVendorInput | HardwareItemUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: HardwareItemCreateManyVendorInputEnvelope
    set?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
    disconnect?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
    delete?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
    connect?: HardwareItemWhereUniqueInput | HardwareItemWhereUniqueInput[]
    update?: HardwareItemUpdateWithWhereUniqueWithoutVendorInput | HardwareItemUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: HardwareItemUpdateManyWithWhereWithoutVendorInput | HardwareItemUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: HardwareItemScalarWhereInput | HardwareItemScalarWhereInput[]
  }

  export type LicenseUncheckedUpdateManyWithoutVendorNestedInput = {
    create?: XOR<LicenseCreateWithoutVendorInput, LicenseUncheckedCreateWithoutVendorInput> | LicenseCreateWithoutVendorInput[] | LicenseUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: LicenseCreateOrConnectWithoutVendorInput | LicenseCreateOrConnectWithoutVendorInput[]
    upsert?: LicenseUpsertWithWhereUniqueWithoutVendorInput | LicenseUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: LicenseCreateManyVendorInputEnvelope
    set?: LicenseWhereUniqueInput | LicenseWhereUniqueInput[]
    disconnect?: LicenseWhereUniqueInput | LicenseWhereUniqueInput[]
    delete?: LicenseWhereUniqueInput | LicenseWhereUniqueInput[]
    connect?: LicenseWhereUniqueInput | LicenseWhereUniqueInput[]
    update?: LicenseUpdateWithWhereUniqueWithoutVendorInput | LicenseUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: LicenseUpdateManyWithWhereWithoutVendorInput | LicenseUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: LicenseScalarWhereInput | LicenseScalarWhereInput[]
  }

  export type SoftwareUncheckedUpdateManyWithoutVendorNestedInput = {
    create?: XOR<SoftwareCreateWithoutVendorInput, SoftwareUncheckedCreateWithoutVendorInput> | SoftwareCreateWithoutVendorInput[] | SoftwareUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: SoftwareCreateOrConnectWithoutVendorInput | SoftwareCreateOrConnectWithoutVendorInput[]
    upsert?: SoftwareUpsertWithWhereUniqueWithoutVendorInput | SoftwareUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: SoftwareCreateManyVendorInputEnvelope
    set?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    disconnect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    delete?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    connect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    update?: SoftwareUpdateWithWhereUniqueWithoutVendorInput | SoftwareUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: SoftwareUpdateManyWithWhereWithoutVendorInput | SoftwareUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: SoftwareScalarWhereInput | SoftwareScalarWhereInput[]
  }

  export type VendorCreateNestedOneWithoutSoftwareInput = {
    create?: XOR<VendorCreateWithoutSoftwareInput, VendorUncheckedCreateWithoutSoftwareInput>
    connectOrCreate?: VendorCreateOrConnectWithoutSoftwareInput
    connect?: VendorWhereUniqueInput
  }

  export type LicenseCreateNestedManyWithoutSoftwareInput = {
    create?: XOR<LicenseCreateWithoutSoftwareInput, LicenseUncheckedCreateWithoutSoftwareInput> | LicenseCreateWithoutSoftwareInput[] | LicenseUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: LicenseCreateOrConnectWithoutSoftwareInput | LicenseCreateOrConnectWithoutSoftwareInput[]
    createMany?: LicenseCreateManySoftwareInputEnvelope
    connect?: LicenseWhereUniqueInput | LicenseWhereUniqueInput[]
  }

  export type SoftwareInstallCreateNestedManyWithoutSoftwareInput = {
    create?: XOR<SoftwareInstallCreateWithoutSoftwareInput, SoftwareInstallUncheckedCreateWithoutSoftwareInput> | SoftwareInstallCreateWithoutSoftwareInput[] | SoftwareInstallUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: SoftwareInstallCreateOrConnectWithoutSoftwareInput | SoftwareInstallCreateOrConnectWithoutSoftwareInput[]
    createMany?: SoftwareInstallCreateManySoftwareInputEnvelope
    connect?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
  }

  export type LicenseUncheckedCreateNestedManyWithoutSoftwareInput = {
    create?: XOR<LicenseCreateWithoutSoftwareInput, LicenseUncheckedCreateWithoutSoftwareInput> | LicenseCreateWithoutSoftwareInput[] | LicenseUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: LicenseCreateOrConnectWithoutSoftwareInput | LicenseCreateOrConnectWithoutSoftwareInput[]
    createMany?: LicenseCreateManySoftwareInputEnvelope
    connect?: LicenseWhereUniqueInput | LicenseWhereUniqueInput[]
  }

  export type SoftwareInstallUncheckedCreateNestedManyWithoutSoftwareInput = {
    create?: XOR<SoftwareInstallCreateWithoutSoftwareInput, SoftwareInstallUncheckedCreateWithoutSoftwareInput> | SoftwareInstallCreateWithoutSoftwareInput[] | SoftwareInstallUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: SoftwareInstallCreateOrConnectWithoutSoftwareInput | SoftwareInstallCreateOrConnectWithoutSoftwareInput[]
    createMany?: SoftwareInstallCreateManySoftwareInputEnvelope
    connect?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
  }

  export type VendorUpdateOneWithoutSoftwareNestedInput = {
    create?: XOR<VendorCreateWithoutSoftwareInput, VendorUncheckedCreateWithoutSoftwareInput>
    connectOrCreate?: VendorCreateOrConnectWithoutSoftwareInput
    upsert?: VendorUpsertWithoutSoftwareInput
    disconnect?: VendorWhereInput | boolean
    delete?: VendorWhereInput | boolean
    connect?: VendorWhereUniqueInput
    update?: XOR<XOR<VendorUpdateToOneWithWhereWithoutSoftwareInput, VendorUpdateWithoutSoftwareInput>, VendorUncheckedUpdateWithoutSoftwareInput>
  }

  export type LicenseUpdateManyWithoutSoftwareNestedInput = {
    create?: XOR<LicenseCreateWithoutSoftwareInput, LicenseUncheckedCreateWithoutSoftwareInput> | LicenseCreateWithoutSoftwareInput[] | LicenseUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: LicenseCreateOrConnectWithoutSoftwareInput | LicenseCreateOrConnectWithoutSoftwareInput[]
    upsert?: LicenseUpsertWithWhereUniqueWithoutSoftwareInput | LicenseUpsertWithWhereUniqueWithoutSoftwareInput[]
    createMany?: LicenseCreateManySoftwareInputEnvelope
    set?: LicenseWhereUniqueInput | LicenseWhereUniqueInput[]
    disconnect?: LicenseWhereUniqueInput | LicenseWhereUniqueInput[]
    delete?: LicenseWhereUniqueInput | LicenseWhereUniqueInput[]
    connect?: LicenseWhereUniqueInput | LicenseWhereUniqueInput[]
    update?: LicenseUpdateWithWhereUniqueWithoutSoftwareInput | LicenseUpdateWithWhereUniqueWithoutSoftwareInput[]
    updateMany?: LicenseUpdateManyWithWhereWithoutSoftwareInput | LicenseUpdateManyWithWhereWithoutSoftwareInput[]
    deleteMany?: LicenseScalarWhereInput | LicenseScalarWhereInput[]
  }

  export type SoftwareInstallUpdateManyWithoutSoftwareNestedInput = {
    create?: XOR<SoftwareInstallCreateWithoutSoftwareInput, SoftwareInstallUncheckedCreateWithoutSoftwareInput> | SoftwareInstallCreateWithoutSoftwareInput[] | SoftwareInstallUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: SoftwareInstallCreateOrConnectWithoutSoftwareInput | SoftwareInstallCreateOrConnectWithoutSoftwareInput[]
    upsert?: SoftwareInstallUpsertWithWhereUniqueWithoutSoftwareInput | SoftwareInstallUpsertWithWhereUniqueWithoutSoftwareInput[]
    createMany?: SoftwareInstallCreateManySoftwareInputEnvelope
    set?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
    disconnect?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
    delete?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
    connect?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
    update?: SoftwareInstallUpdateWithWhereUniqueWithoutSoftwareInput | SoftwareInstallUpdateWithWhereUniqueWithoutSoftwareInput[]
    updateMany?: SoftwareInstallUpdateManyWithWhereWithoutSoftwareInput | SoftwareInstallUpdateManyWithWhereWithoutSoftwareInput[]
    deleteMany?: SoftwareInstallScalarWhereInput | SoftwareInstallScalarWhereInput[]
  }

  export type LicenseUncheckedUpdateManyWithoutSoftwareNestedInput = {
    create?: XOR<LicenseCreateWithoutSoftwareInput, LicenseUncheckedCreateWithoutSoftwareInput> | LicenseCreateWithoutSoftwareInput[] | LicenseUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: LicenseCreateOrConnectWithoutSoftwareInput | LicenseCreateOrConnectWithoutSoftwareInput[]
    upsert?: LicenseUpsertWithWhereUniqueWithoutSoftwareInput | LicenseUpsertWithWhereUniqueWithoutSoftwareInput[]
    createMany?: LicenseCreateManySoftwareInputEnvelope
    set?: LicenseWhereUniqueInput | LicenseWhereUniqueInput[]
    disconnect?: LicenseWhereUniqueInput | LicenseWhereUniqueInput[]
    delete?: LicenseWhereUniqueInput | LicenseWhereUniqueInput[]
    connect?: LicenseWhereUniqueInput | LicenseWhereUniqueInput[]
    update?: LicenseUpdateWithWhereUniqueWithoutSoftwareInput | LicenseUpdateWithWhereUniqueWithoutSoftwareInput[]
    updateMany?: LicenseUpdateManyWithWhereWithoutSoftwareInput | LicenseUpdateManyWithWhereWithoutSoftwareInput[]
    deleteMany?: LicenseScalarWhereInput | LicenseScalarWhereInput[]
  }

  export type SoftwareInstallUncheckedUpdateManyWithoutSoftwareNestedInput = {
    create?: XOR<SoftwareInstallCreateWithoutSoftwareInput, SoftwareInstallUncheckedCreateWithoutSoftwareInput> | SoftwareInstallCreateWithoutSoftwareInput[] | SoftwareInstallUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: SoftwareInstallCreateOrConnectWithoutSoftwareInput | SoftwareInstallCreateOrConnectWithoutSoftwareInput[]
    upsert?: SoftwareInstallUpsertWithWhereUniqueWithoutSoftwareInput | SoftwareInstallUpsertWithWhereUniqueWithoutSoftwareInput[]
    createMany?: SoftwareInstallCreateManySoftwareInputEnvelope
    set?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
    disconnect?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
    delete?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
    connect?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
    update?: SoftwareInstallUpdateWithWhereUniqueWithoutSoftwareInput | SoftwareInstallUpdateWithWhereUniqueWithoutSoftwareInput[]
    updateMany?: SoftwareInstallUpdateManyWithWhereWithoutSoftwareInput | SoftwareInstallUpdateManyWithWhereWithoutSoftwareInput[]
    deleteMany?: SoftwareInstallScalarWhereInput | SoftwareInstallScalarWhereInput[]
  }

  export type SoftwareCreateNestedOneWithoutLicensesInput = {
    create?: XOR<SoftwareCreateWithoutLicensesInput, SoftwareUncheckedCreateWithoutLicensesInput>
    connectOrCreate?: SoftwareCreateOrConnectWithoutLicensesInput
    connect?: SoftwareWhereUniqueInput
  }

  export type VendorCreateNestedOneWithoutLicensesInput = {
    create?: XOR<VendorCreateWithoutLicensesInput, VendorUncheckedCreateWithoutLicensesInput>
    connectOrCreate?: VendorCreateOrConnectWithoutLicensesInput
    connect?: VendorWhereUniqueInput
  }

  export type SoftwareInstallCreateNestedManyWithoutLicenseInput = {
    create?: XOR<SoftwareInstallCreateWithoutLicenseInput, SoftwareInstallUncheckedCreateWithoutLicenseInput> | SoftwareInstallCreateWithoutLicenseInput[] | SoftwareInstallUncheckedCreateWithoutLicenseInput[]
    connectOrCreate?: SoftwareInstallCreateOrConnectWithoutLicenseInput | SoftwareInstallCreateOrConnectWithoutLicenseInput[]
    createMany?: SoftwareInstallCreateManyLicenseInputEnvelope
    connect?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
  }

  export type SoftwareInstallUncheckedCreateNestedManyWithoutLicenseInput = {
    create?: XOR<SoftwareInstallCreateWithoutLicenseInput, SoftwareInstallUncheckedCreateWithoutLicenseInput> | SoftwareInstallCreateWithoutLicenseInput[] | SoftwareInstallUncheckedCreateWithoutLicenseInput[]
    connectOrCreate?: SoftwareInstallCreateOrConnectWithoutLicenseInput | SoftwareInstallCreateOrConnectWithoutLicenseInput[]
    createMany?: SoftwareInstallCreateManyLicenseInputEnvelope
    connect?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumRenewalTypeFieldUpdateOperationsInput = {
    set?: $Enums.RenewalType
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SoftwareUpdateOneRequiredWithoutLicensesNestedInput = {
    create?: XOR<SoftwareCreateWithoutLicensesInput, SoftwareUncheckedCreateWithoutLicensesInput>
    connectOrCreate?: SoftwareCreateOrConnectWithoutLicensesInput
    upsert?: SoftwareUpsertWithoutLicensesInput
    connect?: SoftwareWhereUniqueInput
    update?: XOR<XOR<SoftwareUpdateToOneWithWhereWithoutLicensesInput, SoftwareUpdateWithoutLicensesInput>, SoftwareUncheckedUpdateWithoutLicensesInput>
  }

  export type VendorUpdateOneWithoutLicensesNestedInput = {
    create?: XOR<VendorCreateWithoutLicensesInput, VendorUncheckedCreateWithoutLicensesInput>
    connectOrCreate?: VendorCreateOrConnectWithoutLicensesInput
    upsert?: VendorUpsertWithoutLicensesInput
    disconnect?: VendorWhereInput | boolean
    delete?: VendorWhereInput | boolean
    connect?: VendorWhereUniqueInput
    update?: XOR<XOR<VendorUpdateToOneWithWhereWithoutLicensesInput, VendorUpdateWithoutLicensesInput>, VendorUncheckedUpdateWithoutLicensesInput>
  }

  export type SoftwareInstallUpdateManyWithoutLicenseNestedInput = {
    create?: XOR<SoftwareInstallCreateWithoutLicenseInput, SoftwareInstallUncheckedCreateWithoutLicenseInput> | SoftwareInstallCreateWithoutLicenseInput[] | SoftwareInstallUncheckedCreateWithoutLicenseInput[]
    connectOrCreate?: SoftwareInstallCreateOrConnectWithoutLicenseInput | SoftwareInstallCreateOrConnectWithoutLicenseInput[]
    upsert?: SoftwareInstallUpsertWithWhereUniqueWithoutLicenseInput | SoftwareInstallUpsertWithWhereUniqueWithoutLicenseInput[]
    createMany?: SoftwareInstallCreateManyLicenseInputEnvelope
    set?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
    disconnect?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
    delete?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
    connect?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
    update?: SoftwareInstallUpdateWithWhereUniqueWithoutLicenseInput | SoftwareInstallUpdateWithWhereUniqueWithoutLicenseInput[]
    updateMany?: SoftwareInstallUpdateManyWithWhereWithoutLicenseInput | SoftwareInstallUpdateManyWithWhereWithoutLicenseInput[]
    deleteMany?: SoftwareInstallScalarWhereInput | SoftwareInstallScalarWhereInput[]
  }

  export type SoftwareInstallUncheckedUpdateManyWithoutLicenseNestedInput = {
    create?: XOR<SoftwareInstallCreateWithoutLicenseInput, SoftwareInstallUncheckedCreateWithoutLicenseInput> | SoftwareInstallCreateWithoutLicenseInput[] | SoftwareInstallUncheckedCreateWithoutLicenseInput[]
    connectOrCreate?: SoftwareInstallCreateOrConnectWithoutLicenseInput | SoftwareInstallCreateOrConnectWithoutLicenseInput[]
    upsert?: SoftwareInstallUpsertWithWhereUniqueWithoutLicenseInput | SoftwareInstallUpsertWithWhereUniqueWithoutLicenseInput[]
    createMany?: SoftwareInstallCreateManyLicenseInputEnvelope
    set?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
    disconnect?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
    delete?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
    connect?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
    update?: SoftwareInstallUpdateWithWhereUniqueWithoutLicenseInput | SoftwareInstallUpdateWithWhereUniqueWithoutLicenseInput[]
    updateMany?: SoftwareInstallUpdateManyWithWhereWithoutLicenseInput | SoftwareInstallUpdateManyWithWhereWithoutLicenseInput[]
    deleteMany?: SoftwareInstallScalarWhereInput | SoftwareInstallScalarWhereInput[]
  }

  export type VendorCreateNestedOneWithoutHardwareItemsInput = {
    create?: XOR<VendorCreateWithoutHardwareItemsInput, VendorUncheckedCreateWithoutHardwareItemsInput>
    connectOrCreate?: VendorCreateOrConnectWithoutHardwareItemsInput
    connect?: VendorWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutHardwareItemsInput = {
    create?: XOR<UserCreateWithoutHardwareItemsInput, UserUncheckedCreateWithoutHardwareItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutHardwareItemsInput
    connect?: UserWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutHardwareItemsInput = {
    create?: XOR<DepartmentCreateWithoutHardwareItemsInput, DepartmentUncheckedCreateWithoutHardwareItemsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutHardwareItemsInput
    connect?: DepartmentWhereUniqueInput
  }

  export type AttachmentCreateNestedManyWithoutHardwareItemInput = {
    create?: XOR<AttachmentCreateWithoutHardwareItemInput, AttachmentUncheckedCreateWithoutHardwareItemInput> | AttachmentCreateWithoutHardwareItemInput[] | AttachmentUncheckedCreateWithoutHardwareItemInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutHardwareItemInput | AttachmentCreateOrConnectWithoutHardwareItemInput[]
    createMany?: AttachmentCreateManyHardwareItemInputEnvelope
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
  }

  export type MaintenanceCreateNestedManyWithoutHardwareItemInput = {
    create?: XOR<MaintenanceCreateWithoutHardwareItemInput, MaintenanceUncheckedCreateWithoutHardwareItemInput> | MaintenanceCreateWithoutHardwareItemInput[] | MaintenanceUncheckedCreateWithoutHardwareItemInput[]
    connectOrCreate?: MaintenanceCreateOrConnectWithoutHardwareItemInput | MaintenanceCreateOrConnectWithoutHardwareItemInput[]
    createMany?: MaintenanceCreateManyHardwareItemInputEnvelope
    connect?: MaintenanceWhereUniqueInput | MaintenanceWhereUniqueInput[]
  }

  export type AllocationCreateNestedManyWithoutHardwareItemInput = {
    create?: XOR<AllocationCreateWithoutHardwareItemInput, AllocationUncheckedCreateWithoutHardwareItemInput> | AllocationCreateWithoutHardwareItemInput[] | AllocationUncheckedCreateWithoutHardwareItemInput[]
    connectOrCreate?: AllocationCreateOrConnectWithoutHardwareItemInput | AllocationCreateOrConnectWithoutHardwareItemInput[]
    createMany?: AllocationCreateManyHardwareItemInputEnvelope
    connect?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
  }

  export type SoftwareInstallCreateNestedManyWithoutHardwareItemInput = {
    create?: XOR<SoftwareInstallCreateWithoutHardwareItemInput, SoftwareInstallUncheckedCreateWithoutHardwareItemInput> | SoftwareInstallCreateWithoutHardwareItemInput[] | SoftwareInstallUncheckedCreateWithoutHardwareItemInput[]
    connectOrCreate?: SoftwareInstallCreateOrConnectWithoutHardwareItemInput | SoftwareInstallCreateOrConnectWithoutHardwareItemInput[]
    createMany?: SoftwareInstallCreateManyHardwareItemInputEnvelope
    connect?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutHardwareItemInput = {
    create?: XOR<AuditLogCreateWithoutHardwareItemInput, AuditLogUncheckedCreateWithoutHardwareItemInput> | AuditLogCreateWithoutHardwareItemInput[] | AuditLogUncheckedCreateWithoutHardwareItemInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutHardwareItemInput | AuditLogCreateOrConnectWithoutHardwareItemInput[]
    createMany?: AuditLogCreateManyHardwareItemInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type AttachmentUncheckedCreateNestedManyWithoutHardwareItemInput = {
    create?: XOR<AttachmentCreateWithoutHardwareItemInput, AttachmentUncheckedCreateWithoutHardwareItemInput> | AttachmentCreateWithoutHardwareItemInput[] | AttachmentUncheckedCreateWithoutHardwareItemInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutHardwareItemInput | AttachmentCreateOrConnectWithoutHardwareItemInput[]
    createMany?: AttachmentCreateManyHardwareItemInputEnvelope
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
  }

  export type MaintenanceUncheckedCreateNestedManyWithoutHardwareItemInput = {
    create?: XOR<MaintenanceCreateWithoutHardwareItemInput, MaintenanceUncheckedCreateWithoutHardwareItemInput> | MaintenanceCreateWithoutHardwareItemInput[] | MaintenanceUncheckedCreateWithoutHardwareItemInput[]
    connectOrCreate?: MaintenanceCreateOrConnectWithoutHardwareItemInput | MaintenanceCreateOrConnectWithoutHardwareItemInput[]
    createMany?: MaintenanceCreateManyHardwareItemInputEnvelope
    connect?: MaintenanceWhereUniqueInput | MaintenanceWhereUniqueInput[]
  }

  export type AllocationUncheckedCreateNestedManyWithoutHardwareItemInput = {
    create?: XOR<AllocationCreateWithoutHardwareItemInput, AllocationUncheckedCreateWithoutHardwareItemInput> | AllocationCreateWithoutHardwareItemInput[] | AllocationUncheckedCreateWithoutHardwareItemInput[]
    connectOrCreate?: AllocationCreateOrConnectWithoutHardwareItemInput | AllocationCreateOrConnectWithoutHardwareItemInput[]
    createMany?: AllocationCreateManyHardwareItemInputEnvelope
    connect?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
  }

  export type SoftwareInstallUncheckedCreateNestedManyWithoutHardwareItemInput = {
    create?: XOR<SoftwareInstallCreateWithoutHardwareItemInput, SoftwareInstallUncheckedCreateWithoutHardwareItemInput> | SoftwareInstallCreateWithoutHardwareItemInput[] | SoftwareInstallUncheckedCreateWithoutHardwareItemInput[]
    connectOrCreate?: SoftwareInstallCreateOrConnectWithoutHardwareItemInput | SoftwareInstallCreateOrConnectWithoutHardwareItemInput[]
    createMany?: SoftwareInstallCreateManyHardwareItemInputEnvelope
    connect?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutHardwareItemInput = {
    create?: XOR<AuditLogCreateWithoutHardwareItemInput, AuditLogUncheckedCreateWithoutHardwareItemInput> | AuditLogCreateWithoutHardwareItemInput[] | AuditLogUncheckedCreateWithoutHardwareItemInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutHardwareItemInput | AuditLogCreateOrConnectWithoutHardwareItemInput[]
    createMany?: AuditLogCreateManyHardwareItemInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type EnumHardwareTypeFieldUpdateOperationsInput = {
    set?: $Enums.HardwareType
  }

  export type EnumHardwareStatusFieldUpdateOperationsInput = {
    set?: $Enums.HardwareStatus
  }

  export type EnumHardwareConditionFieldUpdateOperationsInput = {
    set?: $Enums.HardwareCondition
  }

  export type VendorUpdateOneWithoutHardwareItemsNestedInput = {
    create?: XOR<VendorCreateWithoutHardwareItemsInput, VendorUncheckedCreateWithoutHardwareItemsInput>
    connectOrCreate?: VendorCreateOrConnectWithoutHardwareItemsInput
    upsert?: VendorUpsertWithoutHardwareItemsInput
    disconnect?: VendorWhereInput | boolean
    delete?: VendorWhereInput | boolean
    connect?: VendorWhereUniqueInput
    update?: XOR<XOR<VendorUpdateToOneWithWhereWithoutHardwareItemsInput, VendorUpdateWithoutHardwareItemsInput>, VendorUncheckedUpdateWithoutHardwareItemsInput>
  }

  export type UserUpdateOneWithoutHardwareItemsNestedInput = {
    create?: XOR<UserCreateWithoutHardwareItemsInput, UserUncheckedCreateWithoutHardwareItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutHardwareItemsInput
    upsert?: UserUpsertWithoutHardwareItemsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutHardwareItemsInput, UserUpdateWithoutHardwareItemsInput>, UserUncheckedUpdateWithoutHardwareItemsInput>
  }

  export type DepartmentUpdateOneWithoutHardwareItemsNestedInput = {
    create?: XOR<DepartmentCreateWithoutHardwareItemsInput, DepartmentUncheckedCreateWithoutHardwareItemsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutHardwareItemsInput
    upsert?: DepartmentUpsertWithoutHardwareItemsInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutHardwareItemsInput, DepartmentUpdateWithoutHardwareItemsInput>, DepartmentUncheckedUpdateWithoutHardwareItemsInput>
  }

  export type AttachmentUpdateManyWithoutHardwareItemNestedInput = {
    create?: XOR<AttachmentCreateWithoutHardwareItemInput, AttachmentUncheckedCreateWithoutHardwareItemInput> | AttachmentCreateWithoutHardwareItemInput[] | AttachmentUncheckedCreateWithoutHardwareItemInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutHardwareItemInput | AttachmentCreateOrConnectWithoutHardwareItemInput[]
    upsert?: AttachmentUpsertWithWhereUniqueWithoutHardwareItemInput | AttachmentUpsertWithWhereUniqueWithoutHardwareItemInput[]
    createMany?: AttachmentCreateManyHardwareItemInputEnvelope
    set?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    disconnect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    delete?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    update?: AttachmentUpdateWithWhereUniqueWithoutHardwareItemInput | AttachmentUpdateWithWhereUniqueWithoutHardwareItemInput[]
    updateMany?: AttachmentUpdateManyWithWhereWithoutHardwareItemInput | AttachmentUpdateManyWithWhereWithoutHardwareItemInput[]
    deleteMany?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
  }

  export type MaintenanceUpdateManyWithoutHardwareItemNestedInput = {
    create?: XOR<MaintenanceCreateWithoutHardwareItemInput, MaintenanceUncheckedCreateWithoutHardwareItemInput> | MaintenanceCreateWithoutHardwareItemInput[] | MaintenanceUncheckedCreateWithoutHardwareItemInput[]
    connectOrCreate?: MaintenanceCreateOrConnectWithoutHardwareItemInput | MaintenanceCreateOrConnectWithoutHardwareItemInput[]
    upsert?: MaintenanceUpsertWithWhereUniqueWithoutHardwareItemInput | MaintenanceUpsertWithWhereUniqueWithoutHardwareItemInput[]
    createMany?: MaintenanceCreateManyHardwareItemInputEnvelope
    set?: MaintenanceWhereUniqueInput | MaintenanceWhereUniqueInput[]
    disconnect?: MaintenanceWhereUniqueInput | MaintenanceWhereUniqueInput[]
    delete?: MaintenanceWhereUniqueInput | MaintenanceWhereUniqueInput[]
    connect?: MaintenanceWhereUniqueInput | MaintenanceWhereUniqueInput[]
    update?: MaintenanceUpdateWithWhereUniqueWithoutHardwareItemInput | MaintenanceUpdateWithWhereUniqueWithoutHardwareItemInput[]
    updateMany?: MaintenanceUpdateManyWithWhereWithoutHardwareItemInput | MaintenanceUpdateManyWithWhereWithoutHardwareItemInput[]
    deleteMany?: MaintenanceScalarWhereInput | MaintenanceScalarWhereInput[]
  }

  export type AllocationUpdateManyWithoutHardwareItemNestedInput = {
    create?: XOR<AllocationCreateWithoutHardwareItemInput, AllocationUncheckedCreateWithoutHardwareItemInput> | AllocationCreateWithoutHardwareItemInput[] | AllocationUncheckedCreateWithoutHardwareItemInput[]
    connectOrCreate?: AllocationCreateOrConnectWithoutHardwareItemInput | AllocationCreateOrConnectWithoutHardwareItemInput[]
    upsert?: AllocationUpsertWithWhereUniqueWithoutHardwareItemInput | AllocationUpsertWithWhereUniqueWithoutHardwareItemInput[]
    createMany?: AllocationCreateManyHardwareItemInputEnvelope
    set?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    disconnect?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    delete?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    connect?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    update?: AllocationUpdateWithWhereUniqueWithoutHardwareItemInput | AllocationUpdateWithWhereUniqueWithoutHardwareItemInput[]
    updateMany?: AllocationUpdateManyWithWhereWithoutHardwareItemInput | AllocationUpdateManyWithWhereWithoutHardwareItemInput[]
    deleteMany?: AllocationScalarWhereInput | AllocationScalarWhereInput[]
  }

  export type SoftwareInstallUpdateManyWithoutHardwareItemNestedInput = {
    create?: XOR<SoftwareInstallCreateWithoutHardwareItemInput, SoftwareInstallUncheckedCreateWithoutHardwareItemInput> | SoftwareInstallCreateWithoutHardwareItemInput[] | SoftwareInstallUncheckedCreateWithoutHardwareItemInput[]
    connectOrCreate?: SoftwareInstallCreateOrConnectWithoutHardwareItemInput | SoftwareInstallCreateOrConnectWithoutHardwareItemInput[]
    upsert?: SoftwareInstallUpsertWithWhereUniqueWithoutHardwareItemInput | SoftwareInstallUpsertWithWhereUniqueWithoutHardwareItemInput[]
    createMany?: SoftwareInstallCreateManyHardwareItemInputEnvelope
    set?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
    disconnect?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
    delete?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
    connect?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
    update?: SoftwareInstallUpdateWithWhereUniqueWithoutHardwareItemInput | SoftwareInstallUpdateWithWhereUniqueWithoutHardwareItemInput[]
    updateMany?: SoftwareInstallUpdateManyWithWhereWithoutHardwareItemInput | SoftwareInstallUpdateManyWithWhereWithoutHardwareItemInput[]
    deleteMany?: SoftwareInstallScalarWhereInput | SoftwareInstallScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutHardwareItemNestedInput = {
    create?: XOR<AuditLogCreateWithoutHardwareItemInput, AuditLogUncheckedCreateWithoutHardwareItemInput> | AuditLogCreateWithoutHardwareItemInput[] | AuditLogUncheckedCreateWithoutHardwareItemInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutHardwareItemInput | AuditLogCreateOrConnectWithoutHardwareItemInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutHardwareItemInput | AuditLogUpsertWithWhereUniqueWithoutHardwareItemInput[]
    createMany?: AuditLogCreateManyHardwareItemInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutHardwareItemInput | AuditLogUpdateWithWhereUniqueWithoutHardwareItemInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutHardwareItemInput | AuditLogUpdateManyWithWhereWithoutHardwareItemInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type AttachmentUncheckedUpdateManyWithoutHardwareItemNestedInput = {
    create?: XOR<AttachmentCreateWithoutHardwareItemInput, AttachmentUncheckedCreateWithoutHardwareItemInput> | AttachmentCreateWithoutHardwareItemInput[] | AttachmentUncheckedCreateWithoutHardwareItemInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutHardwareItemInput | AttachmentCreateOrConnectWithoutHardwareItemInput[]
    upsert?: AttachmentUpsertWithWhereUniqueWithoutHardwareItemInput | AttachmentUpsertWithWhereUniqueWithoutHardwareItemInput[]
    createMany?: AttachmentCreateManyHardwareItemInputEnvelope
    set?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    disconnect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    delete?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    update?: AttachmentUpdateWithWhereUniqueWithoutHardwareItemInput | AttachmentUpdateWithWhereUniqueWithoutHardwareItemInput[]
    updateMany?: AttachmentUpdateManyWithWhereWithoutHardwareItemInput | AttachmentUpdateManyWithWhereWithoutHardwareItemInput[]
    deleteMany?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
  }

  export type MaintenanceUncheckedUpdateManyWithoutHardwareItemNestedInput = {
    create?: XOR<MaintenanceCreateWithoutHardwareItemInput, MaintenanceUncheckedCreateWithoutHardwareItemInput> | MaintenanceCreateWithoutHardwareItemInput[] | MaintenanceUncheckedCreateWithoutHardwareItemInput[]
    connectOrCreate?: MaintenanceCreateOrConnectWithoutHardwareItemInput | MaintenanceCreateOrConnectWithoutHardwareItemInput[]
    upsert?: MaintenanceUpsertWithWhereUniqueWithoutHardwareItemInput | MaintenanceUpsertWithWhereUniqueWithoutHardwareItemInput[]
    createMany?: MaintenanceCreateManyHardwareItemInputEnvelope
    set?: MaintenanceWhereUniqueInput | MaintenanceWhereUniqueInput[]
    disconnect?: MaintenanceWhereUniqueInput | MaintenanceWhereUniqueInput[]
    delete?: MaintenanceWhereUniqueInput | MaintenanceWhereUniqueInput[]
    connect?: MaintenanceWhereUniqueInput | MaintenanceWhereUniqueInput[]
    update?: MaintenanceUpdateWithWhereUniqueWithoutHardwareItemInput | MaintenanceUpdateWithWhereUniqueWithoutHardwareItemInput[]
    updateMany?: MaintenanceUpdateManyWithWhereWithoutHardwareItemInput | MaintenanceUpdateManyWithWhereWithoutHardwareItemInput[]
    deleteMany?: MaintenanceScalarWhereInput | MaintenanceScalarWhereInput[]
  }

  export type AllocationUncheckedUpdateManyWithoutHardwareItemNestedInput = {
    create?: XOR<AllocationCreateWithoutHardwareItemInput, AllocationUncheckedCreateWithoutHardwareItemInput> | AllocationCreateWithoutHardwareItemInput[] | AllocationUncheckedCreateWithoutHardwareItemInput[]
    connectOrCreate?: AllocationCreateOrConnectWithoutHardwareItemInput | AllocationCreateOrConnectWithoutHardwareItemInput[]
    upsert?: AllocationUpsertWithWhereUniqueWithoutHardwareItemInput | AllocationUpsertWithWhereUniqueWithoutHardwareItemInput[]
    createMany?: AllocationCreateManyHardwareItemInputEnvelope
    set?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    disconnect?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    delete?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    connect?: AllocationWhereUniqueInput | AllocationWhereUniqueInput[]
    update?: AllocationUpdateWithWhereUniqueWithoutHardwareItemInput | AllocationUpdateWithWhereUniqueWithoutHardwareItemInput[]
    updateMany?: AllocationUpdateManyWithWhereWithoutHardwareItemInput | AllocationUpdateManyWithWhereWithoutHardwareItemInput[]
    deleteMany?: AllocationScalarWhereInput | AllocationScalarWhereInput[]
  }

  export type SoftwareInstallUncheckedUpdateManyWithoutHardwareItemNestedInput = {
    create?: XOR<SoftwareInstallCreateWithoutHardwareItemInput, SoftwareInstallUncheckedCreateWithoutHardwareItemInput> | SoftwareInstallCreateWithoutHardwareItemInput[] | SoftwareInstallUncheckedCreateWithoutHardwareItemInput[]
    connectOrCreate?: SoftwareInstallCreateOrConnectWithoutHardwareItemInput | SoftwareInstallCreateOrConnectWithoutHardwareItemInput[]
    upsert?: SoftwareInstallUpsertWithWhereUniqueWithoutHardwareItemInput | SoftwareInstallUpsertWithWhereUniqueWithoutHardwareItemInput[]
    createMany?: SoftwareInstallCreateManyHardwareItemInputEnvelope
    set?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
    disconnect?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
    delete?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
    connect?: SoftwareInstallWhereUniqueInput | SoftwareInstallWhereUniqueInput[]
    update?: SoftwareInstallUpdateWithWhereUniqueWithoutHardwareItemInput | SoftwareInstallUpdateWithWhereUniqueWithoutHardwareItemInput[]
    updateMany?: SoftwareInstallUpdateManyWithWhereWithoutHardwareItemInput | SoftwareInstallUpdateManyWithWhereWithoutHardwareItemInput[]
    deleteMany?: SoftwareInstallScalarWhereInput | SoftwareInstallScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutHardwareItemNestedInput = {
    create?: XOR<AuditLogCreateWithoutHardwareItemInput, AuditLogUncheckedCreateWithoutHardwareItemInput> | AuditLogCreateWithoutHardwareItemInput[] | AuditLogUncheckedCreateWithoutHardwareItemInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutHardwareItemInput | AuditLogCreateOrConnectWithoutHardwareItemInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutHardwareItemInput | AuditLogUpsertWithWhereUniqueWithoutHardwareItemInput[]
    createMany?: AuditLogCreateManyHardwareItemInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutHardwareItemInput | AuditLogUpdateWithWhereUniqueWithoutHardwareItemInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutHardwareItemInput | AuditLogUpdateManyWithWhereWithoutHardwareItemInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type HardwareItemCreateNestedOneWithoutAttachmentsInput = {
    create?: XOR<HardwareItemCreateWithoutAttachmentsInput, HardwareItemUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: HardwareItemCreateOrConnectWithoutAttachmentsInput
    connect?: HardwareItemWhereUniqueInput
  }

  export type EnumEntityTypeFieldUpdateOperationsInput = {
    set?: $Enums.EntityType
  }

  export type HardwareItemUpdateOneWithoutAttachmentsNestedInput = {
    create?: XOR<HardwareItemCreateWithoutAttachmentsInput, HardwareItemUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: HardwareItemCreateOrConnectWithoutAttachmentsInput
    upsert?: HardwareItemUpsertWithoutAttachmentsInput
    disconnect?: HardwareItemWhereInput | boolean
    delete?: HardwareItemWhereInput | boolean
    connect?: HardwareItemWhereUniqueInput
    update?: XOR<XOR<HardwareItemUpdateToOneWithWhereWithoutAttachmentsInput, HardwareItemUpdateWithoutAttachmentsInput>, HardwareItemUncheckedUpdateWithoutAttachmentsInput>
  }

  export type HardwareItemCreateNestedOneWithoutMaintenancesInput = {
    create?: XOR<HardwareItemCreateWithoutMaintenancesInput, HardwareItemUncheckedCreateWithoutMaintenancesInput>
    connectOrCreate?: HardwareItemCreateOrConnectWithoutMaintenancesInput
    connect?: HardwareItemWhereUniqueInput
  }

  export type EnumMaintenanceStatusFieldUpdateOperationsInput = {
    set?: $Enums.MaintenanceStatus
  }

  export type HardwareItemUpdateOneRequiredWithoutMaintenancesNestedInput = {
    create?: XOR<HardwareItemCreateWithoutMaintenancesInput, HardwareItemUncheckedCreateWithoutMaintenancesInput>
    connectOrCreate?: HardwareItemCreateOrConnectWithoutMaintenancesInput
    upsert?: HardwareItemUpsertWithoutMaintenancesInput
    connect?: HardwareItemWhereUniqueInput
    update?: XOR<XOR<HardwareItemUpdateToOneWithWhereWithoutMaintenancesInput, HardwareItemUpdateWithoutMaintenancesInput>, HardwareItemUncheckedUpdateWithoutMaintenancesInput>
  }

  export type HardwareItemCreateNestedOneWithoutAllocationsInput = {
    create?: XOR<HardwareItemCreateWithoutAllocationsInput, HardwareItemUncheckedCreateWithoutAllocationsInput>
    connectOrCreate?: HardwareItemCreateOrConnectWithoutAllocationsInput
    connect?: HardwareItemWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAllocationsInput = {
    create?: XOR<UserCreateWithoutAllocationsInput, UserUncheckedCreateWithoutAllocationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAllocationsInput
    connect?: UserWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutAllocationsInput = {
    create?: XOR<DepartmentCreateWithoutAllocationsInput, DepartmentUncheckedCreateWithoutAllocationsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutAllocationsInput
    connect?: DepartmentWhereUniqueInput
  }

  export type HardwareItemUpdateOneRequiredWithoutAllocationsNestedInput = {
    create?: XOR<HardwareItemCreateWithoutAllocationsInput, HardwareItemUncheckedCreateWithoutAllocationsInput>
    connectOrCreate?: HardwareItemCreateOrConnectWithoutAllocationsInput
    upsert?: HardwareItemUpsertWithoutAllocationsInput
    connect?: HardwareItemWhereUniqueInput
    update?: XOR<XOR<HardwareItemUpdateToOneWithWhereWithoutAllocationsInput, HardwareItemUpdateWithoutAllocationsInput>, HardwareItemUncheckedUpdateWithoutAllocationsInput>
  }

  export type UserUpdateOneWithoutAllocationsNestedInput = {
    create?: XOR<UserCreateWithoutAllocationsInput, UserUncheckedCreateWithoutAllocationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAllocationsInput
    upsert?: UserUpsertWithoutAllocationsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAllocationsInput, UserUpdateWithoutAllocationsInput>, UserUncheckedUpdateWithoutAllocationsInput>
  }

  export type DepartmentUpdateOneWithoutAllocationsNestedInput = {
    create?: XOR<DepartmentCreateWithoutAllocationsInput, DepartmentUncheckedCreateWithoutAllocationsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutAllocationsInput
    upsert?: DepartmentUpsertWithoutAllocationsInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutAllocationsInput, DepartmentUpdateWithoutAllocationsInput>, DepartmentUncheckedUpdateWithoutAllocationsInput>
  }

  export type HardwareItemCreateNestedOneWithoutSoftwareInstallsInput = {
    create?: XOR<HardwareItemCreateWithoutSoftwareInstallsInput, HardwareItemUncheckedCreateWithoutSoftwareInstallsInput>
    connectOrCreate?: HardwareItemCreateOrConnectWithoutSoftwareInstallsInput
    connect?: HardwareItemWhereUniqueInput
  }

  export type SoftwareCreateNestedOneWithoutSoftwareInstallsInput = {
    create?: XOR<SoftwareCreateWithoutSoftwareInstallsInput, SoftwareUncheckedCreateWithoutSoftwareInstallsInput>
    connectOrCreate?: SoftwareCreateOrConnectWithoutSoftwareInstallsInput
    connect?: SoftwareWhereUniqueInput
  }

  export type LicenseCreateNestedOneWithoutSoftwareInstallsInput = {
    create?: XOR<LicenseCreateWithoutSoftwareInstallsInput, LicenseUncheckedCreateWithoutSoftwareInstallsInput>
    connectOrCreate?: LicenseCreateOrConnectWithoutSoftwareInstallsInput
    connect?: LicenseWhereUniqueInput
  }

  export type HardwareItemUpdateOneRequiredWithoutSoftwareInstallsNestedInput = {
    create?: XOR<HardwareItemCreateWithoutSoftwareInstallsInput, HardwareItemUncheckedCreateWithoutSoftwareInstallsInput>
    connectOrCreate?: HardwareItemCreateOrConnectWithoutSoftwareInstallsInput
    upsert?: HardwareItemUpsertWithoutSoftwareInstallsInput
    connect?: HardwareItemWhereUniqueInput
    update?: XOR<XOR<HardwareItemUpdateToOneWithWhereWithoutSoftwareInstallsInput, HardwareItemUpdateWithoutSoftwareInstallsInput>, HardwareItemUncheckedUpdateWithoutSoftwareInstallsInput>
  }

  export type SoftwareUpdateOneRequiredWithoutSoftwareInstallsNestedInput = {
    create?: XOR<SoftwareCreateWithoutSoftwareInstallsInput, SoftwareUncheckedCreateWithoutSoftwareInstallsInput>
    connectOrCreate?: SoftwareCreateOrConnectWithoutSoftwareInstallsInput
    upsert?: SoftwareUpsertWithoutSoftwareInstallsInput
    connect?: SoftwareWhereUniqueInput
    update?: XOR<XOR<SoftwareUpdateToOneWithWhereWithoutSoftwareInstallsInput, SoftwareUpdateWithoutSoftwareInstallsInput>, SoftwareUncheckedUpdateWithoutSoftwareInstallsInput>
  }

  export type LicenseUpdateOneWithoutSoftwareInstallsNestedInput = {
    create?: XOR<LicenseCreateWithoutSoftwareInstallsInput, LicenseUncheckedCreateWithoutSoftwareInstallsInput>
    connectOrCreate?: LicenseCreateOrConnectWithoutSoftwareInstallsInput
    upsert?: LicenseUpsertWithoutSoftwareInstallsInput
    disconnect?: LicenseWhereInput | boolean
    delete?: LicenseWhereInput | boolean
    connect?: LicenseWhereUniqueInput
    update?: XOR<XOR<LicenseUpdateToOneWithWhereWithoutSoftwareInstallsInput, LicenseUpdateWithoutSoftwareInstallsInput>, LicenseUncheckedUpdateWithoutSoftwareInstallsInput>
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type HardwareItemCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<HardwareItemCreateWithoutAuditLogsInput, HardwareItemUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: HardwareItemCreateOrConnectWithoutAuditLogsInput
    connect?: HardwareItemWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type HardwareItemUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<HardwareItemCreateWithoutAuditLogsInput, HardwareItemUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: HardwareItemCreateOrConnectWithoutAuditLogsInput
    upsert?: HardwareItemUpsertWithoutAuditLogsInput
    disconnect?: HardwareItemWhereInput | boolean
    delete?: HardwareItemWhereInput | boolean
    connect?: HardwareItemWhereUniqueInput
    update?: XOR<XOR<HardwareItemUpdateToOneWithWhereWithoutAuditLogsInput, HardwareItemUpdateWithoutAuditLogsInput>, HardwareItemUncheckedUpdateWithoutAuditLogsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumVendorTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.VendorType | EnumVendorTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VendorType[]
    notIn?: $Enums.VendorType[]
    not?: NestedEnumVendorTypeFilter<$PrismaModel> | $Enums.VendorType
  }

  export type NestedEnumVendorTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VendorType | EnumVendorTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VendorType[]
    notIn?: $Enums.VendorType[]
    not?: NestedEnumVendorTypeWithAggregatesFilter<$PrismaModel> | $Enums.VendorType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVendorTypeFilter<$PrismaModel>
    _max?: NestedEnumVendorTypeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumRenewalTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RenewalType | EnumRenewalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RenewalType[]
    notIn?: $Enums.RenewalType[]
    not?: NestedEnumRenewalTypeFilter<$PrismaModel> | $Enums.RenewalType
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumRenewalTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RenewalType | EnumRenewalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RenewalType[]
    notIn?: $Enums.RenewalType[]
    not?: NestedEnumRenewalTypeWithAggregatesFilter<$PrismaModel> | $Enums.RenewalType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRenewalTypeFilter<$PrismaModel>
    _max?: NestedEnumRenewalTypeFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumHardwareTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.HardwareType | EnumHardwareTypeFieldRefInput<$PrismaModel>
    in?: $Enums.HardwareType[]
    notIn?: $Enums.HardwareType[]
    not?: NestedEnumHardwareTypeFilter<$PrismaModel> | $Enums.HardwareType
  }

  export type NestedEnumHardwareStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.HardwareStatus | EnumHardwareStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HardwareStatus[]
    notIn?: $Enums.HardwareStatus[]
    not?: NestedEnumHardwareStatusFilter<$PrismaModel> | $Enums.HardwareStatus
  }

  export type NestedEnumHardwareConditionFilter<$PrismaModel = never> = {
    equals?: $Enums.HardwareCondition | EnumHardwareConditionFieldRefInput<$PrismaModel>
    in?: $Enums.HardwareCondition[]
    notIn?: $Enums.HardwareCondition[]
    not?: NestedEnumHardwareConditionFilter<$PrismaModel> | $Enums.HardwareCondition
  }

  export type NestedEnumHardwareTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HardwareType | EnumHardwareTypeFieldRefInput<$PrismaModel>
    in?: $Enums.HardwareType[]
    notIn?: $Enums.HardwareType[]
    not?: NestedEnumHardwareTypeWithAggregatesFilter<$PrismaModel> | $Enums.HardwareType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHardwareTypeFilter<$PrismaModel>
    _max?: NestedEnumHardwareTypeFilter<$PrismaModel>
  }

  export type NestedEnumHardwareStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HardwareStatus | EnumHardwareStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HardwareStatus[]
    notIn?: $Enums.HardwareStatus[]
    not?: NestedEnumHardwareStatusWithAggregatesFilter<$PrismaModel> | $Enums.HardwareStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHardwareStatusFilter<$PrismaModel>
    _max?: NestedEnumHardwareStatusFilter<$PrismaModel>
  }

  export type NestedEnumHardwareConditionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HardwareCondition | EnumHardwareConditionFieldRefInput<$PrismaModel>
    in?: $Enums.HardwareCondition[]
    notIn?: $Enums.HardwareCondition[]
    not?: NestedEnumHardwareConditionWithAggregatesFilter<$PrismaModel> | $Enums.HardwareCondition
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHardwareConditionFilter<$PrismaModel>
    _max?: NestedEnumHardwareConditionFilter<$PrismaModel>
  }

  export type NestedEnumEntityTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EntityType | EnumEntityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EntityType[]
    notIn?: $Enums.EntityType[]
    not?: NestedEnumEntityTypeFilter<$PrismaModel> | $Enums.EntityType
  }

  export type NestedEnumEntityTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EntityType | EnumEntityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EntityType[]
    notIn?: $Enums.EntityType[]
    not?: NestedEnumEntityTypeWithAggregatesFilter<$PrismaModel> | $Enums.EntityType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEntityTypeFilter<$PrismaModel>
    _max?: NestedEnumEntityTypeFilter<$PrismaModel>
  }

  export type NestedEnumMaintenanceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceStatus | EnumMaintenanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MaintenanceStatus[]
    notIn?: $Enums.MaintenanceStatus[]
    not?: NestedEnumMaintenanceStatusFilter<$PrismaModel> | $Enums.MaintenanceStatus
  }

  export type NestedEnumMaintenanceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceStatus | EnumMaintenanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MaintenanceStatus[]
    notIn?: $Enums.MaintenanceStatus[]
    not?: NestedEnumMaintenanceStatusWithAggregatesFilter<$PrismaModel> | $Enums.MaintenanceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMaintenanceStatusFilter<$PrismaModel>
    _max?: NestedEnumMaintenanceStatusFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type HardwareItemCreateWithoutResponsibleUserInput = {
    id?: string
    assetTag: string
    type: $Enums.HardwareType
    brand?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    purchaseCost?: number | null
    warrantyEndDate?: Date | string | null
    status?: $Enums.HardwareStatus
    condition?: $Enums.HardwareCondition
    location?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutHardwareItemsInput
    department?: DepartmentCreateNestedOneWithoutHardwareItemsInput
    attachments?: AttachmentCreateNestedManyWithoutHardwareItemInput
    maintenances?: MaintenanceCreateNestedManyWithoutHardwareItemInput
    allocations?: AllocationCreateNestedManyWithoutHardwareItemInput
    softwareInstalls?: SoftwareInstallCreateNestedManyWithoutHardwareItemInput
    auditLogs?: AuditLogCreateNestedManyWithoutHardwareItemInput
  }

  export type HardwareItemUncheckedCreateWithoutResponsibleUserInput = {
    id?: string
    assetTag: string
    type: $Enums.HardwareType
    brand?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    purchaseCost?: number | null
    vendorId?: string | null
    warrantyEndDate?: Date | string | null
    status?: $Enums.HardwareStatus
    condition?: $Enums.HardwareCondition
    location?: string | null
    departmentId?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attachments?: AttachmentUncheckedCreateNestedManyWithoutHardwareItemInput
    maintenances?: MaintenanceUncheckedCreateNestedManyWithoutHardwareItemInput
    allocations?: AllocationUncheckedCreateNestedManyWithoutHardwareItemInput
    softwareInstalls?: SoftwareInstallUncheckedCreateNestedManyWithoutHardwareItemInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutHardwareItemInput
  }

  export type HardwareItemCreateOrConnectWithoutResponsibleUserInput = {
    where: HardwareItemWhereUniqueInput
    create: XOR<HardwareItemCreateWithoutResponsibleUserInput, HardwareItemUncheckedCreateWithoutResponsibleUserInput>
  }

  export type HardwareItemCreateManyResponsibleUserInputEnvelope = {
    data: HardwareItemCreateManyResponsibleUserInput | HardwareItemCreateManyResponsibleUserInput[]
    skipDuplicates?: boolean
  }

  export type AllocationCreateWithoutAssignedToUserInput = {
    id?: string
    checkoutDate?: Date | string
    expectedReturnDate?: Date | string | null
    returnDate?: Date | string | null
    notes?: string | null
    hardwareItem: HardwareItemCreateNestedOneWithoutAllocationsInput
    assignedToDepartment?: DepartmentCreateNestedOneWithoutAllocationsInput
  }

  export type AllocationUncheckedCreateWithoutAssignedToUserInput = {
    id?: string
    hardwareItemId: string
    assignedToDepartmentId?: string | null
    checkoutDate?: Date | string
    expectedReturnDate?: Date | string | null
    returnDate?: Date | string | null
    notes?: string | null
  }

  export type AllocationCreateOrConnectWithoutAssignedToUserInput = {
    where: AllocationWhereUniqueInput
    create: XOR<AllocationCreateWithoutAssignedToUserInput, AllocationUncheckedCreateWithoutAssignedToUserInput>
  }

  export type AllocationCreateManyAssignedToUserInputEnvelope = {
    data: AllocationCreateManyAssignedToUserInput | AllocationCreateManyAssignedToUserInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutUserInput = {
    id?: string
    entityType: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    hardwareItem?: HardwareItemCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: string
    entityType: string
    entityId: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type HardwareItemUpsertWithWhereUniqueWithoutResponsibleUserInput = {
    where: HardwareItemWhereUniqueInput
    update: XOR<HardwareItemUpdateWithoutResponsibleUserInput, HardwareItemUncheckedUpdateWithoutResponsibleUserInput>
    create: XOR<HardwareItemCreateWithoutResponsibleUserInput, HardwareItemUncheckedCreateWithoutResponsibleUserInput>
  }

  export type HardwareItemUpdateWithWhereUniqueWithoutResponsibleUserInput = {
    where: HardwareItemWhereUniqueInput
    data: XOR<HardwareItemUpdateWithoutResponsibleUserInput, HardwareItemUncheckedUpdateWithoutResponsibleUserInput>
  }

  export type HardwareItemUpdateManyWithWhereWithoutResponsibleUserInput = {
    where: HardwareItemScalarWhereInput
    data: XOR<HardwareItemUpdateManyMutationInput, HardwareItemUncheckedUpdateManyWithoutResponsibleUserInput>
  }

  export type HardwareItemScalarWhereInput = {
    AND?: HardwareItemScalarWhereInput | HardwareItemScalarWhereInput[]
    OR?: HardwareItemScalarWhereInput[]
    NOT?: HardwareItemScalarWhereInput | HardwareItemScalarWhereInput[]
    id?: StringFilter<"HardwareItem"> | string
    assetTag?: StringFilter<"HardwareItem"> | string
    type?: EnumHardwareTypeFilter<"HardwareItem"> | $Enums.HardwareType
    brand?: StringNullableFilter<"HardwareItem"> | string | null
    model?: StringNullableFilter<"HardwareItem"> | string | null
    serialNumber?: StringNullableFilter<"HardwareItem"> | string | null
    purchaseDate?: DateTimeNullableFilter<"HardwareItem"> | Date | string | null
    purchaseCost?: FloatNullableFilter<"HardwareItem"> | number | null
    vendorId?: StringNullableFilter<"HardwareItem"> | string | null
    warrantyEndDate?: DateTimeNullableFilter<"HardwareItem"> | Date | string | null
    status?: EnumHardwareStatusFilter<"HardwareItem"> | $Enums.HardwareStatus
    condition?: EnumHardwareConditionFilter<"HardwareItem"> | $Enums.HardwareCondition
    location?: StringNullableFilter<"HardwareItem"> | string | null
    responsibleUserId?: StringNullableFilter<"HardwareItem"> | string | null
    departmentId?: StringNullableFilter<"HardwareItem"> | string | null
    notes?: StringNullableFilter<"HardwareItem"> | string | null
    createdAt?: DateTimeFilter<"HardwareItem"> | Date | string
    updatedAt?: DateTimeFilter<"HardwareItem"> | Date | string
  }

  export type AllocationUpsertWithWhereUniqueWithoutAssignedToUserInput = {
    where: AllocationWhereUniqueInput
    update: XOR<AllocationUpdateWithoutAssignedToUserInput, AllocationUncheckedUpdateWithoutAssignedToUserInput>
    create: XOR<AllocationCreateWithoutAssignedToUserInput, AllocationUncheckedCreateWithoutAssignedToUserInput>
  }

  export type AllocationUpdateWithWhereUniqueWithoutAssignedToUserInput = {
    where: AllocationWhereUniqueInput
    data: XOR<AllocationUpdateWithoutAssignedToUserInput, AllocationUncheckedUpdateWithoutAssignedToUserInput>
  }

  export type AllocationUpdateManyWithWhereWithoutAssignedToUserInput = {
    where: AllocationScalarWhereInput
    data: XOR<AllocationUpdateManyMutationInput, AllocationUncheckedUpdateManyWithoutAssignedToUserInput>
  }

  export type AllocationScalarWhereInput = {
    AND?: AllocationScalarWhereInput | AllocationScalarWhereInput[]
    OR?: AllocationScalarWhereInput[]
    NOT?: AllocationScalarWhereInput | AllocationScalarWhereInput[]
    id?: StringFilter<"Allocation"> | string
    hardwareItemId?: StringFilter<"Allocation"> | string
    assignedToUserId?: StringNullableFilter<"Allocation"> | string | null
    assignedToDepartmentId?: StringNullableFilter<"Allocation"> | string | null
    checkoutDate?: DateTimeFilter<"Allocation"> | Date | string
    expectedReturnDate?: DateTimeNullableFilter<"Allocation"> | Date | string | null
    returnDate?: DateTimeNullableFilter<"Allocation"> | Date | string | null
    notes?: StringNullableFilter<"Allocation"> | string | null
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringFilter<"AuditLog"> | string
    entityType?: StringFilter<"AuditLog"> | string
    entityId?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type HardwareItemCreateWithoutDepartmentInput = {
    id?: string
    assetTag: string
    type: $Enums.HardwareType
    brand?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    purchaseCost?: number | null
    warrantyEndDate?: Date | string | null
    status?: $Enums.HardwareStatus
    condition?: $Enums.HardwareCondition
    location?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutHardwareItemsInput
    responsibleUser?: UserCreateNestedOneWithoutHardwareItemsInput
    attachments?: AttachmentCreateNestedManyWithoutHardwareItemInput
    maintenances?: MaintenanceCreateNestedManyWithoutHardwareItemInput
    allocations?: AllocationCreateNestedManyWithoutHardwareItemInput
    softwareInstalls?: SoftwareInstallCreateNestedManyWithoutHardwareItemInput
    auditLogs?: AuditLogCreateNestedManyWithoutHardwareItemInput
  }

  export type HardwareItemUncheckedCreateWithoutDepartmentInput = {
    id?: string
    assetTag: string
    type: $Enums.HardwareType
    brand?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    purchaseCost?: number | null
    vendorId?: string | null
    warrantyEndDate?: Date | string | null
    status?: $Enums.HardwareStatus
    condition?: $Enums.HardwareCondition
    location?: string | null
    responsibleUserId?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attachments?: AttachmentUncheckedCreateNestedManyWithoutHardwareItemInput
    maintenances?: MaintenanceUncheckedCreateNestedManyWithoutHardwareItemInput
    allocations?: AllocationUncheckedCreateNestedManyWithoutHardwareItemInput
    softwareInstalls?: SoftwareInstallUncheckedCreateNestedManyWithoutHardwareItemInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutHardwareItemInput
  }

  export type HardwareItemCreateOrConnectWithoutDepartmentInput = {
    where: HardwareItemWhereUniqueInput
    create: XOR<HardwareItemCreateWithoutDepartmentInput, HardwareItemUncheckedCreateWithoutDepartmentInput>
  }

  export type HardwareItemCreateManyDepartmentInputEnvelope = {
    data: HardwareItemCreateManyDepartmentInput | HardwareItemCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type AllocationCreateWithoutAssignedToDepartmentInput = {
    id?: string
    checkoutDate?: Date | string
    expectedReturnDate?: Date | string | null
    returnDate?: Date | string | null
    notes?: string | null
    hardwareItem: HardwareItemCreateNestedOneWithoutAllocationsInput
    assignedToUser?: UserCreateNestedOneWithoutAllocationsInput
  }

  export type AllocationUncheckedCreateWithoutAssignedToDepartmentInput = {
    id?: string
    hardwareItemId: string
    assignedToUserId?: string | null
    checkoutDate?: Date | string
    expectedReturnDate?: Date | string | null
    returnDate?: Date | string | null
    notes?: string | null
  }

  export type AllocationCreateOrConnectWithoutAssignedToDepartmentInput = {
    where: AllocationWhereUniqueInput
    create: XOR<AllocationCreateWithoutAssignedToDepartmentInput, AllocationUncheckedCreateWithoutAssignedToDepartmentInput>
  }

  export type AllocationCreateManyAssignedToDepartmentInputEnvelope = {
    data: AllocationCreateManyAssignedToDepartmentInput | AllocationCreateManyAssignedToDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type HardwareItemUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: HardwareItemWhereUniqueInput
    update: XOR<HardwareItemUpdateWithoutDepartmentInput, HardwareItemUncheckedUpdateWithoutDepartmentInput>
    create: XOR<HardwareItemCreateWithoutDepartmentInput, HardwareItemUncheckedCreateWithoutDepartmentInput>
  }

  export type HardwareItemUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: HardwareItemWhereUniqueInput
    data: XOR<HardwareItemUpdateWithoutDepartmentInput, HardwareItemUncheckedUpdateWithoutDepartmentInput>
  }

  export type HardwareItemUpdateManyWithWhereWithoutDepartmentInput = {
    where: HardwareItemScalarWhereInput
    data: XOR<HardwareItemUpdateManyMutationInput, HardwareItemUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type AllocationUpsertWithWhereUniqueWithoutAssignedToDepartmentInput = {
    where: AllocationWhereUniqueInput
    update: XOR<AllocationUpdateWithoutAssignedToDepartmentInput, AllocationUncheckedUpdateWithoutAssignedToDepartmentInput>
    create: XOR<AllocationCreateWithoutAssignedToDepartmentInput, AllocationUncheckedCreateWithoutAssignedToDepartmentInput>
  }

  export type AllocationUpdateWithWhereUniqueWithoutAssignedToDepartmentInput = {
    where: AllocationWhereUniqueInput
    data: XOR<AllocationUpdateWithoutAssignedToDepartmentInput, AllocationUncheckedUpdateWithoutAssignedToDepartmentInput>
  }

  export type AllocationUpdateManyWithWhereWithoutAssignedToDepartmentInput = {
    where: AllocationScalarWhereInput
    data: XOR<AllocationUpdateManyMutationInput, AllocationUncheckedUpdateManyWithoutAssignedToDepartmentInput>
  }

  export type HardwareItemCreateWithoutVendorInput = {
    id?: string
    assetTag: string
    type: $Enums.HardwareType
    brand?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    purchaseCost?: number | null
    warrantyEndDate?: Date | string | null
    status?: $Enums.HardwareStatus
    condition?: $Enums.HardwareCondition
    location?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    responsibleUser?: UserCreateNestedOneWithoutHardwareItemsInput
    department?: DepartmentCreateNestedOneWithoutHardwareItemsInput
    attachments?: AttachmentCreateNestedManyWithoutHardwareItemInput
    maintenances?: MaintenanceCreateNestedManyWithoutHardwareItemInput
    allocations?: AllocationCreateNestedManyWithoutHardwareItemInput
    softwareInstalls?: SoftwareInstallCreateNestedManyWithoutHardwareItemInput
    auditLogs?: AuditLogCreateNestedManyWithoutHardwareItemInput
  }

  export type HardwareItemUncheckedCreateWithoutVendorInput = {
    id?: string
    assetTag: string
    type: $Enums.HardwareType
    brand?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    purchaseCost?: number | null
    warrantyEndDate?: Date | string | null
    status?: $Enums.HardwareStatus
    condition?: $Enums.HardwareCondition
    location?: string | null
    responsibleUserId?: string | null
    departmentId?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attachments?: AttachmentUncheckedCreateNestedManyWithoutHardwareItemInput
    maintenances?: MaintenanceUncheckedCreateNestedManyWithoutHardwareItemInput
    allocations?: AllocationUncheckedCreateNestedManyWithoutHardwareItemInput
    softwareInstalls?: SoftwareInstallUncheckedCreateNestedManyWithoutHardwareItemInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutHardwareItemInput
  }

  export type HardwareItemCreateOrConnectWithoutVendorInput = {
    where: HardwareItemWhereUniqueInput
    create: XOR<HardwareItemCreateWithoutVendorInput, HardwareItemUncheckedCreateWithoutVendorInput>
  }

  export type HardwareItemCreateManyVendorInputEnvelope = {
    data: HardwareItemCreateManyVendorInput | HardwareItemCreateManyVendorInput[]
    skipDuplicates?: boolean
  }

  export type LicenseCreateWithoutVendorInput = {
    id?: string
    key: string
    seatsTotal: number
    seatsInUse?: number
    purchaseDate?: Date | string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    renewalType?: $Enums.RenewalType
    cost?: number | null
    notes?: string | null
    software: SoftwareCreateNestedOneWithoutLicensesInput
    softwareInstalls?: SoftwareInstallCreateNestedManyWithoutLicenseInput
  }

  export type LicenseUncheckedCreateWithoutVendorInput = {
    id?: string
    softwareId: string
    key: string
    seatsTotal: number
    seatsInUse?: number
    purchaseDate?: Date | string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    renewalType?: $Enums.RenewalType
    cost?: number | null
    notes?: string | null
    softwareInstalls?: SoftwareInstallUncheckedCreateNestedManyWithoutLicenseInput
  }

  export type LicenseCreateOrConnectWithoutVendorInput = {
    where: LicenseWhereUniqueInput
    create: XOR<LicenseCreateWithoutVendorInput, LicenseUncheckedCreateWithoutVendorInput>
  }

  export type LicenseCreateManyVendorInputEnvelope = {
    data: LicenseCreateManyVendorInput | LicenseCreateManyVendorInput[]
    skipDuplicates?: boolean
  }

  export type SoftwareCreateWithoutVendorInput = {
    id?: string
    name: string
    version?: string | null
    category?: string | null
    notes?: string | null
    licenses?: LicenseCreateNestedManyWithoutSoftwareInput
    softwareInstalls?: SoftwareInstallCreateNestedManyWithoutSoftwareInput
  }

  export type SoftwareUncheckedCreateWithoutVendorInput = {
    id?: string
    name: string
    version?: string | null
    category?: string | null
    notes?: string | null
    licenses?: LicenseUncheckedCreateNestedManyWithoutSoftwareInput
    softwareInstalls?: SoftwareInstallUncheckedCreateNestedManyWithoutSoftwareInput
  }

  export type SoftwareCreateOrConnectWithoutVendorInput = {
    where: SoftwareWhereUniqueInput
    create: XOR<SoftwareCreateWithoutVendorInput, SoftwareUncheckedCreateWithoutVendorInput>
  }

  export type SoftwareCreateManyVendorInputEnvelope = {
    data: SoftwareCreateManyVendorInput | SoftwareCreateManyVendorInput[]
    skipDuplicates?: boolean
  }

  export type HardwareItemUpsertWithWhereUniqueWithoutVendorInput = {
    where: HardwareItemWhereUniqueInput
    update: XOR<HardwareItemUpdateWithoutVendorInput, HardwareItemUncheckedUpdateWithoutVendorInput>
    create: XOR<HardwareItemCreateWithoutVendorInput, HardwareItemUncheckedCreateWithoutVendorInput>
  }

  export type HardwareItemUpdateWithWhereUniqueWithoutVendorInput = {
    where: HardwareItemWhereUniqueInput
    data: XOR<HardwareItemUpdateWithoutVendorInput, HardwareItemUncheckedUpdateWithoutVendorInput>
  }

  export type HardwareItemUpdateManyWithWhereWithoutVendorInput = {
    where: HardwareItemScalarWhereInput
    data: XOR<HardwareItemUpdateManyMutationInput, HardwareItemUncheckedUpdateManyWithoutVendorInput>
  }

  export type LicenseUpsertWithWhereUniqueWithoutVendorInput = {
    where: LicenseWhereUniqueInput
    update: XOR<LicenseUpdateWithoutVendorInput, LicenseUncheckedUpdateWithoutVendorInput>
    create: XOR<LicenseCreateWithoutVendorInput, LicenseUncheckedCreateWithoutVendorInput>
  }

  export type LicenseUpdateWithWhereUniqueWithoutVendorInput = {
    where: LicenseWhereUniqueInput
    data: XOR<LicenseUpdateWithoutVendorInput, LicenseUncheckedUpdateWithoutVendorInput>
  }

  export type LicenseUpdateManyWithWhereWithoutVendorInput = {
    where: LicenseScalarWhereInput
    data: XOR<LicenseUpdateManyMutationInput, LicenseUncheckedUpdateManyWithoutVendorInput>
  }

  export type LicenseScalarWhereInput = {
    AND?: LicenseScalarWhereInput | LicenseScalarWhereInput[]
    OR?: LicenseScalarWhereInput[]
    NOT?: LicenseScalarWhereInput | LicenseScalarWhereInput[]
    id?: StringFilter<"License"> | string
    softwareId?: StringFilter<"License"> | string
    key?: StringFilter<"License"> | string
    seatsTotal?: IntFilter<"License"> | number
    seatsInUse?: IntFilter<"License"> | number
    purchaseDate?: DateTimeNullableFilter<"License"> | Date | string | null
    startDate?: DateTimeNullableFilter<"License"> | Date | string | null
    endDate?: DateTimeNullableFilter<"License"> | Date | string | null
    renewalType?: EnumRenewalTypeFilter<"License"> | $Enums.RenewalType
    cost?: FloatNullableFilter<"License"> | number | null
    vendorId?: StringNullableFilter<"License"> | string | null
    notes?: StringNullableFilter<"License"> | string | null
  }

  export type SoftwareUpsertWithWhereUniqueWithoutVendorInput = {
    where: SoftwareWhereUniqueInput
    update: XOR<SoftwareUpdateWithoutVendorInput, SoftwareUncheckedUpdateWithoutVendorInput>
    create: XOR<SoftwareCreateWithoutVendorInput, SoftwareUncheckedCreateWithoutVendorInput>
  }

  export type SoftwareUpdateWithWhereUniqueWithoutVendorInput = {
    where: SoftwareWhereUniqueInput
    data: XOR<SoftwareUpdateWithoutVendorInput, SoftwareUncheckedUpdateWithoutVendorInput>
  }

  export type SoftwareUpdateManyWithWhereWithoutVendorInput = {
    where: SoftwareScalarWhereInput
    data: XOR<SoftwareUpdateManyMutationInput, SoftwareUncheckedUpdateManyWithoutVendorInput>
  }

  export type SoftwareScalarWhereInput = {
    AND?: SoftwareScalarWhereInput | SoftwareScalarWhereInput[]
    OR?: SoftwareScalarWhereInput[]
    NOT?: SoftwareScalarWhereInput | SoftwareScalarWhereInput[]
    id?: StringFilter<"Software"> | string
    name?: StringFilter<"Software"> | string
    version?: StringNullableFilter<"Software"> | string | null
    category?: StringNullableFilter<"Software"> | string | null
    notes?: StringNullableFilter<"Software"> | string | null
    vendorId?: StringNullableFilter<"Software"> | string | null
  }

  export type VendorCreateWithoutSoftwareInput = {
    id?: string
    name: string
    type: $Enums.VendorType
    cnpj?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    address?: string | null
    notes?: string | null
    hardwareItems?: HardwareItemCreateNestedManyWithoutVendorInput
    licenses?: LicenseCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateWithoutSoftwareInput = {
    id?: string
    name: string
    type: $Enums.VendorType
    cnpj?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    address?: string | null
    notes?: string | null
    hardwareItems?: HardwareItemUncheckedCreateNestedManyWithoutVendorInput
    licenses?: LicenseUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorCreateOrConnectWithoutSoftwareInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutSoftwareInput, VendorUncheckedCreateWithoutSoftwareInput>
  }

  export type LicenseCreateWithoutSoftwareInput = {
    id?: string
    key: string
    seatsTotal: number
    seatsInUse?: number
    purchaseDate?: Date | string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    renewalType?: $Enums.RenewalType
    cost?: number | null
    notes?: string | null
    vendor?: VendorCreateNestedOneWithoutLicensesInput
    softwareInstalls?: SoftwareInstallCreateNestedManyWithoutLicenseInput
  }

  export type LicenseUncheckedCreateWithoutSoftwareInput = {
    id?: string
    key: string
    seatsTotal: number
    seatsInUse?: number
    purchaseDate?: Date | string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    renewalType?: $Enums.RenewalType
    cost?: number | null
    vendorId?: string | null
    notes?: string | null
    softwareInstalls?: SoftwareInstallUncheckedCreateNestedManyWithoutLicenseInput
  }

  export type LicenseCreateOrConnectWithoutSoftwareInput = {
    where: LicenseWhereUniqueInput
    create: XOR<LicenseCreateWithoutSoftwareInput, LicenseUncheckedCreateWithoutSoftwareInput>
  }

  export type LicenseCreateManySoftwareInputEnvelope = {
    data: LicenseCreateManySoftwareInput | LicenseCreateManySoftwareInput[]
    skipDuplicates?: boolean
  }

  export type SoftwareInstallCreateWithoutSoftwareInput = {
    id?: string
    installedAt?: Date | string
    uninstalledAt?: Date | string | null
    hardwareItem: HardwareItemCreateNestedOneWithoutSoftwareInstallsInput
    license?: LicenseCreateNestedOneWithoutSoftwareInstallsInput
  }

  export type SoftwareInstallUncheckedCreateWithoutSoftwareInput = {
    id?: string
    hardwareItemId: string
    licenseId?: string | null
    installedAt?: Date | string
    uninstalledAt?: Date | string | null
  }

  export type SoftwareInstallCreateOrConnectWithoutSoftwareInput = {
    where: SoftwareInstallWhereUniqueInput
    create: XOR<SoftwareInstallCreateWithoutSoftwareInput, SoftwareInstallUncheckedCreateWithoutSoftwareInput>
  }

  export type SoftwareInstallCreateManySoftwareInputEnvelope = {
    data: SoftwareInstallCreateManySoftwareInput | SoftwareInstallCreateManySoftwareInput[]
    skipDuplicates?: boolean
  }

  export type VendorUpsertWithoutSoftwareInput = {
    update: XOR<VendorUpdateWithoutSoftwareInput, VendorUncheckedUpdateWithoutSoftwareInput>
    create: XOR<VendorCreateWithoutSoftwareInput, VendorUncheckedCreateWithoutSoftwareInput>
    where?: VendorWhereInput
  }

  export type VendorUpdateToOneWithWhereWithoutSoftwareInput = {
    where?: VendorWhereInput
    data: XOR<VendorUpdateWithoutSoftwareInput, VendorUncheckedUpdateWithoutSoftwareInput>
  }

  export type VendorUpdateWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumVendorTypeFieldUpdateOperationsInput | $Enums.VendorType
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hardwareItems?: HardwareItemUpdateManyWithoutVendorNestedInput
    licenses?: LicenseUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumVendorTypeFieldUpdateOperationsInput | $Enums.VendorType
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hardwareItems?: HardwareItemUncheckedUpdateManyWithoutVendorNestedInput
    licenses?: LicenseUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type LicenseUpsertWithWhereUniqueWithoutSoftwareInput = {
    where: LicenseWhereUniqueInput
    update: XOR<LicenseUpdateWithoutSoftwareInput, LicenseUncheckedUpdateWithoutSoftwareInput>
    create: XOR<LicenseCreateWithoutSoftwareInput, LicenseUncheckedCreateWithoutSoftwareInput>
  }

  export type LicenseUpdateWithWhereUniqueWithoutSoftwareInput = {
    where: LicenseWhereUniqueInput
    data: XOR<LicenseUpdateWithoutSoftwareInput, LicenseUncheckedUpdateWithoutSoftwareInput>
  }

  export type LicenseUpdateManyWithWhereWithoutSoftwareInput = {
    where: LicenseScalarWhereInput
    data: XOR<LicenseUpdateManyMutationInput, LicenseUncheckedUpdateManyWithoutSoftwareInput>
  }

  export type SoftwareInstallUpsertWithWhereUniqueWithoutSoftwareInput = {
    where: SoftwareInstallWhereUniqueInput
    update: XOR<SoftwareInstallUpdateWithoutSoftwareInput, SoftwareInstallUncheckedUpdateWithoutSoftwareInput>
    create: XOR<SoftwareInstallCreateWithoutSoftwareInput, SoftwareInstallUncheckedCreateWithoutSoftwareInput>
  }

  export type SoftwareInstallUpdateWithWhereUniqueWithoutSoftwareInput = {
    where: SoftwareInstallWhereUniqueInput
    data: XOR<SoftwareInstallUpdateWithoutSoftwareInput, SoftwareInstallUncheckedUpdateWithoutSoftwareInput>
  }

  export type SoftwareInstallUpdateManyWithWhereWithoutSoftwareInput = {
    where: SoftwareInstallScalarWhereInput
    data: XOR<SoftwareInstallUpdateManyMutationInput, SoftwareInstallUncheckedUpdateManyWithoutSoftwareInput>
  }

  export type SoftwareInstallScalarWhereInput = {
    AND?: SoftwareInstallScalarWhereInput | SoftwareInstallScalarWhereInput[]
    OR?: SoftwareInstallScalarWhereInput[]
    NOT?: SoftwareInstallScalarWhereInput | SoftwareInstallScalarWhereInput[]
    id?: StringFilter<"SoftwareInstall"> | string
    hardwareItemId?: StringFilter<"SoftwareInstall"> | string
    softwareId?: StringFilter<"SoftwareInstall"> | string
    licenseId?: StringNullableFilter<"SoftwareInstall"> | string | null
    installedAt?: DateTimeFilter<"SoftwareInstall"> | Date | string
    uninstalledAt?: DateTimeNullableFilter<"SoftwareInstall"> | Date | string | null
  }

  export type SoftwareCreateWithoutLicensesInput = {
    id?: string
    name: string
    version?: string | null
    category?: string | null
    notes?: string | null
    vendor?: VendorCreateNestedOneWithoutSoftwareInput
    softwareInstalls?: SoftwareInstallCreateNestedManyWithoutSoftwareInput
  }

  export type SoftwareUncheckedCreateWithoutLicensesInput = {
    id?: string
    name: string
    version?: string | null
    category?: string | null
    notes?: string | null
    vendorId?: string | null
    softwareInstalls?: SoftwareInstallUncheckedCreateNestedManyWithoutSoftwareInput
  }

  export type SoftwareCreateOrConnectWithoutLicensesInput = {
    where: SoftwareWhereUniqueInput
    create: XOR<SoftwareCreateWithoutLicensesInput, SoftwareUncheckedCreateWithoutLicensesInput>
  }

  export type VendorCreateWithoutLicensesInput = {
    id?: string
    name: string
    type: $Enums.VendorType
    cnpj?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    address?: string | null
    notes?: string | null
    hardwareItems?: HardwareItemCreateNestedManyWithoutVendorInput
    software?: SoftwareCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateWithoutLicensesInput = {
    id?: string
    name: string
    type: $Enums.VendorType
    cnpj?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    address?: string | null
    notes?: string | null
    hardwareItems?: HardwareItemUncheckedCreateNestedManyWithoutVendorInput
    software?: SoftwareUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorCreateOrConnectWithoutLicensesInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutLicensesInput, VendorUncheckedCreateWithoutLicensesInput>
  }

  export type SoftwareInstallCreateWithoutLicenseInput = {
    id?: string
    installedAt?: Date | string
    uninstalledAt?: Date | string | null
    hardwareItem: HardwareItemCreateNestedOneWithoutSoftwareInstallsInput
    software: SoftwareCreateNestedOneWithoutSoftwareInstallsInput
  }

  export type SoftwareInstallUncheckedCreateWithoutLicenseInput = {
    id?: string
    hardwareItemId: string
    softwareId: string
    installedAt?: Date | string
    uninstalledAt?: Date | string | null
  }

  export type SoftwareInstallCreateOrConnectWithoutLicenseInput = {
    where: SoftwareInstallWhereUniqueInput
    create: XOR<SoftwareInstallCreateWithoutLicenseInput, SoftwareInstallUncheckedCreateWithoutLicenseInput>
  }

  export type SoftwareInstallCreateManyLicenseInputEnvelope = {
    data: SoftwareInstallCreateManyLicenseInput | SoftwareInstallCreateManyLicenseInput[]
    skipDuplicates?: boolean
  }

  export type SoftwareUpsertWithoutLicensesInput = {
    update: XOR<SoftwareUpdateWithoutLicensesInput, SoftwareUncheckedUpdateWithoutLicensesInput>
    create: XOR<SoftwareCreateWithoutLicensesInput, SoftwareUncheckedCreateWithoutLicensesInput>
    where?: SoftwareWhereInput
  }

  export type SoftwareUpdateToOneWithWhereWithoutLicensesInput = {
    where?: SoftwareWhereInput
    data: XOR<SoftwareUpdateWithoutLicensesInput, SoftwareUncheckedUpdateWithoutLicensesInput>
  }

  export type SoftwareUpdateWithoutLicensesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    vendor?: VendorUpdateOneWithoutSoftwareNestedInput
    softwareInstalls?: SoftwareInstallUpdateManyWithoutSoftwareNestedInput
  }

  export type SoftwareUncheckedUpdateWithoutLicensesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    softwareInstalls?: SoftwareInstallUncheckedUpdateManyWithoutSoftwareNestedInput
  }

  export type VendorUpsertWithoutLicensesInput = {
    update: XOR<VendorUpdateWithoutLicensesInput, VendorUncheckedUpdateWithoutLicensesInput>
    create: XOR<VendorCreateWithoutLicensesInput, VendorUncheckedCreateWithoutLicensesInput>
    where?: VendorWhereInput
  }

  export type VendorUpdateToOneWithWhereWithoutLicensesInput = {
    where?: VendorWhereInput
    data: XOR<VendorUpdateWithoutLicensesInput, VendorUncheckedUpdateWithoutLicensesInput>
  }

  export type VendorUpdateWithoutLicensesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumVendorTypeFieldUpdateOperationsInput | $Enums.VendorType
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hardwareItems?: HardwareItemUpdateManyWithoutVendorNestedInput
    software?: SoftwareUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateWithoutLicensesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumVendorTypeFieldUpdateOperationsInput | $Enums.VendorType
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hardwareItems?: HardwareItemUncheckedUpdateManyWithoutVendorNestedInput
    software?: SoftwareUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type SoftwareInstallUpsertWithWhereUniqueWithoutLicenseInput = {
    where: SoftwareInstallWhereUniqueInput
    update: XOR<SoftwareInstallUpdateWithoutLicenseInput, SoftwareInstallUncheckedUpdateWithoutLicenseInput>
    create: XOR<SoftwareInstallCreateWithoutLicenseInput, SoftwareInstallUncheckedCreateWithoutLicenseInput>
  }

  export type SoftwareInstallUpdateWithWhereUniqueWithoutLicenseInput = {
    where: SoftwareInstallWhereUniqueInput
    data: XOR<SoftwareInstallUpdateWithoutLicenseInput, SoftwareInstallUncheckedUpdateWithoutLicenseInput>
  }

  export type SoftwareInstallUpdateManyWithWhereWithoutLicenseInput = {
    where: SoftwareInstallScalarWhereInput
    data: XOR<SoftwareInstallUpdateManyMutationInput, SoftwareInstallUncheckedUpdateManyWithoutLicenseInput>
  }

  export type VendorCreateWithoutHardwareItemsInput = {
    id?: string
    name: string
    type: $Enums.VendorType
    cnpj?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    address?: string | null
    notes?: string | null
    licenses?: LicenseCreateNestedManyWithoutVendorInput
    software?: SoftwareCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateWithoutHardwareItemsInput = {
    id?: string
    name: string
    type: $Enums.VendorType
    cnpj?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    address?: string | null
    notes?: string | null
    licenses?: LicenseUncheckedCreateNestedManyWithoutVendorInput
    software?: SoftwareUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorCreateOrConnectWithoutHardwareItemsInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutHardwareItemsInput, VendorUncheckedCreateWithoutHardwareItemsInput>
  }

  export type UserCreateWithoutHardwareItemsInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    allocations?: AllocationCreateNestedManyWithoutAssignedToUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutHardwareItemsInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    allocations?: AllocationUncheckedCreateNestedManyWithoutAssignedToUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutHardwareItemsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHardwareItemsInput, UserUncheckedCreateWithoutHardwareItemsInput>
  }

  export type DepartmentCreateWithoutHardwareItemsInput = {
    id?: string
    name: string
    description?: string | null
    allocations?: AllocationCreateNestedManyWithoutAssignedToDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutHardwareItemsInput = {
    id?: string
    name: string
    description?: string | null
    allocations?: AllocationUncheckedCreateNestedManyWithoutAssignedToDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutHardwareItemsInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutHardwareItemsInput, DepartmentUncheckedCreateWithoutHardwareItemsInput>
  }

  export type AttachmentCreateWithoutHardwareItemInput = {
    id?: string
    entityType: $Enums.EntityType
    fileUrl: string
    fileName: string
    mimeType: string
    uploadedAt?: Date | string
  }

  export type AttachmentUncheckedCreateWithoutHardwareItemInput = {
    id?: string
    entityType: $Enums.EntityType
    fileUrl: string
    fileName: string
    mimeType: string
    uploadedAt?: Date | string
  }

  export type AttachmentCreateOrConnectWithoutHardwareItemInput = {
    where: AttachmentWhereUniqueInput
    create: XOR<AttachmentCreateWithoutHardwareItemInput, AttachmentUncheckedCreateWithoutHardwareItemInput>
  }

  export type AttachmentCreateManyHardwareItemInputEnvelope = {
    data: AttachmentCreateManyHardwareItemInput | AttachmentCreateManyHardwareItemInput[]
    skipDuplicates?: boolean
  }

  export type MaintenanceCreateWithoutHardwareItemInput = {
    id?: string
    startDate: Date | string
    endDate?: Date | string | null
    provider: string
    description: string
    cost?: number | null
    status?: $Enums.MaintenanceStatus
    notes?: string | null
  }

  export type MaintenanceUncheckedCreateWithoutHardwareItemInput = {
    id?: string
    startDate: Date | string
    endDate?: Date | string | null
    provider: string
    description: string
    cost?: number | null
    status?: $Enums.MaintenanceStatus
    notes?: string | null
  }

  export type MaintenanceCreateOrConnectWithoutHardwareItemInput = {
    where: MaintenanceWhereUniqueInput
    create: XOR<MaintenanceCreateWithoutHardwareItemInput, MaintenanceUncheckedCreateWithoutHardwareItemInput>
  }

  export type MaintenanceCreateManyHardwareItemInputEnvelope = {
    data: MaintenanceCreateManyHardwareItemInput | MaintenanceCreateManyHardwareItemInput[]
    skipDuplicates?: boolean
  }

  export type AllocationCreateWithoutHardwareItemInput = {
    id?: string
    checkoutDate?: Date | string
    expectedReturnDate?: Date | string | null
    returnDate?: Date | string | null
    notes?: string | null
    assignedToUser?: UserCreateNestedOneWithoutAllocationsInput
    assignedToDepartment?: DepartmentCreateNestedOneWithoutAllocationsInput
  }

  export type AllocationUncheckedCreateWithoutHardwareItemInput = {
    id?: string
    assignedToUserId?: string | null
    assignedToDepartmentId?: string | null
    checkoutDate?: Date | string
    expectedReturnDate?: Date | string | null
    returnDate?: Date | string | null
    notes?: string | null
  }

  export type AllocationCreateOrConnectWithoutHardwareItemInput = {
    where: AllocationWhereUniqueInput
    create: XOR<AllocationCreateWithoutHardwareItemInput, AllocationUncheckedCreateWithoutHardwareItemInput>
  }

  export type AllocationCreateManyHardwareItemInputEnvelope = {
    data: AllocationCreateManyHardwareItemInput | AllocationCreateManyHardwareItemInput[]
    skipDuplicates?: boolean
  }

  export type SoftwareInstallCreateWithoutHardwareItemInput = {
    id?: string
    installedAt?: Date | string
    uninstalledAt?: Date | string | null
    software: SoftwareCreateNestedOneWithoutSoftwareInstallsInput
    license?: LicenseCreateNestedOneWithoutSoftwareInstallsInput
  }

  export type SoftwareInstallUncheckedCreateWithoutHardwareItemInput = {
    id?: string
    softwareId: string
    licenseId?: string | null
    installedAt?: Date | string
    uninstalledAt?: Date | string | null
  }

  export type SoftwareInstallCreateOrConnectWithoutHardwareItemInput = {
    where: SoftwareInstallWhereUniqueInput
    create: XOR<SoftwareInstallCreateWithoutHardwareItemInput, SoftwareInstallUncheckedCreateWithoutHardwareItemInput>
  }

  export type SoftwareInstallCreateManyHardwareItemInputEnvelope = {
    data: SoftwareInstallCreateManyHardwareItemInput | SoftwareInstallCreateManyHardwareItemInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutHardwareItemInput = {
    id?: string
    entityType: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateWithoutHardwareItemInput = {
    id?: string
    userId: string
    entityType: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutHardwareItemInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutHardwareItemInput, AuditLogUncheckedCreateWithoutHardwareItemInput>
  }

  export type AuditLogCreateManyHardwareItemInputEnvelope = {
    data: AuditLogCreateManyHardwareItemInput | AuditLogCreateManyHardwareItemInput[]
    skipDuplicates?: boolean
  }

  export type VendorUpsertWithoutHardwareItemsInput = {
    update: XOR<VendorUpdateWithoutHardwareItemsInput, VendorUncheckedUpdateWithoutHardwareItemsInput>
    create: XOR<VendorCreateWithoutHardwareItemsInput, VendorUncheckedCreateWithoutHardwareItemsInput>
    where?: VendorWhereInput
  }

  export type VendorUpdateToOneWithWhereWithoutHardwareItemsInput = {
    where?: VendorWhereInput
    data: XOR<VendorUpdateWithoutHardwareItemsInput, VendorUncheckedUpdateWithoutHardwareItemsInput>
  }

  export type VendorUpdateWithoutHardwareItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumVendorTypeFieldUpdateOperationsInput | $Enums.VendorType
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    licenses?: LicenseUpdateManyWithoutVendorNestedInput
    software?: SoftwareUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateWithoutHardwareItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumVendorTypeFieldUpdateOperationsInput | $Enums.VendorType
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    licenses?: LicenseUncheckedUpdateManyWithoutVendorNestedInput
    software?: SoftwareUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type UserUpsertWithoutHardwareItemsInput = {
    update: XOR<UserUpdateWithoutHardwareItemsInput, UserUncheckedUpdateWithoutHardwareItemsInput>
    create: XOR<UserCreateWithoutHardwareItemsInput, UserUncheckedCreateWithoutHardwareItemsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutHardwareItemsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutHardwareItemsInput, UserUncheckedUpdateWithoutHardwareItemsInput>
  }

  export type UserUpdateWithoutHardwareItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allocations?: AllocationUpdateManyWithoutAssignedToUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutHardwareItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allocations?: AllocationUncheckedUpdateManyWithoutAssignedToUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DepartmentUpsertWithoutHardwareItemsInput = {
    update: XOR<DepartmentUpdateWithoutHardwareItemsInput, DepartmentUncheckedUpdateWithoutHardwareItemsInput>
    create: XOR<DepartmentCreateWithoutHardwareItemsInput, DepartmentUncheckedCreateWithoutHardwareItemsInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutHardwareItemsInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutHardwareItemsInput, DepartmentUncheckedUpdateWithoutHardwareItemsInput>
  }

  export type DepartmentUpdateWithoutHardwareItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    allocations?: AllocationUpdateManyWithoutAssignedToDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutHardwareItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    allocations?: AllocationUncheckedUpdateManyWithoutAssignedToDepartmentNestedInput
  }

  export type AttachmentUpsertWithWhereUniqueWithoutHardwareItemInput = {
    where: AttachmentWhereUniqueInput
    update: XOR<AttachmentUpdateWithoutHardwareItemInput, AttachmentUncheckedUpdateWithoutHardwareItemInput>
    create: XOR<AttachmentCreateWithoutHardwareItemInput, AttachmentUncheckedCreateWithoutHardwareItemInput>
  }

  export type AttachmentUpdateWithWhereUniqueWithoutHardwareItemInput = {
    where: AttachmentWhereUniqueInput
    data: XOR<AttachmentUpdateWithoutHardwareItemInput, AttachmentUncheckedUpdateWithoutHardwareItemInput>
  }

  export type AttachmentUpdateManyWithWhereWithoutHardwareItemInput = {
    where: AttachmentScalarWhereInput
    data: XOR<AttachmentUpdateManyMutationInput, AttachmentUncheckedUpdateManyWithoutHardwareItemInput>
  }

  export type AttachmentScalarWhereInput = {
    AND?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
    OR?: AttachmentScalarWhereInput[]
    NOT?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
    id?: StringFilter<"Attachment"> | string
    entityType?: EnumEntityTypeFilter<"Attachment"> | $Enums.EntityType
    entityId?: StringFilter<"Attachment"> | string
    fileUrl?: StringFilter<"Attachment"> | string
    fileName?: StringFilter<"Attachment"> | string
    mimeType?: StringFilter<"Attachment"> | string
    uploadedAt?: DateTimeFilter<"Attachment"> | Date | string
  }

  export type MaintenanceUpsertWithWhereUniqueWithoutHardwareItemInput = {
    where: MaintenanceWhereUniqueInput
    update: XOR<MaintenanceUpdateWithoutHardwareItemInput, MaintenanceUncheckedUpdateWithoutHardwareItemInput>
    create: XOR<MaintenanceCreateWithoutHardwareItemInput, MaintenanceUncheckedCreateWithoutHardwareItemInput>
  }

  export type MaintenanceUpdateWithWhereUniqueWithoutHardwareItemInput = {
    where: MaintenanceWhereUniqueInput
    data: XOR<MaintenanceUpdateWithoutHardwareItemInput, MaintenanceUncheckedUpdateWithoutHardwareItemInput>
  }

  export type MaintenanceUpdateManyWithWhereWithoutHardwareItemInput = {
    where: MaintenanceScalarWhereInput
    data: XOR<MaintenanceUpdateManyMutationInput, MaintenanceUncheckedUpdateManyWithoutHardwareItemInput>
  }

  export type MaintenanceScalarWhereInput = {
    AND?: MaintenanceScalarWhereInput | MaintenanceScalarWhereInput[]
    OR?: MaintenanceScalarWhereInput[]
    NOT?: MaintenanceScalarWhereInput | MaintenanceScalarWhereInput[]
    id?: StringFilter<"Maintenance"> | string
    hardwareItemId?: StringFilter<"Maintenance"> | string
    startDate?: DateTimeFilter<"Maintenance"> | Date | string
    endDate?: DateTimeNullableFilter<"Maintenance"> | Date | string | null
    provider?: StringFilter<"Maintenance"> | string
    description?: StringFilter<"Maintenance"> | string
    cost?: FloatNullableFilter<"Maintenance"> | number | null
    status?: EnumMaintenanceStatusFilter<"Maintenance"> | $Enums.MaintenanceStatus
    notes?: StringNullableFilter<"Maintenance"> | string | null
  }

  export type AllocationUpsertWithWhereUniqueWithoutHardwareItemInput = {
    where: AllocationWhereUniqueInput
    update: XOR<AllocationUpdateWithoutHardwareItemInput, AllocationUncheckedUpdateWithoutHardwareItemInput>
    create: XOR<AllocationCreateWithoutHardwareItemInput, AllocationUncheckedCreateWithoutHardwareItemInput>
  }

  export type AllocationUpdateWithWhereUniqueWithoutHardwareItemInput = {
    where: AllocationWhereUniqueInput
    data: XOR<AllocationUpdateWithoutHardwareItemInput, AllocationUncheckedUpdateWithoutHardwareItemInput>
  }

  export type AllocationUpdateManyWithWhereWithoutHardwareItemInput = {
    where: AllocationScalarWhereInput
    data: XOR<AllocationUpdateManyMutationInput, AllocationUncheckedUpdateManyWithoutHardwareItemInput>
  }

  export type SoftwareInstallUpsertWithWhereUniqueWithoutHardwareItemInput = {
    where: SoftwareInstallWhereUniqueInput
    update: XOR<SoftwareInstallUpdateWithoutHardwareItemInput, SoftwareInstallUncheckedUpdateWithoutHardwareItemInput>
    create: XOR<SoftwareInstallCreateWithoutHardwareItemInput, SoftwareInstallUncheckedCreateWithoutHardwareItemInput>
  }

  export type SoftwareInstallUpdateWithWhereUniqueWithoutHardwareItemInput = {
    where: SoftwareInstallWhereUniqueInput
    data: XOR<SoftwareInstallUpdateWithoutHardwareItemInput, SoftwareInstallUncheckedUpdateWithoutHardwareItemInput>
  }

  export type SoftwareInstallUpdateManyWithWhereWithoutHardwareItemInput = {
    where: SoftwareInstallScalarWhereInput
    data: XOR<SoftwareInstallUpdateManyMutationInput, SoftwareInstallUncheckedUpdateManyWithoutHardwareItemInput>
  }

  export type AuditLogUpsertWithWhereUniqueWithoutHardwareItemInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutHardwareItemInput, AuditLogUncheckedUpdateWithoutHardwareItemInput>
    create: XOR<AuditLogCreateWithoutHardwareItemInput, AuditLogUncheckedCreateWithoutHardwareItemInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutHardwareItemInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutHardwareItemInput, AuditLogUncheckedUpdateWithoutHardwareItemInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutHardwareItemInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutHardwareItemInput>
  }

  export type HardwareItemCreateWithoutAttachmentsInput = {
    id?: string
    assetTag: string
    type: $Enums.HardwareType
    brand?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    purchaseCost?: number | null
    warrantyEndDate?: Date | string | null
    status?: $Enums.HardwareStatus
    condition?: $Enums.HardwareCondition
    location?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutHardwareItemsInput
    responsibleUser?: UserCreateNestedOneWithoutHardwareItemsInput
    department?: DepartmentCreateNestedOneWithoutHardwareItemsInput
    maintenances?: MaintenanceCreateNestedManyWithoutHardwareItemInput
    allocations?: AllocationCreateNestedManyWithoutHardwareItemInput
    softwareInstalls?: SoftwareInstallCreateNestedManyWithoutHardwareItemInput
    auditLogs?: AuditLogCreateNestedManyWithoutHardwareItemInput
  }

  export type HardwareItemUncheckedCreateWithoutAttachmentsInput = {
    id?: string
    assetTag: string
    type: $Enums.HardwareType
    brand?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    purchaseCost?: number | null
    vendorId?: string | null
    warrantyEndDate?: Date | string | null
    status?: $Enums.HardwareStatus
    condition?: $Enums.HardwareCondition
    location?: string | null
    responsibleUserId?: string | null
    departmentId?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    maintenances?: MaintenanceUncheckedCreateNestedManyWithoutHardwareItemInput
    allocations?: AllocationUncheckedCreateNestedManyWithoutHardwareItemInput
    softwareInstalls?: SoftwareInstallUncheckedCreateNestedManyWithoutHardwareItemInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutHardwareItemInput
  }

  export type HardwareItemCreateOrConnectWithoutAttachmentsInput = {
    where: HardwareItemWhereUniqueInput
    create: XOR<HardwareItemCreateWithoutAttachmentsInput, HardwareItemUncheckedCreateWithoutAttachmentsInput>
  }

  export type HardwareItemUpsertWithoutAttachmentsInput = {
    update: XOR<HardwareItemUpdateWithoutAttachmentsInput, HardwareItemUncheckedUpdateWithoutAttachmentsInput>
    create: XOR<HardwareItemCreateWithoutAttachmentsInput, HardwareItemUncheckedCreateWithoutAttachmentsInput>
    where?: HardwareItemWhereInput
  }

  export type HardwareItemUpdateToOneWithWhereWithoutAttachmentsInput = {
    where?: HardwareItemWhereInput
    data: XOR<HardwareItemUpdateWithoutAttachmentsInput, HardwareItemUncheckedUpdateWithoutAttachmentsInput>
  }

  export type HardwareItemUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypeFieldUpdateOperationsInput | $Enums.HardwareType
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    warrantyEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHardwareStatusFieldUpdateOperationsInput | $Enums.HardwareStatus
    condition?: EnumHardwareConditionFieldUpdateOperationsInput | $Enums.HardwareCondition
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutHardwareItemsNestedInput
    responsibleUser?: UserUpdateOneWithoutHardwareItemsNestedInput
    department?: DepartmentUpdateOneWithoutHardwareItemsNestedInput
    maintenances?: MaintenanceUpdateManyWithoutHardwareItemNestedInput
    allocations?: AllocationUpdateManyWithoutHardwareItemNestedInput
    softwareInstalls?: SoftwareInstallUpdateManyWithoutHardwareItemNestedInput
    auditLogs?: AuditLogUpdateManyWithoutHardwareItemNestedInput
  }

  export type HardwareItemUncheckedUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypeFieldUpdateOperationsInput | $Enums.HardwareType
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    warrantyEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHardwareStatusFieldUpdateOperationsInput | $Enums.HardwareStatus
    condition?: EnumHardwareConditionFieldUpdateOperationsInput | $Enums.HardwareCondition
    location?: NullableStringFieldUpdateOperationsInput | string | null
    responsibleUserId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    maintenances?: MaintenanceUncheckedUpdateManyWithoutHardwareItemNestedInput
    allocations?: AllocationUncheckedUpdateManyWithoutHardwareItemNestedInput
    softwareInstalls?: SoftwareInstallUncheckedUpdateManyWithoutHardwareItemNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutHardwareItemNestedInput
  }

  export type HardwareItemCreateWithoutMaintenancesInput = {
    id?: string
    assetTag: string
    type: $Enums.HardwareType
    brand?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    purchaseCost?: number | null
    warrantyEndDate?: Date | string | null
    status?: $Enums.HardwareStatus
    condition?: $Enums.HardwareCondition
    location?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutHardwareItemsInput
    responsibleUser?: UserCreateNestedOneWithoutHardwareItemsInput
    department?: DepartmentCreateNestedOneWithoutHardwareItemsInput
    attachments?: AttachmentCreateNestedManyWithoutHardwareItemInput
    allocations?: AllocationCreateNestedManyWithoutHardwareItemInput
    softwareInstalls?: SoftwareInstallCreateNestedManyWithoutHardwareItemInput
    auditLogs?: AuditLogCreateNestedManyWithoutHardwareItemInput
  }

  export type HardwareItemUncheckedCreateWithoutMaintenancesInput = {
    id?: string
    assetTag: string
    type: $Enums.HardwareType
    brand?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    purchaseCost?: number | null
    vendorId?: string | null
    warrantyEndDate?: Date | string | null
    status?: $Enums.HardwareStatus
    condition?: $Enums.HardwareCondition
    location?: string | null
    responsibleUserId?: string | null
    departmentId?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attachments?: AttachmentUncheckedCreateNestedManyWithoutHardwareItemInput
    allocations?: AllocationUncheckedCreateNestedManyWithoutHardwareItemInput
    softwareInstalls?: SoftwareInstallUncheckedCreateNestedManyWithoutHardwareItemInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutHardwareItemInput
  }

  export type HardwareItemCreateOrConnectWithoutMaintenancesInput = {
    where: HardwareItemWhereUniqueInput
    create: XOR<HardwareItemCreateWithoutMaintenancesInput, HardwareItemUncheckedCreateWithoutMaintenancesInput>
  }

  export type HardwareItemUpsertWithoutMaintenancesInput = {
    update: XOR<HardwareItemUpdateWithoutMaintenancesInput, HardwareItemUncheckedUpdateWithoutMaintenancesInput>
    create: XOR<HardwareItemCreateWithoutMaintenancesInput, HardwareItemUncheckedCreateWithoutMaintenancesInput>
    where?: HardwareItemWhereInput
  }

  export type HardwareItemUpdateToOneWithWhereWithoutMaintenancesInput = {
    where?: HardwareItemWhereInput
    data: XOR<HardwareItemUpdateWithoutMaintenancesInput, HardwareItemUncheckedUpdateWithoutMaintenancesInput>
  }

  export type HardwareItemUpdateWithoutMaintenancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypeFieldUpdateOperationsInput | $Enums.HardwareType
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    warrantyEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHardwareStatusFieldUpdateOperationsInput | $Enums.HardwareStatus
    condition?: EnumHardwareConditionFieldUpdateOperationsInput | $Enums.HardwareCondition
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutHardwareItemsNestedInput
    responsibleUser?: UserUpdateOneWithoutHardwareItemsNestedInput
    department?: DepartmentUpdateOneWithoutHardwareItemsNestedInput
    attachments?: AttachmentUpdateManyWithoutHardwareItemNestedInput
    allocations?: AllocationUpdateManyWithoutHardwareItemNestedInput
    softwareInstalls?: SoftwareInstallUpdateManyWithoutHardwareItemNestedInput
    auditLogs?: AuditLogUpdateManyWithoutHardwareItemNestedInput
  }

  export type HardwareItemUncheckedUpdateWithoutMaintenancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypeFieldUpdateOperationsInput | $Enums.HardwareType
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    warrantyEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHardwareStatusFieldUpdateOperationsInput | $Enums.HardwareStatus
    condition?: EnumHardwareConditionFieldUpdateOperationsInput | $Enums.HardwareCondition
    location?: NullableStringFieldUpdateOperationsInput | string | null
    responsibleUserId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attachments?: AttachmentUncheckedUpdateManyWithoutHardwareItemNestedInput
    allocations?: AllocationUncheckedUpdateManyWithoutHardwareItemNestedInput
    softwareInstalls?: SoftwareInstallUncheckedUpdateManyWithoutHardwareItemNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutHardwareItemNestedInput
  }

  export type HardwareItemCreateWithoutAllocationsInput = {
    id?: string
    assetTag: string
    type: $Enums.HardwareType
    brand?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    purchaseCost?: number | null
    warrantyEndDate?: Date | string | null
    status?: $Enums.HardwareStatus
    condition?: $Enums.HardwareCondition
    location?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutHardwareItemsInput
    responsibleUser?: UserCreateNestedOneWithoutHardwareItemsInput
    department?: DepartmentCreateNestedOneWithoutHardwareItemsInput
    attachments?: AttachmentCreateNestedManyWithoutHardwareItemInput
    maintenances?: MaintenanceCreateNestedManyWithoutHardwareItemInput
    softwareInstalls?: SoftwareInstallCreateNestedManyWithoutHardwareItemInput
    auditLogs?: AuditLogCreateNestedManyWithoutHardwareItemInput
  }

  export type HardwareItemUncheckedCreateWithoutAllocationsInput = {
    id?: string
    assetTag: string
    type: $Enums.HardwareType
    brand?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    purchaseCost?: number | null
    vendorId?: string | null
    warrantyEndDate?: Date | string | null
    status?: $Enums.HardwareStatus
    condition?: $Enums.HardwareCondition
    location?: string | null
    responsibleUserId?: string | null
    departmentId?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attachments?: AttachmentUncheckedCreateNestedManyWithoutHardwareItemInput
    maintenances?: MaintenanceUncheckedCreateNestedManyWithoutHardwareItemInput
    softwareInstalls?: SoftwareInstallUncheckedCreateNestedManyWithoutHardwareItemInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutHardwareItemInput
  }

  export type HardwareItemCreateOrConnectWithoutAllocationsInput = {
    where: HardwareItemWhereUniqueInput
    create: XOR<HardwareItemCreateWithoutAllocationsInput, HardwareItemUncheckedCreateWithoutAllocationsInput>
  }

  export type UserCreateWithoutAllocationsInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    hardwareItems?: HardwareItemCreateNestedManyWithoutResponsibleUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAllocationsInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    hardwareItems?: HardwareItemUncheckedCreateNestedManyWithoutResponsibleUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAllocationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAllocationsInput, UserUncheckedCreateWithoutAllocationsInput>
  }

  export type DepartmentCreateWithoutAllocationsInput = {
    id?: string
    name: string
    description?: string | null
    hardwareItems?: HardwareItemCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutAllocationsInput = {
    id?: string
    name: string
    description?: string | null
    hardwareItems?: HardwareItemUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutAllocationsInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutAllocationsInput, DepartmentUncheckedCreateWithoutAllocationsInput>
  }

  export type HardwareItemUpsertWithoutAllocationsInput = {
    update: XOR<HardwareItemUpdateWithoutAllocationsInput, HardwareItemUncheckedUpdateWithoutAllocationsInput>
    create: XOR<HardwareItemCreateWithoutAllocationsInput, HardwareItemUncheckedCreateWithoutAllocationsInput>
    where?: HardwareItemWhereInput
  }

  export type HardwareItemUpdateToOneWithWhereWithoutAllocationsInput = {
    where?: HardwareItemWhereInput
    data: XOR<HardwareItemUpdateWithoutAllocationsInput, HardwareItemUncheckedUpdateWithoutAllocationsInput>
  }

  export type HardwareItemUpdateWithoutAllocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypeFieldUpdateOperationsInput | $Enums.HardwareType
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    warrantyEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHardwareStatusFieldUpdateOperationsInput | $Enums.HardwareStatus
    condition?: EnumHardwareConditionFieldUpdateOperationsInput | $Enums.HardwareCondition
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutHardwareItemsNestedInput
    responsibleUser?: UserUpdateOneWithoutHardwareItemsNestedInput
    department?: DepartmentUpdateOneWithoutHardwareItemsNestedInput
    attachments?: AttachmentUpdateManyWithoutHardwareItemNestedInput
    maintenances?: MaintenanceUpdateManyWithoutHardwareItemNestedInput
    softwareInstalls?: SoftwareInstallUpdateManyWithoutHardwareItemNestedInput
    auditLogs?: AuditLogUpdateManyWithoutHardwareItemNestedInput
  }

  export type HardwareItemUncheckedUpdateWithoutAllocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypeFieldUpdateOperationsInput | $Enums.HardwareType
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    warrantyEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHardwareStatusFieldUpdateOperationsInput | $Enums.HardwareStatus
    condition?: EnumHardwareConditionFieldUpdateOperationsInput | $Enums.HardwareCondition
    location?: NullableStringFieldUpdateOperationsInput | string | null
    responsibleUserId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attachments?: AttachmentUncheckedUpdateManyWithoutHardwareItemNestedInput
    maintenances?: MaintenanceUncheckedUpdateManyWithoutHardwareItemNestedInput
    softwareInstalls?: SoftwareInstallUncheckedUpdateManyWithoutHardwareItemNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutHardwareItemNestedInput
  }

  export type UserUpsertWithoutAllocationsInput = {
    update: XOR<UserUpdateWithoutAllocationsInput, UserUncheckedUpdateWithoutAllocationsInput>
    create: XOR<UserCreateWithoutAllocationsInput, UserUncheckedCreateWithoutAllocationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAllocationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAllocationsInput, UserUncheckedUpdateWithoutAllocationsInput>
  }

  export type UserUpdateWithoutAllocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hardwareItems?: HardwareItemUpdateManyWithoutResponsibleUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAllocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hardwareItems?: HardwareItemUncheckedUpdateManyWithoutResponsibleUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DepartmentUpsertWithoutAllocationsInput = {
    update: XOR<DepartmentUpdateWithoutAllocationsInput, DepartmentUncheckedUpdateWithoutAllocationsInput>
    create: XOR<DepartmentCreateWithoutAllocationsInput, DepartmentUncheckedCreateWithoutAllocationsInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutAllocationsInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutAllocationsInput, DepartmentUncheckedUpdateWithoutAllocationsInput>
  }

  export type DepartmentUpdateWithoutAllocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    hardwareItems?: HardwareItemUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutAllocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    hardwareItems?: HardwareItemUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type HardwareItemCreateWithoutSoftwareInstallsInput = {
    id?: string
    assetTag: string
    type: $Enums.HardwareType
    brand?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    purchaseCost?: number | null
    warrantyEndDate?: Date | string | null
    status?: $Enums.HardwareStatus
    condition?: $Enums.HardwareCondition
    location?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutHardwareItemsInput
    responsibleUser?: UserCreateNestedOneWithoutHardwareItemsInput
    department?: DepartmentCreateNestedOneWithoutHardwareItemsInput
    attachments?: AttachmentCreateNestedManyWithoutHardwareItemInput
    maintenances?: MaintenanceCreateNestedManyWithoutHardwareItemInput
    allocations?: AllocationCreateNestedManyWithoutHardwareItemInput
    auditLogs?: AuditLogCreateNestedManyWithoutHardwareItemInput
  }

  export type HardwareItemUncheckedCreateWithoutSoftwareInstallsInput = {
    id?: string
    assetTag: string
    type: $Enums.HardwareType
    brand?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    purchaseCost?: number | null
    vendorId?: string | null
    warrantyEndDate?: Date | string | null
    status?: $Enums.HardwareStatus
    condition?: $Enums.HardwareCondition
    location?: string | null
    responsibleUserId?: string | null
    departmentId?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attachments?: AttachmentUncheckedCreateNestedManyWithoutHardwareItemInput
    maintenances?: MaintenanceUncheckedCreateNestedManyWithoutHardwareItemInput
    allocations?: AllocationUncheckedCreateNestedManyWithoutHardwareItemInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutHardwareItemInput
  }

  export type HardwareItemCreateOrConnectWithoutSoftwareInstallsInput = {
    where: HardwareItemWhereUniqueInput
    create: XOR<HardwareItemCreateWithoutSoftwareInstallsInput, HardwareItemUncheckedCreateWithoutSoftwareInstallsInput>
  }

  export type SoftwareCreateWithoutSoftwareInstallsInput = {
    id?: string
    name: string
    version?: string | null
    category?: string | null
    notes?: string | null
    vendor?: VendorCreateNestedOneWithoutSoftwareInput
    licenses?: LicenseCreateNestedManyWithoutSoftwareInput
  }

  export type SoftwareUncheckedCreateWithoutSoftwareInstallsInput = {
    id?: string
    name: string
    version?: string | null
    category?: string | null
    notes?: string | null
    vendorId?: string | null
    licenses?: LicenseUncheckedCreateNestedManyWithoutSoftwareInput
  }

  export type SoftwareCreateOrConnectWithoutSoftwareInstallsInput = {
    where: SoftwareWhereUniqueInput
    create: XOR<SoftwareCreateWithoutSoftwareInstallsInput, SoftwareUncheckedCreateWithoutSoftwareInstallsInput>
  }

  export type LicenseCreateWithoutSoftwareInstallsInput = {
    id?: string
    key: string
    seatsTotal: number
    seatsInUse?: number
    purchaseDate?: Date | string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    renewalType?: $Enums.RenewalType
    cost?: number | null
    notes?: string | null
    software: SoftwareCreateNestedOneWithoutLicensesInput
    vendor?: VendorCreateNestedOneWithoutLicensesInput
  }

  export type LicenseUncheckedCreateWithoutSoftwareInstallsInput = {
    id?: string
    softwareId: string
    key: string
    seatsTotal: number
    seatsInUse?: number
    purchaseDate?: Date | string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    renewalType?: $Enums.RenewalType
    cost?: number | null
    vendorId?: string | null
    notes?: string | null
  }

  export type LicenseCreateOrConnectWithoutSoftwareInstallsInput = {
    where: LicenseWhereUniqueInput
    create: XOR<LicenseCreateWithoutSoftwareInstallsInput, LicenseUncheckedCreateWithoutSoftwareInstallsInput>
  }

  export type HardwareItemUpsertWithoutSoftwareInstallsInput = {
    update: XOR<HardwareItemUpdateWithoutSoftwareInstallsInput, HardwareItemUncheckedUpdateWithoutSoftwareInstallsInput>
    create: XOR<HardwareItemCreateWithoutSoftwareInstallsInput, HardwareItemUncheckedCreateWithoutSoftwareInstallsInput>
    where?: HardwareItemWhereInput
  }

  export type HardwareItemUpdateToOneWithWhereWithoutSoftwareInstallsInput = {
    where?: HardwareItemWhereInput
    data: XOR<HardwareItemUpdateWithoutSoftwareInstallsInput, HardwareItemUncheckedUpdateWithoutSoftwareInstallsInput>
  }

  export type HardwareItemUpdateWithoutSoftwareInstallsInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypeFieldUpdateOperationsInput | $Enums.HardwareType
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    warrantyEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHardwareStatusFieldUpdateOperationsInput | $Enums.HardwareStatus
    condition?: EnumHardwareConditionFieldUpdateOperationsInput | $Enums.HardwareCondition
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutHardwareItemsNestedInput
    responsibleUser?: UserUpdateOneWithoutHardwareItemsNestedInput
    department?: DepartmentUpdateOneWithoutHardwareItemsNestedInput
    attachments?: AttachmentUpdateManyWithoutHardwareItemNestedInput
    maintenances?: MaintenanceUpdateManyWithoutHardwareItemNestedInput
    allocations?: AllocationUpdateManyWithoutHardwareItemNestedInput
    auditLogs?: AuditLogUpdateManyWithoutHardwareItemNestedInput
  }

  export type HardwareItemUncheckedUpdateWithoutSoftwareInstallsInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypeFieldUpdateOperationsInput | $Enums.HardwareType
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    warrantyEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHardwareStatusFieldUpdateOperationsInput | $Enums.HardwareStatus
    condition?: EnumHardwareConditionFieldUpdateOperationsInput | $Enums.HardwareCondition
    location?: NullableStringFieldUpdateOperationsInput | string | null
    responsibleUserId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attachments?: AttachmentUncheckedUpdateManyWithoutHardwareItemNestedInput
    maintenances?: MaintenanceUncheckedUpdateManyWithoutHardwareItemNestedInput
    allocations?: AllocationUncheckedUpdateManyWithoutHardwareItemNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutHardwareItemNestedInput
  }

  export type SoftwareUpsertWithoutSoftwareInstallsInput = {
    update: XOR<SoftwareUpdateWithoutSoftwareInstallsInput, SoftwareUncheckedUpdateWithoutSoftwareInstallsInput>
    create: XOR<SoftwareCreateWithoutSoftwareInstallsInput, SoftwareUncheckedCreateWithoutSoftwareInstallsInput>
    where?: SoftwareWhereInput
  }

  export type SoftwareUpdateToOneWithWhereWithoutSoftwareInstallsInput = {
    where?: SoftwareWhereInput
    data: XOR<SoftwareUpdateWithoutSoftwareInstallsInput, SoftwareUncheckedUpdateWithoutSoftwareInstallsInput>
  }

  export type SoftwareUpdateWithoutSoftwareInstallsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    vendor?: VendorUpdateOneWithoutSoftwareNestedInput
    licenses?: LicenseUpdateManyWithoutSoftwareNestedInput
  }

  export type SoftwareUncheckedUpdateWithoutSoftwareInstallsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    licenses?: LicenseUncheckedUpdateManyWithoutSoftwareNestedInput
  }

  export type LicenseUpsertWithoutSoftwareInstallsInput = {
    update: XOR<LicenseUpdateWithoutSoftwareInstallsInput, LicenseUncheckedUpdateWithoutSoftwareInstallsInput>
    create: XOR<LicenseCreateWithoutSoftwareInstallsInput, LicenseUncheckedCreateWithoutSoftwareInstallsInput>
    where?: LicenseWhereInput
  }

  export type LicenseUpdateToOneWithWhereWithoutSoftwareInstallsInput = {
    where?: LicenseWhereInput
    data: XOR<LicenseUpdateWithoutSoftwareInstallsInput, LicenseUncheckedUpdateWithoutSoftwareInstallsInput>
  }

  export type LicenseUpdateWithoutSoftwareInstallsInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    seatsTotal?: IntFieldUpdateOperationsInput | number
    seatsInUse?: IntFieldUpdateOperationsInput | number
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    renewalType?: EnumRenewalTypeFieldUpdateOperationsInput | $Enums.RenewalType
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    software?: SoftwareUpdateOneRequiredWithoutLicensesNestedInput
    vendor?: VendorUpdateOneWithoutLicensesNestedInput
  }

  export type LicenseUncheckedUpdateWithoutSoftwareInstallsInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    seatsTotal?: IntFieldUpdateOperationsInput | number
    seatsInUse?: IntFieldUpdateOperationsInput | number
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    renewalType?: EnumRenewalTypeFieldUpdateOperationsInput | $Enums.RenewalType
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    hardwareItems?: HardwareItemCreateNestedManyWithoutResponsibleUserInput
    allocations?: AllocationCreateNestedManyWithoutAssignedToUserInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    name: string
    email: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    hardwareItems?: HardwareItemUncheckedCreateNestedManyWithoutResponsibleUserInput
    allocations?: AllocationUncheckedCreateNestedManyWithoutAssignedToUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type HardwareItemCreateWithoutAuditLogsInput = {
    id?: string
    assetTag: string
    type: $Enums.HardwareType
    brand?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    purchaseCost?: number | null
    warrantyEndDate?: Date | string | null
    status?: $Enums.HardwareStatus
    condition?: $Enums.HardwareCondition
    location?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutHardwareItemsInput
    responsibleUser?: UserCreateNestedOneWithoutHardwareItemsInput
    department?: DepartmentCreateNestedOneWithoutHardwareItemsInput
    attachments?: AttachmentCreateNestedManyWithoutHardwareItemInput
    maintenances?: MaintenanceCreateNestedManyWithoutHardwareItemInput
    allocations?: AllocationCreateNestedManyWithoutHardwareItemInput
    softwareInstalls?: SoftwareInstallCreateNestedManyWithoutHardwareItemInput
  }

  export type HardwareItemUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    assetTag: string
    type: $Enums.HardwareType
    brand?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    purchaseCost?: number | null
    vendorId?: string | null
    warrantyEndDate?: Date | string | null
    status?: $Enums.HardwareStatus
    condition?: $Enums.HardwareCondition
    location?: string | null
    responsibleUserId?: string | null
    departmentId?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attachments?: AttachmentUncheckedCreateNestedManyWithoutHardwareItemInput
    maintenances?: MaintenanceUncheckedCreateNestedManyWithoutHardwareItemInput
    allocations?: AllocationUncheckedCreateNestedManyWithoutHardwareItemInput
    softwareInstalls?: SoftwareInstallUncheckedCreateNestedManyWithoutHardwareItemInput
  }

  export type HardwareItemCreateOrConnectWithoutAuditLogsInput = {
    where: HardwareItemWhereUniqueInput
    create: XOR<HardwareItemCreateWithoutAuditLogsInput, HardwareItemUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hardwareItems?: HardwareItemUpdateManyWithoutResponsibleUserNestedInput
    allocations?: AllocationUpdateManyWithoutAssignedToUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hardwareItems?: HardwareItemUncheckedUpdateManyWithoutResponsibleUserNestedInput
    allocations?: AllocationUncheckedUpdateManyWithoutAssignedToUserNestedInput
  }

  export type HardwareItemUpsertWithoutAuditLogsInput = {
    update: XOR<HardwareItemUpdateWithoutAuditLogsInput, HardwareItemUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<HardwareItemCreateWithoutAuditLogsInput, HardwareItemUncheckedCreateWithoutAuditLogsInput>
    where?: HardwareItemWhereInput
  }

  export type HardwareItemUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: HardwareItemWhereInput
    data: XOR<HardwareItemUpdateWithoutAuditLogsInput, HardwareItemUncheckedUpdateWithoutAuditLogsInput>
  }

  export type HardwareItemUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypeFieldUpdateOperationsInput | $Enums.HardwareType
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    warrantyEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHardwareStatusFieldUpdateOperationsInput | $Enums.HardwareStatus
    condition?: EnumHardwareConditionFieldUpdateOperationsInput | $Enums.HardwareCondition
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutHardwareItemsNestedInput
    responsibleUser?: UserUpdateOneWithoutHardwareItemsNestedInput
    department?: DepartmentUpdateOneWithoutHardwareItemsNestedInput
    attachments?: AttachmentUpdateManyWithoutHardwareItemNestedInput
    maintenances?: MaintenanceUpdateManyWithoutHardwareItemNestedInput
    allocations?: AllocationUpdateManyWithoutHardwareItemNestedInput
    softwareInstalls?: SoftwareInstallUpdateManyWithoutHardwareItemNestedInput
  }

  export type HardwareItemUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypeFieldUpdateOperationsInput | $Enums.HardwareType
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    warrantyEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHardwareStatusFieldUpdateOperationsInput | $Enums.HardwareStatus
    condition?: EnumHardwareConditionFieldUpdateOperationsInput | $Enums.HardwareCondition
    location?: NullableStringFieldUpdateOperationsInput | string | null
    responsibleUserId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attachments?: AttachmentUncheckedUpdateManyWithoutHardwareItemNestedInput
    maintenances?: MaintenanceUncheckedUpdateManyWithoutHardwareItemNestedInput
    allocations?: AllocationUncheckedUpdateManyWithoutHardwareItemNestedInput
    softwareInstalls?: SoftwareInstallUncheckedUpdateManyWithoutHardwareItemNestedInput
  }

  export type HardwareItemCreateManyResponsibleUserInput = {
    id?: string
    assetTag: string
    type: $Enums.HardwareType
    brand?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    purchaseCost?: number | null
    vendorId?: string | null
    warrantyEndDate?: Date | string | null
    status?: $Enums.HardwareStatus
    condition?: $Enums.HardwareCondition
    location?: string | null
    departmentId?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AllocationCreateManyAssignedToUserInput = {
    id?: string
    hardwareItemId: string
    assignedToDepartmentId?: string | null
    checkoutDate?: Date | string
    expectedReturnDate?: Date | string | null
    returnDate?: Date | string | null
    notes?: string | null
  }

  export type AuditLogCreateManyUserInput = {
    id?: string
    entityType: string
    entityId: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type HardwareItemUpdateWithoutResponsibleUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypeFieldUpdateOperationsInput | $Enums.HardwareType
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    warrantyEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHardwareStatusFieldUpdateOperationsInput | $Enums.HardwareStatus
    condition?: EnumHardwareConditionFieldUpdateOperationsInput | $Enums.HardwareCondition
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutHardwareItemsNestedInput
    department?: DepartmentUpdateOneWithoutHardwareItemsNestedInput
    attachments?: AttachmentUpdateManyWithoutHardwareItemNestedInput
    maintenances?: MaintenanceUpdateManyWithoutHardwareItemNestedInput
    allocations?: AllocationUpdateManyWithoutHardwareItemNestedInput
    softwareInstalls?: SoftwareInstallUpdateManyWithoutHardwareItemNestedInput
    auditLogs?: AuditLogUpdateManyWithoutHardwareItemNestedInput
  }

  export type HardwareItemUncheckedUpdateWithoutResponsibleUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypeFieldUpdateOperationsInput | $Enums.HardwareType
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    warrantyEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHardwareStatusFieldUpdateOperationsInput | $Enums.HardwareStatus
    condition?: EnumHardwareConditionFieldUpdateOperationsInput | $Enums.HardwareCondition
    location?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attachments?: AttachmentUncheckedUpdateManyWithoutHardwareItemNestedInput
    maintenances?: MaintenanceUncheckedUpdateManyWithoutHardwareItemNestedInput
    allocations?: AllocationUncheckedUpdateManyWithoutHardwareItemNestedInput
    softwareInstalls?: SoftwareInstallUncheckedUpdateManyWithoutHardwareItemNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutHardwareItemNestedInput
  }

  export type HardwareItemUncheckedUpdateManyWithoutResponsibleUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypeFieldUpdateOperationsInput | $Enums.HardwareType
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    warrantyEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHardwareStatusFieldUpdateOperationsInput | $Enums.HardwareStatus
    condition?: EnumHardwareConditionFieldUpdateOperationsInput | $Enums.HardwareCondition
    location?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AllocationUpdateWithoutAssignedToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    checkoutDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    returnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hardwareItem?: HardwareItemUpdateOneRequiredWithoutAllocationsNestedInput
    assignedToDepartment?: DepartmentUpdateOneWithoutAllocationsNestedInput
  }

  export type AllocationUncheckedUpdateWithoutAssignedToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    hardwareItemId?: StringFieldUpdateOperationsInput | string
    assignedToDepartmentId?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    returnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AllocationUncheckedUpdateManyWithoutAssignedToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    hardwareItemId?: StringFieldUpdateOperationsInput | string
    assignedToDepartmentId?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    returnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    hardwareItem?: HardwareItemUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HardwareItemCreateManyDepartmentInput = {
    id?: string
    assetTag: string
    type: $Enums.HardwareType
    brand?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    purchaseCost?: number | null
    vendorId?: string | null
    warrantyEndDate?: Date | string | null
    status?: $Enums.HardwareStatus
    condition?: $Enums.HardwareCondition
    location?: string | null
    responsibleUserId?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AllocationCreateManyAssignedToDepartmentInput = {
    id?: string
    hardwareItemId: string
    assignedToUserId?: string | null
    checkoutDate?: Date | string
    expectedReturnDate?: Date | string | null
    returnDate?: Date | string | null
    notes?: string | null
  }

  export type HardwareItemUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypeFieldUpdateOperationsInput | $Enums.HardwareType
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    warrantyEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHardwareStatusFieldUpdateOperationsInput | $Enums.HardwareStatus
    condition?: EnumHardwareConditionFieldUpdateOperationsInput | $Enums.HardwareCondition
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutHardwareItemsNestedInput
    responsibleUser?: UserUpdateOneWithoutHardwareItemsNestedInput
    attachments?: AttachmentUpdateManyWithoutHardwareItemNestedInput
    maintenances?: MaintenanceUpdateManyWithoutHardwareItemNestedInput
    allocations?: AllocationUpdateManyWithoutHardwareItemNestedInput
    softwareInstalls?: SoftwareInstallUpdateManyWithoutHardwareItemNestedInput
    auditLogs?: AuditLogUpdateManyWithoutHardwareItemNestedInput
  }

  export type HardwareItemUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypeFieldUpdateOperationsInput | $Enums.HardwareType
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    warrantyEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHardwareStatusFieldUpdateOperationsInput | $Enums.HardwareStatus
    condition?: EnumHardwareConditionFieldUpdateOperationsInput | $Enums.HardwareCondition
    location?: NullableStringFieldUpdateOperationsInput | string | null
    responsibleUserId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attachments?: AttachmentUncheckedUpdateManyWithoutHardwareItemNestedInput
    maintenances?: MaintenanceUncheckedUpdateManyWithoutHardwareItemNestedInput
    allocations?: AllocationUncheckedUpdateManyWithoutHardwareItemNestedInput
    softwareInstalls?: SoftwareInstallUncheckedUpdateManyWithoutHardwareItemNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutHardwareItemNestedInput
  }

  export type HardwareItemUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypeFieldUpdateOperationsInput | $Enums.HardwareType
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    warrantyEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHardwareStatusFieldUpdateOperationsInput | $Enums.HardwareStatus
    condition?: EnumHardwareConditionFieldUpdateOperationsInput | $Enums.HardwareCondition
    location?: NullableStringFieldUpdateOperationsInput | string | null
    responsibleUserId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AllocationUpdateWithoutAssignedToDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    checkoutDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    returnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hardwareItem?: HardwareItemUpdateOneRequiredWithoutAllocationsNestedInput
    assignedToUser?: UserUpdateOneWithoutAllocationsNestedInput
  }

  export type AllocationUncheckedUpdateWithoutAssignedToDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    hardwareItemId?: StringFieldUpdateOperationsInput | string
    assignedToUserId?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    returnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AllocationUncheckedUpdateManyWithoutAssignedToDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    hardwareItemId?: StringFieldUpdateOperationsInput | string
    assignedToUserId?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    returnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HardwareItemCreateManyVendorInput = {
    id?: string
    assetTag: string
    type: $Enums.HardwareType
    brand?: string | null
    model?: string | null
    serialNumber?: string | null
    purchaseDate?: Date | string | null
    purchaseCost?: number | null
    warrantyEndDate?: Date | string | null
    status?: $Enums.HardwareStatus
    condition?: $Enums.HardwareCondition
    location?: string | null
    responsibleUserId?: string | null
    departmentId?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LicenseCreateManyVendorInput = {
    id?: string
    softwareId: string
    key: string
    seatsTotal: number
    seatsInUse?: number
    purchaseDate?: Date | string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    renewalType?: $Enums.RenewalType
    cost?: number | null
    notes?: string | null
  }

  export type SoftwareCreateManyVendorInput = {
    id?: string
    name: string
    version?: string | null
    category?: string | null
    notes?: string | null
  }

  export type HardwareItemUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypeFieldUpdateOperationsInput | $Enums.HardwareType
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    warrantyEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHardwareStatusFieldUpdateOperationsInput | $Enums.HardwareStatus
    condition?: EnumHardwareConditionFieldUpdateOperationsInput | $Enums.HardwareCondition
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    responsibleUser?: UserUpdateOneWithoutHardwareItemsNestedInput
    department?: DepartmentUpdateOneWithoutHardwareItemsNestedInput
    attachments?: AttachmentUpdateManyWithoutHardwareItemNestedInput
    maintenances?: MaintenanceUpdateManyWithoutHardwareItemNestedInput
    allocations?: AllocationUpdateManyWithoutHardwareItemNestedInput
    softwareInstalls?: SoftwareInstallUpdateManyWithoutHardwareItemNestedInput
    auditLogs?: AuditLogUpdateManyWithoutHardwareItemNestedInput
  }

  export type HardwareItemUncheckedUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypeFieldUpdateOperationsInput | $Enums.HardwareType
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    warrantyEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHardwareStatusFieldUpdateOperationsInput | $Enums.HardwareStatus
    condition?: EnumHardwareConditionFieldUpdateOperationsInput | $Enums.HardwareCondition
    location?: NullableStringFieldUpdateOperationsInput | string | null
    responsibleUserId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attachments?: AttachmentUncheckedUpdateManyWithoutHardwareItemNestedInput
    maintenances?: MaintenanceUncheckedUpdateManyWithoutHardwareItemNestedInput
    allocations?: AllocationUncheckedUpdateManyWithoutHardwareItemNestedInput
    softwareInstalls?: SoftwareInstallUncheckedUpdateManyWithoutHardwareItemNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutHardwareItemNestedInput
  }

  export type HardwareItemUncheckedUpdateManyWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    assetTag?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypeFieldUpdateOperationsInput | $Enums.HardwareType
    brand?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    serialNumber?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchaseCost?: NullableFloatFieldUpdateOperationsInput | number | null
    warrantyEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumHardwareStatusFieldUpdateOperationsInput | $Enums.HardwareStatus
    condition?: EnumHardwareConditionFieldUpdateOperationsInput | $Enums.HardwareCondition
    location?: NullableStringFieldUpdateOperationsInput | string | null
    responsibleUserId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LicenseUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    seatsTotal?: IntFieldUpdateOperationsInput | number
    seatsInUse?: IntFieldUpdateOperationsInput | number
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    renewalType?: EnumRenewalTypeFieldUpdateOperationsInput | $Enums.RenewalType
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    software?: SoftwareUpdateOneRequiredWithoutLicensesNestedInput
    softwareInstalls?: SoftwareInstallUpdateManyWithoutLicenseNestedInput
  }

  export type LicenseUncheckedUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    seatsTotal?: IntFieldUpdateOperationsInput | number
    seatsInUse?: IntFieldUpdateOperationsInput | number
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    renewalType?: EnumRenewalTypeFieldUpdateOperationsInput | $Enums.RenewalType
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    softwareInstalls?: SoftwareInstallUncheckedUpdateManyWithoutLicenseNestedInput
  }

  export type LicenseUncheckedUpdateManyWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    seatsTotal?: IntFieldUpdateOperationsInput | number
    seatsInUse?: IntFieldUpdateOperationsInput | number
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    renewalType?: EnumRenewalTypeFieldUpdateOperationsInput | $Enums.RenewalType
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SoftwareUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    licenses?: LicenseUpdateManyWithoutSoftwareNestedInput
    softwareInstalls?: SoftwareInstallUpdateManyWithoutSoftwareNestedInput
  }

  export type SoftwareUncheckedUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    licenses?: LicenseUncheckedUpdateManyWithoutSoftwareNestedInput
    softwareInstalls?: SoftwareInstallUncheckedUpdateManyWithoutSoftwareNestedInput
  }

  export type SoftwareUncheckedUpdateManyWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LicenseCreateManySoftwareInput = {
    id?: string
    key: string
    seatsTotal: number
    seatsInUse?: number
    purchaseDate?: Date | string | null
    startDate?: Date | string | null
    endDate?: Date | string | null
    renewalType?: $Enums.RenewalType
    cost?: number | null
    vendorId?: string | null
    notes?: string | null
  }

  export type SoftwareInstallCreateManySoftwareInput = {
    id?: string
    hardwareItemId: string
    licenseId?: string | null
    installedAt?: Date | string
    uninstalledAt?: Date | string | null
  }

  export type LicenseUpdateWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    seatsTotal?: IntFieldUpdateOperationsInput | number
    seatsInUse?: IntFieldUpdateOperationsInput | number
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    renewalType?: EnumRenewalTypeFieldUpdateOperationsInput | $Enums.RenewalType
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    vendor?: VendorUpdateOneWithoutLicensesNestedInput
    softwareInstalls?: SoftwareInstallUpdateManyWithoutLicenseNestedInput
  }

  export type LicenseUncheckedUpdateWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    seatsTotal?: IntFieldUpdateOperationsInput | number
    seatsInUse?: IntFieldUpdateOperationsInput | number
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    renewalType?: EnumRenewalTypeFieldUpdateOperationsInput | $Enums.RenewalType
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    softwareInstalls?: SoftwareInstallUncheckedUpdateManyWithoutLicenseNestedInput
  }

  export type LicenseUncheckedUpdateManyWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    seatsTotal?: IntFieldUpdateOperationsInput | number
    seatsInUse?: IntFieldUpdateOperationsInput | number
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    renewalType?: EnumRenewalTypeFieldUpdateOperationsInput | $Enums.RenewalType
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SoftwareInstallUpdateWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    installedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uninstalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hardwareItem?: HardwareItemUpdateOneRequiredWithoutSoftwareInstallsNestedInput
    license?: LicenseUpdateOneWithoutSoftwareInstallsNestedInput
  }

  export type SoftwareInstallUncheckedUpdateWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    hardwareItemId?: StringFieldUpdateOperationsInput | string
    licenseId?: NullableStringFieldUpdateOperationsInput | string | null
    installedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uninstalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SoftwareInstallUncheckedUpdateManyWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    hardwareItemId?: StringFieldUpdateOperationsInput | string
    licenseId?: NullableStringFieldUpdateOperationsInput | string | null
    installedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uninstalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SoftwareInstallCreateManyLicenseInput = {
    id?: string
    hardwareItemId: string
    softwareId: string
    installedAt?: Date | string
    uninstalledAt?: Date | string | null
  }

  export type SoftwareInstallUpdateWithoutLicenseInput = {
    id?: StringFieldUpdateOperationsInput | string
    installedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uninstalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hardwareItem?: HardwareItemUpdateOneRequiredWithoutSoftwareInstallsNestedInput
    software?: SoftwareUpdateOneRequiredWithoutSoftwareInstallsNestedInput
  }

  export type SoftwareInstallUncheckedUpdateWithoutLicenseInput = {
    id?: StringFieldUpdateOperationsInput | string
    hardwareItemId?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    installedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uninstalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SoftwareInstallUncheckedUpdateManyWithoutLicenseInput = {
    id?: StringFieldUpdateOperationsInput | string
    hardwareItemId?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    installedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uninstalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AttachmentCreateManyHardwareItemInput = {
    id?: string
    entityType: $Enums.EntityType
    fileUrl: string
    fileName: string
    mimeType: string
    uploadedAt?: Date | string
  }

  export type MaintenanceCreateManyHardwareItemInput = {
    id?: string
    startDate: Date | string
    endDate?: Date | string | null
    provider: string
    description: string
    cost?: number | null
    status?: $Enums.MaintenanceStatus
    notes?: string | null
  }

  export type AllocationCreateManyHardwareItemInput = {
    id?: string
    assignedToUserId?: string | null
    assignedToDepartmentId?: string | null
    checkoutDate?: Date | string
    expectedReturnDate?: Date | string | null
    returnDate?: Date | string | null
    notes?: string | null
  }

  export type SoftwareInstallCreateManyHardwareItemInput = {
    id?: string
    softwareId: string
    licenseId?: string | null
    installedAt?: Date | string
    uninstalledAt?: Date | string | null
  }

  export type AuditLogCreateManyHardwareItemInput = {
    id?: string
    userId: string
    entityType: string
    action: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type AttachmentUpdateWithoutHardwareItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttachmentUncheckedUpdateWithoutHardwareItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttachmentUncheckedUpdateManyWithoutHardwareItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: EnumEntityTypeFieldUpdateOperationsInput | $Enums.EntityType
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceUpdateWithoutHardwareItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MaintenanceUncheckedUpdateWithoutHardwareItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MaintenanceUncheckedUpdateManyWithoutHardwareItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AllocationUpdateWithoutHardwareItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    checkoutDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    returnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToUser?: UserUpdateOneWithoutAllocationsNestedInput
    assignedToDepartment?: DepartmentUpdateOneWithoutAllocationsNestedInput
  }

  export type AllocationUncheckedUpdateWithoutHardwareItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedToUserId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToDepartmentId?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    returnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AllocationUncheckedUpdateManyWithoutHardwareItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedToUserId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToDepartmentId?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    returnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SoftwareInstallUpdateWithoutHardwareItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    installedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uninstalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    software?: SoftwareUpdateOneRequiredWithoutSoftwareInstallsNestedInput
    license?: LicenseUpdateOneWithoutSoftwareInstallsNestedInput
  }

  export type SoftwareInstallUncheckedUpdateWithoutHardwareItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    licenseId?: NullableStringFieldUpdateOperationsInput | string | null
    installedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uninstalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SoftwareInstallUncheckedUpdateManyWithoutHardwareItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    licenseId?: NullableStringFieldUpdateOperationsInput | string | null
    installedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uninstalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuditLogUpdateWithoutHardwareItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutHardwareItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutHardwareItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepartmentCountOutputTypeDefaultArgs instead
     */
    export type DepartmentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepartmentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VendorCountOutputTypeDefaultArgs instead
     */
    export type VendorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VendorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SoftwareCountOutputTypeDefaultArgs instead
     */
    export type SoftwareCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SoftwareCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LicenseCountOutputTypeDefaultArgs instead
     */
    export type LicenseCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LicenseCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HardwareItemCountOutputTypeDefaultArgs instead
     */
    export type HardwareItemCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HardwareItemCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepartmentDefaultArgs instead
     */
    export type DepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepartmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VendorDefaultArgs instead
     */
    export type VendorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VendorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SoftwareDefaultArgs instead
     */
    export type SoftwareArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SoftwareDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LicenseDefaultArgs instead
     */
    export type LicenseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LicenseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HardwareItemDefaultArgs instead
     */
    export type HardwareItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HardwareItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AttachmentDefaultArgs instead
     */
    export type AttachmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AttachmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MaintenanceDefaultArgs instead
     */
    export type MaintenanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MaintenanceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AllocationDefaultArgs instead
     */
    export type AllocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AllocationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SoftwareInstallDefaultArgs instead
     */
    export type SoftwareInstallArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SoftwareInstallDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditLogDefaultArgs instead
     */
    export type AuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditLogDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}