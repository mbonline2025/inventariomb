
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  passwordHash: 'passwordHash',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.VendorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  cnpj: 'cnpj',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  address: 'address',
  notes: 'notes'
};

exports.Prisma.SoftwareScalarFieldEnum = {
  id: 'id',
  name: 'name',
  version: 'version',
  category: 'category',
  notes: 'notes',
  vendorId: 'vendorId'
};

exports.Prisma.LicenseScalarFieldEnum = {
  id: 'id',
  softwareId: 'softwareId',
  key: 'key',
  seatsTotal: 'seatsTotal',
  seatsInUse: 'seatsInUse',
  purchaseDate: 'purchaseDate',
  startDate: 'startDate',
  endDate: 'endDate',
  renewalType: 'renewalType',
  cost: 'cost',
  vendorId: 'vendorId',
  notes: 'notes'
};

exports.Prisma.HardwareItemScalarFieldEnum = {
  id: 'id',
  assetTag: 'assetTag',
  type: 'type',
  brand: 'brand',
  model: 'model',
  serialNumber: 'serialNumber',
  purchaseDate: 'purchaseDate',
  purchaseCost: 'purchaseCost',
  vendorId: 'vendorId',
  warrantyEndDate: 'warrantyEndDate',
  status: 'status',
  condition: 'condition',
  location: 'location',
  responsibleUserId: 'responsibleUserId',
  departmentId: 'departmentId',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AttachmentScalarFieldEnum = {
  id: 'id',
  entityType: 'entityType',
  entityId: 'entityId',
  fileUrl: 'fileUrl',
  fileName: 'fileName',
  mimeType: 'mimeType',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.MaintenanceScalarFieldEnum = {
  id: 'id',
  hardwareItemId: 'hardwareItemId',
  startDate: 'startDate',
  endDate: 'endDate',
  provider: 'provider',
  description: 'description',
  cost: 'cost',
  status: 'status',
  notes: 'notes'
};

exports.Prisma.AllocationScalarFieldEnum = {
  id: 'id',
  hardwareItemId: 'hardwareItemId',
  assignedToUserId: 'assignedToUserId',
  assignedToDepartmentId: 'assignedToDepartmentId',
  checkoutDate: 'checkoutDate',
  expectedReturnDate: 'expectedReturnDate',
  returnDate: 'returnDate',
  notes: 'notes'
};

exports.Prisma.SoftwareInstallScalarFieldEnum = {
  id: 'id',
  hardwareItemId: 'hardwareItemId',
  softwareId: 'softwareId',
  licenseId: 'licenseId',
  installedAt: 'installedAt',
  uninstalledAt: 'uninstalledAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  entityType: 'entityType',
  entityId: 'entityId',
  action: 'action',
  oldValues: 'oldValues',
  newValues: 'newValues',
  timestamp: 'timestamp'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  GESTOR: 'GESTOR',
  COLABORADOR: 'COLABORADOR'
};

exports.VendorType = exports.$Enums.VendorType = {
  LOJA_FISICA: 'LOJA_FISICA',
  E_COMMERCE: 'E_COMMERCE',
  MARKETPLACE: 'MARKETPLACE',
  FABRICANTE: 'FABRICANTE'
};

exports.RenewalType = exports.$Enums.RenewalType = {
  MENSAL: 'MENSAL',
  ANUAL: 'ANUAL',
  PERPETUA: 'PERPETUA'
};

exports.HardwareType = exports.$Enums.HardwareType = {
  LAPTOP: 'LAPTOP',
  IMPRESSORA: 'IMPRESSORA',
  MONITOR: 'MONITOR',
  PERIFERICO: 'PERIFERICO',
  REDE: 'REDE',
  OUTRO: 'OUTRO'
};

exports.HardwareStatus = exports.$Enums.HardwareStatus = {
  EM_USO: 'EM_USO',
  EM_ESTOQUE: 'EM_ESTOQUE',
  EM_MANUTENCAO: 'EM_MANUTENCAO',
  DESATIVADO: 'DESATIVADO',
  EMPRESTADO: 'EMPRESTADO'
};

exports.HardwareCondition = exports.$Enums.HardwareCondition = {
  NOVO: 'NOVO',
  BOM: 'BOM',
  REGULAR: 'REGULAR',
  RUIM: 'RUIM'
};

exports.EntityType = exports.$Enums.EntityType = {
  HARDWARE: 'HARDWARE',
  SOFTWARE: 'SOFTWARE',
  LICENSE: 'LICENSE',
  VENDOR: 'VENDOR',
  MAINTENANCE: 'MAINTENANCE'
};

exports.MaintenanceStatus = exports.$Enums.MaintenanceStatus = {
  ABERTA: 'ABERTA',
  EM_ANDAMENTO: 'EM_ANDAMENTO',
  CONCLUIDA: 'CONCLUIDA',
  CANCELADA: 'CANCELADA'
};

exports.Prisma.ModelName = {
  User: 'User',
  Department: 'Department',
  Vendor: 'Vendor',
  Software: 'Software',
  License: 'License',
  HardwareItem: 'HardwareItem',
  Attachment: 'Attachment',
  Maintenance: 'Maintenance',
  Allocation: 'Allocation',
  SoftwareInstall: 'SoftwareInstall',
  AuditLog: 'AuditLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
