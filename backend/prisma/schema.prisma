// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  passwordHash String
  role         Role     @default(COLABORADOR)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relacionamentos
  hardwareItems HardwareItem[]
  allocations   Allocation[]
  auditLogs     AuditLog[]

  @@map("users")
}

model Department {
  id          String @id @default(cuid())
  name        String
  description String?

  // Relacionamentos
  hardwareItems HardwareItem[]
  allocations   Allocation[]

  @@map("departments")
}

model Vendor {
  id           String      @id @default(cuid())
  name         String
  type         VendorType
  cnpj         String?
  contactEmail String?
  contactPhone String?
  address      String?
  notes        String?

  // Relacionamentos
  hardwareItems HardwareItem[]
  licenses      License[]
  software      Software[]

  @@map("vendors")
}

model Software {
  id       String  @id @default(cuid())
  name     String
  version  String?
  category String?
  notes    String?
  vendorId String?

  // Relacionamentos
  vendor           Vendor?           @relation(fields: [vendorId], references: [id])
  licenses         License[]
  softwareInstalls SoftwareInstall[]

  @@map("software")
}

model License {
  id           String      @id @default(cuid())
  softwareId   String
  key          String
  seatsTotal   Int
  seatsInUse   Int         @default(0)
  purchaseDate DateTime?
  startDate    DateTime?
  endDate      DateTime?
  renewalType  RenewalType @default(ANUAL)
  cost         Float?
  vendorId     String?
  notes        String?

  // Relacionamentos
  software         Software          @relation(fields: [softwareId], references: [id], onDelete: Cascade)
  vendor           Vendor?           @relation(fields: [vendorId], references: [id])
  softwareInstalls SoftwareInstall[]

  @@map("licenses")
}

model HardwareItem {
  id               String            @id @default(cuid())
  assetTag         String            @unique
  type             HardwareType
  brand            String?
  model            String?
  serialNumber     String?
  purchaseDate     DateTime?
  purchaseCost     Float?
  vendorId         String?
  warrantyEndDate  DateTime?
  status           HardwareStatus    @default(EM_ESTOQUE)
  condition        HardwareCondition @default(BOM)
  location         String?
  responsibleUserId String?
  departmentId     String?
  notes            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Relacionamentos
  vendor           Vendor?           @relation(fields: [vendorId], references: [id])
  responsibleUser  User?             @relation(fields: [responsibleUserId], references: [id])
  department       Department?       @relation(fields: [departmentId], references: [id])
  attachments      Attachment[]
  maintenances     Maintenance[]
  allocations      Allocation[]
  softwareInstalls SoftwareInstall[]
  auditLogs        AuditLog[]

  @@map("hardware_items")
}

model Attachment {
  id           String     @id @default(cuid())
  entityType   EntityType
  entityId     String
  fileUrl      String
  fileName     String
  mimeType     String
  uploadedAt   DateTime   @default(now())

  // Relacionamentos
  hardwareItem HardwareItem? @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model Maintenance {
  id              String            @id @default(cuid())
  hardwareItemId  String
  startDate       DateTime
  endDate         DateTime?
  provider        String
  description     String
  cost            Float?
  status          MaintenanceStatus @default(ABERTA)
  notes           String?

  // Relacionamentos
  hardwareItem HardwareItem @relation(fields: [hardwareItemId], references: [id], onDelete: Cascade)

  @@map("maintenances")
}

model Allocation {
  id                   String    @id @default(cuid())
  hardwareItemId       String
  assignedToUserId     String?
  assignedToDepartmentId String?
  checkoutDate         DateTime  @default(now())
  expectedReturnDate   DateTime?
  returnDate           DateTime?
  notes                String?

  // Relacionamentos
  hardwareItem       HardwareItem @relation(fields: [hardwareItemId], references: [id], onDelete: Cascade)
  assignedToUser     User?        @relation(fields: [assignedToUserId], references: [id])
  assignedToDepartment Department? @relation(fields: [assignedToDepartmentId], references: [id])

  @@map("allocations")
}

model SoftwareInstall {
  id             String    @id @default(cuid())
  hardwareItemId String
  softwareId     String
  licenseId      String?
  installedAt    DateTime  @default(now())
  uninstalledAt  DateTime?

  // Relacionamentos
  hardwareItem HardwareItem @relation(fields: [hardwareItemId], references: [id], onDelete: Cascade)
  software     Software     @relation(fields: [softwareId], references: [id], onDelete: Cascade)
  license      License?     @relation(fields: [licenseId], references: [id])

  @@map("software_installs")
}

model AuditLog {
  id             String    @id @default(cuid())
  userId         String
  entityType     String
  entityId       String
  action         String
  oldValues      Json?
  newValues      Json?
  timestamp      DateTime  @default(now())

  // Relacionamentos
  user         User          @relation(fields: [userId], references: [id])
  hardwareItem HardwareItem? @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

// Enums
enum Role {
  ADMIN
  GESTOR
  COLABORADOR
}

enum VendorType {
  LOJA_FISICA
  E_COMMERCE
  MARKETPLACE
  FABRICANTE
}

enum RenewalType {
  MENSAL
  ANUAL
  PERPETUA
}

enum HardwareType {
  LAPTOP
  IMPRESSORA
  MONITOR
  PERIFERICO
  REDE
  OUTRO
}

enum HardwareStatus {
  EM_USO
  EM_ESTOQUE
  EM_MANUTENCAO
  DESATIVADO
  EMPRESTADO
}

enum HardwareCondition {
  NOVO
  BOM
  REGULAR
  RUIM
}

enum EntityType {
  HARDWARE
  SOFTWARE
  LICENSE
  VENDOR
  MAINTENANCE
}

enum MaintenanceStatus {
  ABERTA
  EM_ANDAMENTO
  CONCLUIDA
  CANCELADA
}
